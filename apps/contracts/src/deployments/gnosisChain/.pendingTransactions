{
  "0x4b5d6705e37ed1da26dcaa4ec56439cbc36f5449f134c182f918fef1a8c3a302": {
    "name": "ForwardingSwapProxy",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "ForwardingSwapProxy",
      "sourceName": "contracts/ForwardingSwapProxy.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_admin",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "prod1",
              "type": "uint256"
            }
          ],
          "name": "PRBMath__MulDivFixedPointOverflow",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "prod1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "denominator",
              "type": "uint256"
            }
          ],
          "name": "PRBMath__MulDivOverflow",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "name": "AddedToWhitelist",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "_fromToken",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "_toToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "feeTotal",
              "type": "uint256"
            }
          ],
          "name": "ProxySwapWithFee",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "name": "RemovedFromWhitelist",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32"
            }
          ],
          "name": "RoleAdminChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleGranted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleRevoked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "name": "SetFee",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "contract IVault",
              "name": "vault",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "setter",
              "type": "address"
            }
          ],
          "name": "VaultSet",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "DEFAULT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "WETH",
          "outputs": [
            {
              "internalType": "contract IERC20Extension",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            }
          ],
          "name": "addToWhitelist",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20Extension",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_gasRefund",
              "type": "uint256"
            }
          ],
          "name": "calculatePercentageFeeInETH",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "feeTotalInETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeTotalInToken",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "ethContract",
          "outputs": [
            {
              "internalType": "contract IERC20Extension",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "feePercentage",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "feedRegistry",
          "outputs": [
            {
              "internalType": "contract FeedRegistryInterface",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20Extension",
              "name": "_fromToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Extension",
              "name": "_toToken",
              "type": "address"
            }
          ],
          "name": "getChainlinkRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "exchangeRate",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20Extension",
              "name": "_fromToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Extension",
              "name": "_toToken",
              "type": "address"
            }
          ],
          "name": "getExchangeRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "getRoleMember",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "name": "getRoleMemberCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20Extension",
              "name": "_fromToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Extension",
              "name": "_toToken",
              "type": "address"
            }
          ],
          "name": "getUniswapV2Rate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "grantRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20Extension",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "isEth",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            }
          ],
          "name": "isWhitelisted",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20Extension",
              "name": "_fromToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Extension",
              "name": "_toToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IForwardingSwapProxy.SwapParams",
              "name": "_swapParams",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "_gasRefund",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minimumReturnAmount",
              "type": "uint256"
            }
          ],
          "name": "proxySwapWithFee",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            }
          ],
          "name": "removeFromWhitelist",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "renounceRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "revokeRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "_inputDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "_outputDecimals",
              "type": "uint8"
            }
          ],
          "name": "scaleAmountFromDecimals",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20Extension",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "_inputDecimals",
              "type": "uint8"
            }
          ],
          "name": "scaleAmountFromTokenDecimals",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_pauseContract",
              "type": "bool"
            }
          ],
          "name": "setContractPaused",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fee",
              "type": "uint256"
            }
          ],
          "name": "setFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IVault",
              "name": "_vault",
              "type": "address"
            }
          ],
          "name": "setVault",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "uniswapV2Router",
          "outputs": [
            {
              "internalType": "contract IUniswapV2Router02",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "vault",
          "outputs": [
            {
              "internalType": "contract IVault",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20Extension",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "withdrawERC20",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "0x60806040523480156200001157600080fd5b506040516200347c3803806200347c8339810160408190526200003491620001cd565b6002805460ff19169055600160035580806200005260008262000068565b506200006060008262000068565b5050620001ff565b62000074828262000078565b5050565b6200008f8282620000bb60201b620016821760201c565b6000828152600160209081526040909120620000b6918390620017206200015b821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000074576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001173390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000172836001600160a01b0384166200017b565b90505b92915050565b6000818152600183016020526040812054620001c45750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000175565b50600062000175565b600060208284031215620001e057600080fd5b81516001600160a01b0381168114620001f857600080fd5b9392505050565b61326d806200020f6000396000f3fe6080604052600436106101dc5760003560e01c80639010d07c11610102578063baaa61be11610095578063ea9119a511610064578063ea9119a5146105c8578063ead8ece814610605578063f4f3b2001461063a578063fbfa77cf1461065a57600080fd5b8063baaa61be14610548578063ca15c87314610568578063d547741f14610588578063e43252d7146105a857600080fd5b8063a001ecdd116100d1578063a001ecdd146104d5578063a217fddf146104eb578063a702f2c014610500578063ad5c46481461052057600080fd5b80639010d07c1461043657806390238c391461045657806391d148541461047e5780639ca519c6146104c257600080fd5b80634021a8671161017a5780636817031b116101495780636817031b146103b657806369fe0e2d146103d6578063882796f1146103f65780638ab1d6811461041657600080fd5b80634021a8671461033e5780634c7125941461035e5780635285301c1461037e5780635c975abb1461039e57600080fd5b80632f2ff15d116101b65780632f2ff15d1461029b57806336568abe146102bd5780633af32abf146102dd5780633cc562b21461031657600080fd5b806301ffc9a7146101e85780631694505e1461021d578063248a9ca31461025d57600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b50610208610203366004612a03565b61067a565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610245737a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b039091168152602001610214565b34801561026957600080fd5b5061028d610278366004612a2d565b60009081526020819052604090206001015490565b604051908152602001610214565b3480156102a757600080fd5b506102bb6102b6366004612a5e565b6106be565b005b3480156102c957600080fd5b506102bb6102d8366004612a5e565b6106e9565b3480156102e957600080fd5b506102086102f8366004612a8e565b6001600160a01b031660009081526006602052604090205460ff1690565b34801561032257600080fd5b5061024573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561034a57600080fd5b5061028d610359366004612aba565b61077a565b34801561036a57600080fd5b5061028d610379366004612afc565b61079e565b34801561038a57600080fd5b5061028d610399366004612afc565b610936565b3480156103aa57600080fd5b5060025460ff16610208565b3480156103c257600080fd5b506102bb6103d1366004612a8e565b610ab8565b3480156103e257600080fd5b506102bb6103f1366004612a2d565b610b34565b34801561040257600080fd5b506102bb610411366004612b38565b610b77565b34801561042257600080fd5b506102bb610431366004612a8e565b610b99565b34801561044257600080fd5b50610245610451366004612b55565b610c7d565b34801561046257600080fd5b506102457347fb2585d2c56fe188d0e6ec628a38b74fceeedf81565b34801561048a57600080fd5b50610208610499366004612a5e565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6102bb6104d0366004612b77565b610c95565b3480156104e157600080fd5b5061028d60055481565b3480156104f757600080fd5b5061028d600081565b34801561050c57600080fd5b5061028d61051b366004612bf0565b611093565b34801561052c57600080fd5b5061024573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b34801561055457600080fd5b5061028d610563366004612afc565b611104565b34801561057457600080fd5b5061028d610583366004612a2d565b61122f565b34801561059457600080fd5b506102bb6105a3366004612a5e565b611246565b3480156105b457600080fd5b506102bb6105c3366004612a8e565b61126c565b3480156105d457600080fd5b506102086105e3366004612a8e565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b34801561061157600080fd5b50610625610620366004612c27565b611341565b60408051928352602083019190915201610214565b34801561064657600080fd5b506102bb610655366004612a8e565b611488565b34801561066657600080fd5b50600454610245906001600160a01b031681565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806106b857506106b882611735565b92915050565b6000828152602081905260409020600101546106da813361179c565b6106e4838361181a565b505050565b6001600160a01b038116331461076c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b610776828261183c565b5050565b6000806107868561185e565b9050610793848483611093565b9150505b9392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038416016107dd5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc292505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161081a5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291505b600061082684846118ef565b9050805160000361083b5760009150506106b8565b60006108468561185e565b9050600061085582600a612d56565b610860906001612d65565b6040517fd06ca61f000000000000000000000000000000000000000000000000000000008152909150737a250d5630b4cf539739df2c5dacb4c659f2488d9063d06ca61f906108b59084908790600401612dc8565b600060405180830381865afa9250505080156108f357506040513d6000823e601f3d908101601f191682016040526108f09190810190612dff565b60015b61090357600093505050506106b8565b80600185516109129190612ebd565b8151811061092257610922612ed0565b602002602001015194505050505092915050565b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc1196001600160a01b038416016109755773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee92505b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc1196001600160a01b038316016109b25773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee91505b60006109be8484611bd4565b905080156109da576109d28382601261077a565b9150506106b8565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480610a2157506001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610a305760009150506106b8565b6000610a508573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee611bd4565b90506000610a7273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee86611bd4565b90508115801590610a8257508015155b15610aac576000610a938383611cec565b9050610aa18682601261077a565b9450505050506106b8565b50600095945050505050565b6000610ac4813361179c565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915560405190815233907f8800deb8c31293b539eaf5391fcc88280dc58f015c043d65dd5b72a0979a1dd1906020015b60405180910390a25050565b6000610b40813361179c565b600582905560405182815233907f01fe2943baee27f47add82886c2200f910c749c461c9b63c5fe83901a53bdb4990602001610b28565b6000610b83813361179c565b8115610b9157610776611cf8565b610776611d9d565b6000610ba5813361179c565b6001600160a01b03821660009081526006602052604090205460ff16610c335760405162461bcd60e51b815260206004820152602560248201527f41646472657373206973206d697373696e672066726f6d20746865207768697460448201527f656c6973740000000000000000000000000000000000000000000000000000006064820152608401610763565b6001600160a01b038216600081815260066020526040808220805460ff19169055517fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df7579190a25050565b60008281526001602052604081206107979083611e20565b60025460ff1615610ce85760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610763565b600260035403610d3a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b60026003556001600160a01b0380851690861603610d9a5760405162461bcd60e51b815260206004820152601c60248201527f5f66726f6d546f6b656e20657175616c20746f205f746f546f6b656e000000006044820152606401610763565b6000610da886868685611e2c565b90506000610db7868386611341565b50905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03871603610e6c57610de88183612ebd565b9150828211610e395760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b604051339083156108fc029084906000818181858888f19350505050158015610e66573d6000803e3d6000fd5b50610f97565b60008115610eb857610e9387737a250d5630b4cf539739df2c5dacb4c659f2488d85612103565b610eb4737a250d5630b4cf539739df2c5dacb4c659f2488d8884863061220d565b5090505b610ec28184612ebd565b9250838311610f135760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b6001600160a01b03871663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f949190612ee6565b50505b8015611011576004546001600160a01b031663180e222d82336040516001600160e01b031960e085901b1681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b50505050505b6001600160a01b038087169088167f2fe279dbe9d225a9d3c707f70e43c44034ee8ebbe8a65ceefc7fe927a55a67de73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8214611065578760400135611067565b345b6040805191825260208201879052810185905260600160405180910390a3505060016003555050505050565b60008160ff168360ff1610156110cc576110ad8383612f03565b6110bb9060ff16600a612f1c565b6110c59085612d65565b9050610797565b8160ff168360ff1611156110fc576110e48284612f03565b6110f29060ff16600a612f1c565b6110c59085612f3e565b509192915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038416148061114d57506001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b801561119b575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038316148061119b57506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b156111af5750670de0b6b3a76400006106b8565b60006111bb8484610936565b905080156111ca5790506106b8565b60006111d6858561079e565b905080156111e75791506106b89050565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f205261746520466f756e64000000000000000000000000000000000000006044820152606401610763565b60008181526001602052604081206106b89061237d565b600082815260208190526040902060010154611262813361179c565b6106e4838361183c565b6000611278813361179c565b6001600160a01b0382166112f45760405162461bcd60e51b815260206004820152602960248201527f43616e27742061646420746865203078206164647265737320746f207468652060448201527f77686974656c69737400000000000000000000000000000000000000000000006064820152608401610763565b6001600160a01b038216600081815260066020526040808220805460ff19166001179055517fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab039190a25050565b600080821580156113525750600554155b1561136257506000905080611480565b60006113828673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2611104565b9050600061138f8761185e565b905060006113a86113a08885611cec565b836012611093565b905085811161141f5760405162461bcd60e51b815260206004820152602d60248201527f4e6f74207377617070696e6720656e6f75676820746f207265636f766572207460448201527f68652067617320726566756e64000000000000000000000000000000000000006064820152608401610763565b600061143960055488846114339190612ebd565b90611cec565b90506114458782612f60565b9550600061145587601286611093565b9050600061146b670de0b6b3a764000087612387565b90506114778282611cec565b96505050505050505b935093915050565b6000611494813361179c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161153a5747806115075760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610763565b604051339082156108fc029083906000818181858888f19350505050158015611534573d6000803e3d6000fd5b50505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a59190612f73565b9050600081116115f75760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610763565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0384169063a9059cbb906044015b6020604051808303816000875af115801561165e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190612ee6565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610776576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556116dc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610797836001600160a01b03841661239c565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106b857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106b8565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610776576117d8816001600160a01b031660146123eb565b6117e38360206123eb565b6040516020016117f4929190612fb0565b60408051601f198184030181529082905262461bcd60e51b825261076391600401613031565b6118248282611682565b60008281526001602052604090206106e49082611720565b61184682826125cc565b60008281526001602052604090206106e4908261264b565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161188d57506012919050565b816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190613064565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152606090735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f9063e6a4390590604401602060405180830381865afa925050508015611987575060408051601f3d908101601f1916820190925261198491810190613081565b60015b15611ab2576001600160a01b03811615611ab0576000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156119db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ff91906130c1565b63ffffffff1692505050620151808142611a199190612ebd565b1015611aae5760408051600280825260608201835290916020830190803683370190505092508483600081518110611a5357611a53612ed0565b60200260200101906001600160a01b031690816001600160a01b0316815250508383600181518110611a8757611a87612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505050506106b8565b505b505b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21480611af957506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b6106b8576040805160038082526080820190925290602082016060803683370190505090508281600081518110611b3257611b32612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600181518110611b7a57611b7a612ed0565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110611bae57611bae612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b60006001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015611c165791925073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee915b6040517fbcfd032d0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152841660248201527347fb2585d2c56fe188d0e6ec628a38b74fceeedf9063bcfd032d9060440160a060405180830381865afa925050508015611cab575060408051601f3d908101601f19168201909252611ca891810190613120565b60015b611cb95760009150506106b8565b8515611cde57611cd1670de0b6b3a764000085612387565b96505050505050506106b8565b8396505050505050506106b8565b60006107978383612660565b60025460ff1615611d4b5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610763565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d803390565b6040516001600160a01b03909116815260200160405180910390a1565b60025460ff16611def5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610763565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611d80565b60006107978383612759565b6000611e3e6102f86020850185612a8e565b611e8a5760405162461bcd60e51b815260206004820152600f60248201527f4e6f742077686974656c697374656400000000000000000000000000000000006044820152606401610763565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03861603611f07578260400135341015611f025760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768204554482070726f76696465640000000000000000006044820152606401610763565b611fba565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152602085810135604483015291516001600160a01b038816926323b872dd926064808201939182900301816000875af1158015611f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9e9190612ee6565b50611fba85611fb06020860186612a8e565b8560200135612103565b6000611fc68530612783565b90506000611fd76020860186612a8e565b6001600160a01b031634611fee6060880188613170565b604051611ffc9291906131be565b60006040518083038185875af1925050503d8060008114612039576040519150601f19603f3d011682016040523d82523d6000602084013e61203e565b606091505b505090508061208f5760405162461bcd60e51b815260206004820152601360248201527f50726f786965642053776170204661696c6564000000000000000000000000006044820152606401610763565b600061209b8730612783565b90506120a78382612ebd565b93508484116120f85760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b505050949350505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0384160361212c57505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015282919085169063dd62ed3e90604401602060405180830381865afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190612f73565b10156106e4576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600019602483015284169063095ea7b39060440161163f565b604080516002808252606082018352600092839283929091602083019080368337019050509050868160008151811061224857612248612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061229057612290612ed0565b6001600160a01b0392831660209182029290920101526040517f4a25d94a0000000000000000000000000000000000000000000000000000000081526000918a1690634a25d94a906122ee908a908a9087908b9042906004016131ce565b6000604051808303816000875af115801561230d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123359190810190612dff565b90508060008151811061234a5761234a612ed0565b60200260200101518160018151811061236557612365612ed0565b60200260200101519350935050509550959350505050565b60006106b8825490565b600061079783670de0b6b3a76400008461282a565b60008181526001830160205260408120546123e3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b8565b5060006106b8565b606060006123fa836002612d65565b612405906002612f60565b67ffffffffffffffff81111561241d5761241d612de9565b6040519080825280601f01601f191660200182016040528015612447576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061247e5761247e612ed0565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106124c9576124c9612ed0565b60200101906001600160f81b031916908160001a90535060006124ed846002612d65565b6124f8906001612f60565b90505b600181111561257d577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061253957612539612ed0565b1a60f81b82828151811061254f5761254f612ed0565b60200101906001600160f81b031916908160001a90535060049490941c936125768161320a565b90506124fb565b5083156107975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610763565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610776576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610797836001600160a01b038416612910565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106126bd576040517fd31b340200000000000000000000000000000000000000000000000000000000815260048101829052602401610763565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff82119050826000036126fb5780670de0b6b3a76400008504019450505050506106b8565b6204000082850304939091119091037d40000000000000000000000000000000000000000000000000000000000002919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600082600001828154811061277057612770612ed0565b9060005260206000200154905092915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0384161461281a576040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa1580156127ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128139190612f73565b90506106b8565b506001600160a01b031631919050565b60008080600019858709858702925082811083820303915050806000036128645783828161285a5761285a612f28565b0492505050610797565b8381106128a7576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610763565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600081815260018301602052604081205480156129f9576000612934600183612ebd565b855490915060009061294890600190612ebd565b90508181146129ad57600086600001828154811061296857612968612ed0565b906000526020600020015490508087600001848154811061298b5761298b612ed0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806129be576129be613221565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106b8565b60009150506106b8565b600060208284031215612a1557600080fd5b81356001600160e01b03198116811461079757600080fd5b600060208284031215612a3f57600080fd5b5035919050565b6001600160a01b0381168114612a5b57600080fd5b50565b60008060408385031215612a7157600080fd5b823591506020830135612a8381612a46565b809150509250929050565b600060208284031215612aa057600080fd5b813561079781612a46565b60ff81168114612a5b57600080fd5b600080600060608486031215612acf57600080fd5b8335612ada81612a46565b9250602084013591506040840135612af181612aab565b809150509250925092565b60008060408385031215612b0f57600080fd5b8235612b1a81612a46565b91506020830135612a8381612a46565b8015158114612a5b57600080fd5b600060208284031215612b4a57600080fd5b813561079781612b2a565b60008060408385031215612b6857600080fd5b50508035926020909101359150565b600080600080600060a08688031215612b8f57600080fd5b8535612b9a81612a46565b94506020860135612baa81612a46565b9350604086013567ffffffffffffffff811115612bc657600080fd5b860160808189031215612bd857600080fd5b94979396509394606081013594506080013592915050565b600080600060608486031215612c0557600080fd5b833592506020840135612c1781612aab565b91506040840135612af181612aab565b600080600060608486031215612c3c57600080fd5b8335612c4781612a46565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612cad578160001904821115612c9357612c93612c5c565b80851615612ca057918102915b93841c9390800290612c77565b509250929050565b600082612cc4575060016106b8565b81612cd1575060006106b8565b8160018114612ce75760028114612cf157612d0d565b60019150506106b8565b60ff841115612d0257612d02612c5c565b50506001821b6106b8565b5060208310610133831016604e8410600b8410161715612d30575081810a6106b8565b612d3a8383612c72565b8060001904821115612d4e57612d4e612c5c565b029392505050565b600061079760ff841683612cb5565b6000816000190483118215151615612d7f57612d7f612c5c565b500290565b600081518084526020808501945080840160005b83811015612dbd5781516001600160a01b031687529582019590820190600101612d98565b509495945050505050565b828152604060208201526000612de16040830184612d84565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612e1257600080fd5b825167ffffffffffffffff80821115612e2a57600080fd5b818501915085601f830112612e3e57600080fd5b815181811115612e5057612e50612de9565b8060051b604051601f19603f83011681018181108582111715612e7557612e75612de9565b604052918252848201925083810185019188831115612e9357600080fd5b938501935b82851015612eb157845184529385019392850192612e98565b98975050505050505050565b818103818111156106b8576106b8612c5c565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612ef857600080fd5b815161079781612b2a565b60ff82811682821603908111156106b8576106b8612c5c565b60006107978383612cb5565b634e487b7160e01b600052601260045260246000fd5b600082612f5b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156106b8576106b8612c5c565b600060208284031215612f8557600080fd5b5051919050565b60005b83811015612fa7578181015183820152602001612f8f565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612fe8816017850160208801612f8c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613025816028840160208801612f8c565b01602801949350505050565b6020815260008251806020840152613050816040850160208701612f8c565b601f01601f19169190910160400192915050565b60006020828403121561307657600080fd5b815161079781612aab565b60006020828403121561309357600080fd5b815161079781612a46565b80516dffffffffffffffffffffffffffff811681146130bc57600080fd5b919050565b6000806000606084860312156130d657600080fd5b6130df8461309e565b92506130ed6020850161309e565b9150604084015163ffffffff81168114612af157600080fd5b805169ffffffffffffffffffff811681146130bc57600080fd5b600080600080600060a0868803121561313857600080fd5b61314186613106565b945060208601519350604086015192506060860151915061316460808701613106565b90509295509295909350565b6000808335601e1984360301811261318757600080fd5b83018035915067ffffffffffffffff8211156131a257600080fd5b6020019150368190038213156131b757600080fd5b9250929050565b8183823760009101908152919050565b85815284602082015260a0604082015260006131ed60a0830186612d84565b6001600160a01b0394909416606083015250608001529392505050565b60008161321957613219612c5c565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206942485ec2b78dc8524e919854f2b483a75e915dea88df62f35a6a6bf6dafcce64736f6c63430008100033",
      "deployedBytecode": "0x6080604052600436106101dc5760003560e01c80639010d07c11610102578063baaa61be11610095578063ea9119a511610064578063ea9119a5146105c8578063ead8ece814610605578063f4f3b2001461063a578063fbfa77cf1461065a57600080fd5b8063baaa61be14610548578063ca15c87314610568578063d547741f14610588578063e43252d7146105a857600080fd5b8063a001ecdd116100d1578063a001ecdd146104d5578063a217fddf146104eb578063a702f2c014610500578063ad5c46481461052057600080fd5b80639010d07c1461043657806390238c391461045657806391d148541461047e5780639ca519c6146104c257600080fd5b80634021a8671161017a5780636817031b116101495780636817031b146103b657806369fe0e2d146103d6578063882796f1146103f65780638ab1d6811461041657600080fd5b80634021a8671461033e5780634c7125941461035e5780635285301c1461037e5780635c975abb1461039e57600080fd5b80632f2ff15d116101b65780632f2ff15d1461029b57806336568abe146102bd5780633af32abf146102dd5780633cc562b21461031657600080fd5b806301ffc9a7146101e85780631694505e1461021d578063248a9ca31461025d57600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b50610208610203366004612a03565b61067a565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610245737a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b039091168152602001610214565b34801561026957600080fd5b5061028d610278366004612a2d565b60009081526020819052604090206001015490565b604051908152602001610214565b3480156102a757600080fd5b506102bb6102b6366004612a5e565b6106be565b005b3480156102c957600080fd5b506102bb6102d8366004612a5e565b6106e9565b3480156102e957600080fd5b506102086102f8366004612a8e565b6001600160a01b031660009081526006602052604090205460ff1690565b34801561032257600080fd5b5061024573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561034a57600080fd5b5061028d610359366004612aba565b61077a565b34801561036a57600080fd5b5061028d610379366004612afc565b61079e565b34801561038a57600080fd5b5061028d610399366004612afc565b610936565b3480156103aa57600080fd5b5060025460ff16610208565b3480156103c257600080fd5b506102bb6103d1366004612a8e565b610ab8565b3480156103e257600080fd5b506102bb6103f1366004612a2d565b610b34565b34801561040257600080fd5b506102bb610411366004612b38565b610b77565b34801561042257600080fd5b506102bb610431366004612a8e565b610b99565b34801561044257600080fd5b50610245610451366004612b55565b610c7d565b34801561046257600080fd5b506102457347fb2585d2c56fe188d0e6ec628a38b74fceeedf81565b34801561048a57600080fd5b50610208610499366004612a5e565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6102bb6104d0366004612b77565b610c95565b3480156104e157600080fd5b5061028d60055481565b3480156104f757600080fd5b5061028d600081565b34801561050c57600080fd5b5061028d61051b366004612bf0565b611093565b34801561052c57600080fd5b5061024573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b34801561055457600080fd5b5061028d610563366004612afc565b611104565b34801561057457600080fd5b5061028d610583366004612a2d565b61122f565b34801561059457600080fd5b506102bb6105a3366004612a5e565b611246565b3480156105b457600080fd5b506102bb6105c3366004612a8e565b61126c565b3480156105d457600080fd5b506102086105e3366004612a8e565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b34801561061157600080fd5b50610625610620366004612c27565b611341565b60408051928352602083019190915201610214565b34801561064657600080fd5b506102bb610655366004612a8e565b611488565b34801561066657600080fd5b50600454610245906001600160a01b031681565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806106b857506106b882611735565b92915050565b6000828152602081905260409020600101546106da813361179c565b6106e4838361181a565b505050565b6001600160a01b038116331461076c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b610776828261183c565b5050565b6000806107868561185e565b9050610793848483611093565b9150505b9392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038416016107dd5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc292505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161081a5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291505b600061082684846118ef565b9050805160000361083b5760009150506106b8565b60006108468561185e565b9050600061085582600a612d56565b610860906001612d65565b6040517fd06ca61f000000000000000000000000000000000000000000000000000000008152909150737a250d5630b4cf539739df2c5dacb4c659f2488d9063d06ca61f906108b59084908790600401612dc8565b600060405180830381865afa9250505080156108f357506040513d6000823e601f3d908101601f191682016040526108f09190810190612dff565b60015b61090357600093505050506106b8565b80600185516109129190612ebd565b8151811061092257610922612ed0565b602002602001015194505050505092915050565b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc1196001600160a01b038416016109755773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee92505b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc1196001600160a01b038316016109b25773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee91505b60006109be8484611bd4565b905080156109da576109d28382601261077a565b9150506106b8565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480610a2157506001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610a305760009150506106b8565b6000610a508573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee611bd4565b90506000610a7273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee86611bd4565b90508115801590610a8257508015155b15610aac576000610a938383611cec565b9050610aa18682601261077a565b9450505050506106b8565b50600095945050505050565b6000610ac4813361179c565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915560405190815233907f8800deb8c31293b539eaf5391fcc88280dc58f015c043d65dd5b72a0979a1dd1906020015b60405180910390a25050565b6000610b40813361179c565b600582905560405182815233907f01fe2943baee27f47add82886c2200f910c749c461c9b63c5fe83901a53bdb4990602001610b28565b6000610b83813361179c565b8115610b9157610776611cf8565b610776611d9d565b6000610ba5813361179c565b6001600160a01b03821660009081526006602052604090205460ff16610c335760405162461bcd60e51b815260206004820152602560248201527f41646472657373206973206d697373696e672066726f6d20746865207768697460448201527f656c6973740000000000000000000000000000000000000000000000000000006064820152608401610763565b6001600160a01b038216600081815260066020526040808220805460ff19169055517fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df7579190a25050565b60008281526001602052604081206107979083611e20565b60025460ff1615610ce85760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610763565b600260035403610d3a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b60026003556001600160a01b0380851690861603610d9a5760405162461bcd60e51b815260206004820152601c60248201527f5f66726f6d546f6b656e20657175616c20746f205f746f546f6b656e000000006044820152606401610763565b6000610da886868685611e2c565b90506000610db7868386611341565b50905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03871603610e6c57610de88183612ebd565b9150828211610e395760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b604051339083156108fc029084906000818181858888f19350505050158015610e66573d6000803e3d6000fd5b50610f97565b60008115610eb857610e9387737a250d5630b4cf539739df2c5dacb4c659f2488d85612103565b610eb4737a250d5630b4cf539739df2c5dacb4c659f2488d8884863061220d565b5090505b610ec28184612ebd565b9250838311610f135760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b6001600160a01b03871663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f949190612ee6565b50505b8015611011576004546001600160a01b031663180e222d82336040516001600160e01b031960e085901b1681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b50505050505b6001600160a01b038087169088167f2fe279dbe9d225a9d3c707f70e43c44034ee8ebbe8a65ceefc7fe927a55a67de73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8214611065578760400135611067565b345b6040805191825260208201879052810185905260600160405180910390a3505060016003555050505050565b60008160ff168360ff1610156110cc576110ad8383612f03565b6110bb9060ff16600a612f1c565b6110c59085612d65565b9050610797565b8160ff168360ff1611156110fc576110e48284612f03565b6110f29060ff16600a612f1c565b6110c59085612f3e565b509192915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038416148061114d57506001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b801561119b575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038316148061119b57506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b156111af5750670de0b6b3a76400006106b8565b60006111bb8484610936565b905080156111ca5790506106b8565b60006111d6858561079e565b905080156111e75791506106b89050565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f205261746520466f756e64000000000000000000000000000000000000006044820152606401610763565b60008181526001602052604081206106b89061237d565b600082815260208190526040902060010154611262813361179c565b6106e4838361183c565b6000611278813361179c565b6001600160a01b0382166112f45760405162461bcd60e51b815260206004820152602960248201527f43616e27742061646420746865203078206164647265737320746f207468652060448201527f77686974656c69737400000000000000000000000000000000000000000000006064820152608401610763565b6001600160a01b038216600081815260066020526040808220805460ff19166001179055517fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab039190a25050565b600080821580156113525750600554155b1561136257506000905080611480565b60006113828673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2611104565b9050600061138f8761185e565b905060006113a86113a08885611cec565b836012611093565b905085811161141f5760405162461bcd60e51b815260206004820152602d60248201527f4e6f74207377617070696e6720656e6f75676820746f207265636f766572207460448201527f68652067617320726566756e64000000000000000000000000000000000000006064820152608401610763565b600061143960055488846114339190612ebd565b90611cec565b90506114458782612f60565b9550600061145587601286611093565b9050600061146b670de0b6b3a764000087612387565b90506114778282611cec565b96505050505050505b935093915050565b6000611494813361179c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161153a5747806115075760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610763565b604051339082156108fc029083906000818181858888f19350505050158015611534573d6000803e3d6000fd5b50505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a59190612f73565b9050600081116115f75760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610763565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0384169063a9059cbb906044015b6020604051808303816000875af115801561165e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190612ee6565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610776576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556116dc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610797836001600160a01b03841661239c565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106b857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106b8565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610776576117d8816001600160a01b031660146123eb565b6117e38360206123eb565b6040516020016117f4929190612fb0565b60408051601f198184030181529082905262461bcd60e51b825261076391600401613031565b6118248282611682565b60008281526001602052604090206106e49082611720565b61184682826125cc565b60008281526001602052604090206106e4908261264b565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161188d57506012919050565b816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190613064565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152606090735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f9063e6a4390590604401602060405180830381865afa925050508015611987575060408051601f3d908101601f1916820190925261198491810190613081565b60015b15611ab2576001600160a01b03811615611ab0576000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156119db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ff91906130c1565b63ffffffff1692505050620151808142611a199190612ebd565b1015611aae5760408051600280825260608201835290916020830190803683370190505092508483600081518110611a5357611a53612ed0565b60200260200101906001600160a01b031690816001600160a01b0316815250508383600181518110611a8757611a87612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505050506106b8565b505b505b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21480611af957506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b6106b8576040805160038082526080820190925290602082016060803683370190505090508281600081518110611b3257611b32612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600181518110611b7a57611b7a612ed0565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110611bae57611bae612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b60006001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015611c165791925073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee915b6040517fbcfd032d0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152841660248201527347fb2585d2c56fe188d0e6ec628a38b74fceeedf9063bcfd032d9060440160a060405180830381865afa925050508015611cab575060408051601f3d908101601f19168201909252611ca891810190613120565b60015b611cb95760009150506106b8565b8515611cde57611cd1670de0b6b3a764000085612387565b96505050505050506106b8565b8396505050505050506106b8565b60006107978383612660565b60025460ff1615611d4b5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610763565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d803390565b6040516001600160a01b03909116815260200160405180910390a1565b60025460ff16611def5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610763565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611d80565b60006107978383612759565b6000611e3e6102f86020850185612a8e565b611e8a5760405162461bcd60e51b815260206004820152600f60248201527f4e6f742077686974656c697374656400000000000000000000000000000000006044820152606401610763565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03861603611f07578260400135341015611f025760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768204554482070726f76696465640000000000000000006044820152606401610763565b611fba565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152602085810135604483015291516001600160a01b038816926323b872dd926064808201939182900301816000875af1158015611f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9e9190612ee6565b50611fba85611fb06020860186612a8e565b8560200135612103565b6000611fc68530612783565b90506000611fd76020860186612a8e565b6001600160a01b031634611fee6060880188613170565b604051611ffc9291906131be565b60006040518083038185875af1925050503d8060008114612039576040519150601f19603f3d011682016040523d82523d6000602084013e61203e565b606091505b505090508061208f5760405162461bcd60e51b815260206004820152601360248201527f50726f786965642053776170204661696c6564000000000000000000000000006044820152606401610763565b600061209b8730612783565b90506120a78382612ebd565b93508484116120f85760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b505050949350505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0384160361212c57505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015282919085169063dd62ed3e90604401602060405180830381865afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190612f73565b10156106e4576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600019602483015284169063095ea7b39060440161163f565b604080516002808252606082018352600092839283929091602083019080368337019050509050868160008151811061224857612248612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061229057612290612ed0565b6001600160a01b0392831660209182029290920101526040517f4a25d94a0000000000000000000000000000000000000000000000000000000081526000918a1690634a25d94a906122ee908a908a9087908b9042906004016131ce565b6000604051808303816000875af115801561230d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123359190810190612dff565b90508060008151811061234a5761234a612ed0565b60200260200101518160018151811061236557612365612ed0565b60200260200101519350935050509550959350505050565b60006106b8825490565b600061079783670de0b6b3a76400008461282a565b60008181526001830160205260408120546123e3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b8565b5060006106b8565b606060006123fa836002612d65565b612405906002612f60565b67ffffffffffffffff81111561241d5761241d612de9565b6040519080825280601f01601f191660200182016040528015612447576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061247e5761247e612ed0565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106124c9576124c9612ed0565b60200101906001600160f81b031916908160001a90535060006124ed846002612d65565b6124f8906001612f60565b90505b600181111561257d577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061253957612539612ed0565b1a60f81b82828151811061254f5761254f612ed0565b60200101906001600160f81b031916908160001a90535060049490941c936125768161320a565b90506124fb565b5083156107975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610763565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610776576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610797836001600160a01b038416612910565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106126bd576040517fd31b340200000000000000000000000000000000000000000000000000000000815260048101829052602401610763565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff82119050826000036126fb5780670de0b6b3a76400008504019450505050506106b8565b6204000082850304939091119091037d40000000000000000000000000000000000000000000000000000000000002919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600082600001828154811061277057612770612ed0565b9060005260206000200154905092915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0384161461281a576040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa1580156127ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128139190612f73565b90506106b8565b506001600160a01b031631919050565b60008080600019858709858702925082811083820303915050806000036128645783828161285a5761285a612f28565b0492505050610797565b8381106128a7576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610763565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600081815260018301602052604081205480156129f9576000612934600183612ebd565b855490915060009061294890600190612ebd565b90508181146129ad57600086600001828154811061296857612968612ed0565b906000526020600020015490508087600001848154811061298b5761298b612ed0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806129be576129be613221565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106b8565b60009150506106b8565b600060208284031215612a1557600080fd5b81356001600160e01b03198116811461079757600080fd5b600060208284031215612a3f57600080fd5b5035919050565b6001600160a01b0381168114612a5b57600080fd5b50565b60008060408385031215612a7157600080fd5b823591506020830135612a8381612a46565b809150509250929050565b600060208284031215612aa057600080fd5b813561079781612a46565b60ff81168114612a5b57600080fd5b600080600060608486031215612acf57600080fd5b8335612ada81612a46565b9250602084013591506040840135612af181612aab565b809150509250925092565b60008060408385031215612b0f57600080fd5b8235612b1a81612a46565b91506020830135612a8381612a46565b8015158114612a5b57600080fd5b600060208284031215612b4a57600080fd5b813561079781612b2a565b60008060408385031215612b6857600080fd5b50508035926020909101359150565b600080600080600060a08688031215612b8f57600080fd5b8535612b9a81612a46565b94506020860135612baa81612a46565b9350604086013567ffffffffffffffff811115612bc657600080fd5b860160808189031215612bd857600080fd5b94979396509394606081013594506080013592915050565b600080600060608486031215612c0557600080fd5b833592506020840135612c1781612aab565b91506040840135612af181612aab565b600080600060608486031215612c3c57600080fd5b8335612c4781612a46565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612cad578160001904821115612c9357612c93612c5c565b80851615612ca057918102915b93841c9390800290612c77565b509250929050565b600082612cc4575060016106b8565b81612cd1575060006106b8565b8160018114612ce75760028114612cf157612d0d565b60019150506106b8565b60ff841115612d0257612d02612c5c565b50506001821b6106b8565b5060208310610133831016604e8410600b8410161715612d30575081810a6106b8565b612d3a8383612c72565b8060001904821115612d4e57612d4e612c5c565b029392505050565b600061079760ff841683612cb5565b6000816000190483118215151615612d7f57612d7f612c5c565b500290565b600081518084526020808501945080840160005b83811015612dbd5781516001600160a01b031687529582019590820190600101612d98565b509495945050505050565b828152604060208201526000612de16040830184612d84565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612e1257600080fd5b825167ffffffffffffffff80821115612e2a57600080fd5b818501915085601f830112612e3e57600080fd5b815181811115612e5057612e50612de9565b8060051b604051601f19603f83011681018181108582111715612e7557612e75612de9565b604052918252848201925083810185019188831115612e9357600080fd5b938501935b82851015612eb157845184529385019392850192612e98565b98975050505050505050565b818103818111156106b8576106b8612c5c565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612ef857600080fd5b815161079781612b2a565b60ff82811682821603908111156106b8576106b8612c5c565b60006107978383612cb5565b634e487b7160e01b600052601260045260246000fd5b600082612f5b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156106b8576106b8612c5c565b600060208284031215612f8557600080fd5b5051919050565b60005b83811015612fa7578181015183820152602001612f8f565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612fe8816017850160208801612f8c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613025816028840160208801612f8c565b01602801949350505050565b6020815260008251806020840152613050816040850160208701612f8c565b601f01601f19169190910160400192915050565b60006020828403121561307657600080fd5b815161079781612aab565b60006020828403121561309357600080fd5b815161079781612a46565b80516dffffffffffffffffffffffffffff811681146130bc57600080fd5b919050565b6000806000606084860312156130d657600080fd5b6130df8461309e565b92506130ed6020850161309e565b9150604084015163ffffffff81168114612af157600080fd5b805169ffffffffffffffffffff811681146130bc57600080fd5b600080600080600060a0868803121561313857600080fd5b61314186613106565b945060208601519350604086015192506060860151915061316460808701613106565b90509295509295909350565b6000808335601e1984360301811261318757600080fd5b83018035915067ffffffffffffffff8211156131a257600080fd5b6020019150368190038213156131b757600080fd5b9250929050565b8183823760009101908152919050565b85815284602082015260a0604082015260006131ed60a0830186612d84565b6001600160a01b0394909416606083015250608001529392505050565b60008161321957613219612c5c565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206942485ec2b78dc8524e919854f2b483a75e915dea88df62f35a6a6bf6dafcce64736f6c63430008100033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addToWhitelist(address)": {
            "params": {
              "_address": "The new address to add the whitelist"
            }
          },
          "getChainlinkRate(address,address)": {
            "details": "This function returns 0 if no rate can be found",
            "params": {
              "_fromToken": "The token the user is swapping with",
              "_toToken": "The token the user wwants"
            },
            "returns": {
              "exchangeRate": "The exchange rate or 0 if no rate is found"
            }
          },
          "getExchangeRate(address,address)": {
            "details": "This function tries to lookup the rate through chainlink first and if the request fails it then looks for a rate through Uniswap V2. If no rate can be found the function reverts.",
            "params": {
              "_fromToken": "The token the user is swapping with",
              "_toToken": "The token the user wwants"
            },
            "returns": {
              "_0": "The exchange rate"
            }
          },
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
          },
          "getRoleMember(bytes32,uint256)": {
            "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
          },
          "getRoleMemberCount(bytes32)": {
            "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
          },
          "getUniswapV2Rate(address,address)": {
            "params": {
              "_fromToken": "The token the user is swapping with",
              "_toToken": "The token the user wwants"
            },
            "returns": {
              "_0": "exchangeRate The exchange rate or 0 if no rate is found"
            }
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "isEth(address)": {
            "details": "Simple helper for determing if the token is ETH"
          },
          "isWhitelisted(address)": {
            "params": {
              "_address": "The address to return the whitelist status for"
            },
            "returns": {
              "_0": "A boolean indiciating if the address is whitelisted"
            }
          },
          "paused()": {
            "details": "Returns true if the contract is paused, and false otherwise."
          },
          "proxySwapWithFee(address,address,(address,uint256,uint256,bytes),uint256,uint256)": {
            "params": {
              "_fromToken": "The token the user is swapping from",
              "_gasRefund": "The amount in ETH to refund Aurox for proxying the swap",
              "_minimumReturnAmount": "The minimum amount of _toToken's to receive for the swap. This is the final return amount for the user, after the fee has been deducted",
              "_swapParams": "The required fields to execute the proxy swap",
              "_toToken": "The toke the user wants to swap to"
            }
          },
          "removeFromWhitelist(address)": {
            "params": {
              "_address": "The address to remove from the whitelist"
            }
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
          },
          "scaleAmountFromDecimals(uint256,uint8,uint8)": {
            "details": "This function scales the _amount up or down depending on the difference between the _inputDecimals and _outputDecimals"
          },
          "scaleAmountFromTokenDecimals(address,uint256,uint8)": {
            "details": "Function simply gets the decimals for the provided _token parameter and then scales the _amount accordingly"
          },
          "setContractPaused(bool)": {
            "details": "Allows the admin to update the paused status of the contract"
          },
          "setFee(uint256)": {
            "details": "Allows the admin to update the percentage fee applied to trades"
          },
          "setVault(address)": {
            "details": "Allows the admin to update the vault contract"
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "withdrawERC20(address)": {
            "details": "Allows the admin to withdraw any ETH or ERC20 tokens that might've accidentally been locked in the contract"
          }
        },
        "title": "ForwardingSwapProxy",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_1056": {
              "entryPoint": null,
              "id": 1056,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_4043": {
              "entryPoint": null,
              "id": 4043,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_4823": {
              "entryPoint": null,
              "id": 4823,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_5588": {
              "entryPoint": null,
              "id": 5588,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_972": {
              "entryPoint": null,
              "id": 972,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_add_2082": {
              "entryPoint": 379,
              "id": 2082,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_contains_2185": {
              "entryPoint": null,
              "id": 2185,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_grantRole_690": {
              "entryPoint": 187,
              "id": 690,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_grantRole_822": {
              "entryPoint": 120,
              "id": 822,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_1780": {
              "entryPoint": null,
              "id": 1780,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_setupRole_630": {
              "entryPoint": 104,
              "id": 630,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@add_2368": {
              "entryPoint": 347,
              "id": 2368,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@hasRole_495": {
              "entryPoint": null,
              "id": 495,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 461,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:306:52",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:52",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "95:209:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "141:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "150:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "153:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "143:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "143:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "143:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "116:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "125:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "112:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "112:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "137:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "108:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "108:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "105:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "166:29:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "185:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "179:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "179:16:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "170:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "258:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "267:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "270:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "260:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "260:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "260:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "217:5:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "228:5:52"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "243:3:52",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "248:1:52",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "239:3:52"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "239:11:52"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "252:1:52",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "235:3:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "235:19:52"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "224:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "224:31:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "214:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "214:42:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "207:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "207:50:52"
                          },
                          "nodeType": "YulIf",
                          "src": "204:70:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "283:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "293:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "283:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "61:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "72:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "84:6:52",
                        "type": ""
                      }
                    ],
                    "src": "14:290:52"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
              "id": 52,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60806040523480156200001157600080fd5b506040516200347c3803806200347c8339810160408190526200003491620001cd565b6002805460ff19169055600160035580806200005260008262000068565b506200006060008262000068565b5050620001ff565b62000074828262000078565b5050565b6200008f8282620000bb60201b620016821760201c565b6000828152600160209081526040909120620000b6918390620017206200015b821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000074576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001173390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000172836001600160a01b0384166200017b565b90505b92915050565b6000818152600183016020526040812054620001c45750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000175565b50600062000175565b600060208284031215620001e057600080fd5b81516001600160a01b0381168114620001f857600080fd5b9392505050565b61326d806200020f6000396000f3fe6080604052600436106101dc5760003560e01c80639010d07c11610102578063baaa61be11610095578063ea9119a511610064578063ea9119a5146105c8578063ead8ece814610605578063f4f3b2001461063a578063fbfa77cf1461065a57600080fd5b8063baaa61be14610548578063ca15c87314610568578063d547741f14610588578063e43252d7146105a857600080fd5b8063a001ecdd116100d1578063a001ecdd146104d5578063a217fddf146104eb578063a702f2c014610500578063ad5c46481461052057600080fd5b80639010d07c1461043657806390238c391461045657806391d148541461047e5780639ca519c6146104c257600080fd5b80634021a8671161017a5780636817031b116101495780636817031b146103b657806369fe0e2d146103d6578063882796f1146103f65780638ab1d6811461041657600080fd5b80634021a8671461033e5780634c7125941461035e5780635285301c1461037e5780635c975abb1461039e57600080fd5b80632f2ff15d116101b65780632f2ff15d1461029b57806336568abe146102bd5780633af32abf146102dd5780633cc562b21461031657600080fd5b806301ffc9a7146101e85780631694505e1461021d578063248a9ca31461025d57600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b50610208610203366004612a03565b61067a565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610245737a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b039091168152602001610214565b34801561026957600080fd5b5061028d610278366004612a2d565b60009081526020819052604090206001015490565b604051908152602001610214565b3480156102a757600080fd5b506102bb6102b6366004612a5e565b6106be565b005b3480156102c957600080fd5b506102bb6102d8366004612a5e565b6106e9565b3480156102e957600080fd5b506102086102f8366004612a8e565b6001600160a01b031660009081526006602052604090205460ff1690565b34801561032257600080fd5b5061024573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561034a57600080fd5b5061028d610359366004612aba565b61077a565b34801561036a57600080fd5b5061028d610379366004612afc565b61079e565b34801561038a57600080fd5b5061028d610399366004612afc565b610936565b3480156103aa57600080fd5b5060025460ff16610208565b3480156103c257600080fd5b506102bb6103d1366004612a8e565b610ab8565b3480156103e257600080fd5b506102bb6103f1366004612a2d565b610b34565b34801561040257600080fd5b506102bb610411366004612b38565b610b77565b34801561042257600080fd5b506102bb610431366004612a8e565b610b99565b34801561044257600080fd5b50610245610451366004612b55565b610c7d565b34801561046257600080fd5b506102457347fb2585d2c56fe188d0e6ec628a38b74fceeedf81565b34801561048a57600080fd5b50610208610499366004612a5e565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6102bb6104d0366004612b77565b610c95565b3480156104e157600080fd5b5061028d60055481565b3480156104f757600080fd5b5061028d600081565b34801561050c57600080fd5b5061028d61051b366004612bf0565b611093565b34801561052c57600080fd5b5061024573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b34801561055457600080fd5b5061028d610563366004612afc565b611104565b34801561057457600080fd5b5061028d610583366004612a2d565b61122f565b34801561059457600080fd5b506102bb6105a3366004612a5e565b611246565b3480156105b457600080fd5b506102bb6105c3366004612a8e565b61126c565b3480156105d457600080fd5b506102086105e3366004612a8e565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b34801561061157600080fd5b50610625610620366004612c27565b611341565b60408051928352602083019190915201610214565b34801561064657600080fd5b506102bb610655366004612a8e565b611488565b34801561066657600080fd5b50600454610245906001600160a01b031681565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806106b857506106b882611735565b92915050565b6000828152602081905260409020600101546106da813361179c565b6106e4838361181a565b505050565b6001600160a01b038116331461076c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b610776828261183c565b5050565b6000806107868561185e565b9050610793848483611093565b9150505b9392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038416016107dd5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc292505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161081a5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291505b600061082684846118ef565b9050805160000361083b5760009150506106b8565b60006108468561185e565b9050600061085582600a612d56565b610860906001612d65565b6040517fd06ca61f000000000000000000000000000000000000000000000000000000008152909150737a250d5630b4cf539739df2c5dacb4c659f2488d9063d06ca61f906108b59084908790600401612dc8565b600060405180830381865afa9250505080156108f357506040513d6000823e601f3d908101601f191682016040526108f09190810190612dff565b60015b61090357600093505050506106b8565b80600185516109129190612ebd565b8151811061092257610922612ed0565b602002602001015194505050505092915050565b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc1196001600160a01b038416016109755773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee92505b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc1196001600160a01b038316016109b25773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee91505b60006109be8484611bd4565b905080156109da576109d28382601261077a565b9150506106b8565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480610a2157506001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610a305760009150506106b8565b6000610a508573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee611bd4565b90506000610a7273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee86611bd4565b90508115801590610a8257508015155b15610aac576000610a938383611cec565b9050610aa18682601261077a565b9450505050506106b8565b50600095945050505050565b6000610ac4813361179c565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915560405190815233907f8800deb8c31293b539eaf5391fcc88280dc58f015c043d65dd5b72a0979a1dd1906020015b60405180910390a25050565b6000610b40813361179c565b600582905560405182815233907f01fe2943baee27f47add82886c2200f910c749c461c9b63c5fe83901a53bdb4990602001610b28565b6000610b83813361179c565b8115610b9157610776611cf8565b610776611d9d565b6000610ba5813361179c565b6001600160a01b03821660009081526006602052604090205460ff16610c335760405162461bcd60e51b815260206004820152602560248201527f41646472657373206973206d697373696e672066726f6d20746865207768697460448201527f656c6973740000000000000000000000000000000000000000000000000000006064820152608401610763565b6001600160a01b038216600081815260066020526040808220805460ff19169055517fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df7579190a25050565b60008281526001602052604081206107979083611e20565b60025460ff1615610ce85760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610763565b600260035403610d3a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b60026003556001600160a01b0380851690861603610d9a5760405162461bcd60e51b815260206004820152601c60248201527f5f66726f6d546f6b656e20657175616c20746f205f746f546f6b656e000000006044820152606401610763565b6000610da886868685611e2c565b90506000610db7868386611341565b50905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03871603610e6c57610de88183612ebd565b9150828211610e395760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b604051339083156108fc029084906000818181858888f19350505050158015610e66573d6000803e3d6000fd5b50610f97565b60008115610eb857610e9387737a250d5630b4cf539739df2c5dacb4c659f2488d85612103565b610eb4737a250d5630b4cf539739df2c5dacb4c659f2488d8884863061220d565b5090505b610ec28184612ebd565b9250838311610f135760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b6001600160a01b03871663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f949190612ee6565b50505b8015611011576004546001600160a01b031663180e222d82336040516001600160e01b031960e085901b1681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b50505050505b6001600160a01b038087169088167f2fe279dbe9d225a9d3c707f70e43c44034ee8ebbe8a65ceefc7fe927a55a67de73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8214611065578760400135611067565b345b6040805191825260208201879052810185905260600160405180910390a3505060016003555050505050565b60008160ff168360ff1610156110cc576110ad8383612f03565b6110bb9060ff16600a612f1c565b6110c59085612d65565b9050610797565b8160ff168360ff1611156110fc576110e48284612f03565b6110f29060ff16600a612f1c565b6110c59085612f3e565b509192915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038416148061114d57506001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b801561119b575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038316148061119b57506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b156111af5750670de0b6b3a76400006106b8565b60006111bb8484610936565b905080156111ca5790506106b8565b60006111d6858561079e565b905080156111e75791506106b89050565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f205261746520466f756e64000000000000000000000000000000000000006044820152606401610763565b60008181526001602052604081206106b89061237d565b600082815260208190526040902060010154611262813361179c565b6106e4838361183c565b6000611278813361179c565b6001600160a01b0382166112f45760405162461bcd60e51b815260206004820152602960248201527f43616e27742061646420746865203078206164647265737320746f207468652060448201527f77686974656c69737400000000000000000000000000000000000000000000006064820152608401610763565b6001600160a01b038216600081815260066020526040808220805460ff19166001179055517fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab039190a25050565b600080821580156113525750600554155b1561136257506000905080611480565b60006113828673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2611104565b9050600061138f8761185e565b905060006113a86113a08885611cec565b836012611093565b905085811161141f5760405162461bcd60e51b815260206004820152602d60248201527f4e6f74207377617070696e6720656e6f75676820746f207265636f766572207460448201527f68652067617320726566756e64000000000000000000000000000000000000006064820152608401610763565b600061143960055488846114339190612ebd565b90611cec565b90506114458782612f60565b9550600061145587601286611093565b9050600061146b670de0b6b3a764000087612387565b90506114778282611cec565b96505050505050505b935093915050565b6000611494813361179c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161153a5747806115075760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610763565b604051339082156108fc029083906000818181858888f19350505050158015611534573d6000803e3d6000fd5b50505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a59190612f73565b9050600081116115f75760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610763565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0384169063a9059cbb906044015b6020604051808303816000875af115801561165e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190612ee6565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610776576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556116dc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610797836001600160a01b03841661239c565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106b857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106b8565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610776576117d8816001600160a01b031660146123eb565b6117e38360206123eb565b6040516020016117f4929190612fb0565b60408051601f198184030181529082905262461bcd60e51b825261076391600401613031565b6118248282611682565b60008281526001602052604090206106e49082611720565b61184682826125cc565b60008281526001602052604090206106e4908261264b565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161188d57506012919050565b816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190613064565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152606090735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f9063e6a4390590604401602060405180830381865afa925050508015611987575060408051601f3d908101601f1916820190925261198491810190613081565b60015b15611ab2576001600160a01b03811615611ab0576000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156119db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ff91906130c1565b63ffffffff1692505050620151808142611a199190612ebd565b1015611aae5760408051600280825260608201835290916020830190803683370190505092508483600081518110611a5357611a53612ed0565b60200260200101906001600160a01b031690816001600160a01b0316815250508383600181518110611a8757611a87612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505050506106b8565b505b505b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21480611af957506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b6106b8576040805160038082526080820190925290602082016060803683370190505090508281600081518110611b3257611b32612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600181518110611b7a57611b7a612ed0565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110611bae57611bae612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b60006001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015611c165791925073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee915b6040517fbcfd032d0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152841660248201527347fb2585d2c56fe188d0e6ec628a38b74fceeedf9063bcfd032d9060440160a060405180830381865afa925050508015611cab575060408051601f3d908101601f19168201909252611ca891810190613120565b60015b611cb95760009150506106b8565b8515611cde57611cd1670de0b6b3a764000085612387565b96505050505050506106b8565b8396505050505050506106b8565b60006107978383612660565b60025460ff1615611d4b5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610763565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d803390565b6040516001600160a01b03909116815260200160405180910390a1565b60025460ff16611def5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610763565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611d80565b60006107978383612759565b6000611e3e6102f86020850185612a8e565b611e8a5760405162461bcd60e51b815260206004820152600f60248201527f4e6f742077686974656c697374656400000000000000000000000000000000006044820152606401610763565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03861603611f07578260400135341015611f025760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768204554482070726f76696465640000000000000000006044820152606401610763565b611fba565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152602085810135604483015291516001600160a01b038816926323b872dd926064808201939182900301816000875af1158015611f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9e9190612ee6565b50611fba85611fb06020860186612a8e565b8560200135612103565b6000611fc68530612783565b90506000611fd76020860186612a8e565b6001600160a01b031634611fee6060880188613170565b604051611ffc9291906131be565b60006040518083038185875af1925050503d8060008114612039576040519150601f19603f3d011682016040523d82523d6000602084013e61203e565b606091505b505090508061208f5760405162461bcd60e51b815260206004820152601360248201527f50726f786965642053776170204661696c6564000000000000000000000000006044820152606401610763565b600061209b8730612783565b90506120a78382612ebd565b93508484116120f85760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b505050949350505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0384160361212c57505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015282919085169063dd62ed3e90604401602060405180830381865afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190612f73565b10156106e4576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600019602483015284169063095ea7b39060440161163f565b604080516002808252606082018352600092839283929091602083019080368337019050509050868160008151811061224857612248612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061229057612290612ed0565b6001600160a01b0392831660209182029290920101526040517f4a25d94a0000000000000000000000000000000000000000000000000000000081526000918a1690634a25d94a906122ee908a908a9087908b9042906004016131ce565b6000604051808303816000875af115801561230d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123359190810190612dff565b90508060008151811061234a5761234a612ed0565b60200260200101518160018151811061236557612365612ed0565b60200260200101519350935050509550959350505050565b60006106b8825490565b600061079783670de0b6b3a76400008461282a565b60008181526001830160205260408120546123e3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b8565b5060006106b8565b606060006123fa836002612d65565b612405906002612f60565b67ffffffffffffffff81111561241d5761241d612de9565b6040519080825280601f01601f191660200182016040528015612447576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061247e5761247e612ed0565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106124c9576124c9612ed0565b60200101906001600160f81b031916908160001a90535060006124ed846002612d65565b6124f8906001612f60565b90505b600181111561257d577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061253957612539612ed0565b1a60f81b82828151811061254f5761254f612ed0565b60200101906001600160f81b031916908160001a90535060049490941c936125768161320a565b90506124fb565b5083156107975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610763565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610776576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610797836001600160a01b038416612910565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106126bd576040517fd31b340200000000000000000000000000000000000000000000000000000000815260048101829052602401610763565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff82119050826000036126fb5780670de0b6b3a76400008504019450505050506106b8565b6204000082850304939091119091037d40000000000000000000000000000000000000000000000000000000000002919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600082600001828154811061277057612770612ed0565b9060005260206000200154905092915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0384161461281a576040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa1580156127ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128139190612f73565b90506106b8565b506001600160a01b031631919050565b60008080600019858709858702925082811083820303915050806000036128645783828161285a5761285a612f28565b0492505050610797565b8381106128a7576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610763565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600081815260018301602052604081205480156129f9576000612934600183612ebd565b855490915060009061294890600190612ebd565b90508181146129ad57600086600001828154811061296857612968612ed0565b906000526020600020015490508087600001848154811061298b5761298b612ed0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806129be576129be613221565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106b8565b60009150506106b8565b600060208284031215612a1557600080fd5b81356001600160e01b03198116811461079757600080fd5b600060208284031215612a3f57600080fd5b5035919050565b6001600160a01b0381168114612a5b57600080fd5b50565b60008060408385031215612a7157600080fd5b823591506020830135612a8381612a46565b809150509250929050565b600060208284031215612aa057600080fd5b813561079781612a46565b60ff81168114612a5b57600080fd5b600080600060608486031215612acf57600080fd5b8335612ada81612a46565b9250602084013591506040840135612af181612aab565b809150509250925092565b60008060408385031215612b0f57600080fd5b8235612b1a81612a46565b91506020830135612a8381612a46565b8015158114612a5b57600080fd5b600060208284031215612b4a57600080fd5b813561079781612b2a565b60008060408385031215612b6857600080fd5b50508035926020909101359150565b600080600080600060a08688031215612b8f57600080fd5b8535612b9a81612a46565b94506020860135612baa81612a46565b9350604086013567ffffffffffffffff811115612bc657600080fd5b860160808189031215612bd857600080fd5b94979396509394606081013594506080013592915050565b600080600060608486031215612c0557600080fd5b833592506020840135612c1781612aab565b91506040840135612af181612aab565b600080600060608486031215612c3c57600080fd5b8335612c4781612a46565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612cad578160001904821115612c9357612c93612c5c565b80851615612ca057918102915b93841c9390800290612c77565b509250929050565b600082612cc4575060016106b8565b81612cd1575060006106b8565b8160018114612ce75760028114612cf157612d0d565b60019150506106b8565b60ff841115612d0257612d02612c5c565b50506001821b6106b8565b5060208310610133831016604e8410600b8410161715612d30575081810a6106b8565b612d3a8383612c72565b8060001904821115612d4e57612d4e612c5c565b029392505050565b600061079760ff841683612cb5565b6000816000190483118215151615612d7f57612d7f612c5c565b500290565b600081518084526020808501945080840160005b83811015612dbd5781516001600160a01b031687529582019590820190600101612d98565b509495945050505050565b828152604060208201526000612de16040830184612d84565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612e1257600080fd5b825167ffffffffffffffff80821115612e2a57600080fd5b818501915085601f830112612e3e57600080fd5b815181811115612e5057612e50612de9565b8060051b604051601f19603f83011681018181108582111715612e7557612e75612de9565b604052918252848201925083810185019188831115612e9357600080fd5b938501935b82851015612eb157845184529385019392850192612e98565b98975050505050505050565b818103818111156106b8576106b8612c5c565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612ef857600080fd5b815161079781612b2a565b60ff82811682821603908111156106b8576106b8612c5c565b60006107978383612cb5565b634e487b7160e01b600052601260045260246000fd5b600082612f5b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156106b8576106b8612c5c565b600060208284031215612f8557600080fd5b5051919050565b60005b83811015612fa7578181015183820152602001612f8f565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612fe8816017850160208801612f8c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613025816028840160208801612f8c565b01602801949350505050565b6020815260008251806020840152613050816040850160208701612f8c565b601f01601f19169190910160400192915050565b60006020828403121561307657600080fd5b815161079781612aab565b60006020828403121561309357600080fd5b815161079781612a46565b80516dffffffffffffffffffffffffffff811681146130bc57600080fd5b919050565b6000806000606084860312156130d657600080fd5b6130df8461309e565b92506130ed6020850161309e565b9150604084015163ffffffff81168114612af157600080fd5b805169ffffffffffffffffffff811681146130bc57600080fd5b600080600080600060a0868803121561313857600080fd5b61314186613106565b945060208601519350604086015192506060860151915061316460808701613106565b90509295509295909350565b6000808335601e1984360301811261318757600080fd5b83018035915067ffffffffffffffff8211156131a257600080fd5b6020019150368190038213156131b757600080fd5b9250929050565b8183823760009101908152919050565b85815284602082015260a0604082015260006131ed60a0830186612d84565b6001600160a01b0394909416606083015250608001529392505050565b60008161321957613219612c5c565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206942485ec2b78dc8524e919854f2b483a75e915dea88df62f35a6a6bf6dafcce64736f6c63430008100033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x347C CODESIZE SUB DUP1 PUSH3 0x347C DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1CD JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 SSTORE DUP1 DUP1 PUSH3 0x52 PUSH1 0x0 DUP3 PUSH3 0x68 JUMP JUMPDEST POP PUSH3 0x60 PUSH1 0x0 DUP3 PUSH3 0x68 JUMP JUMPDEST POP POP PUSH3 0x1FF JUMP JUMPDEST PUSH3 0x74 DUP3 DUP3 PUSH3 0x78 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x8F DUP3 DUP3 PUSH3 0xBB PUSH1 0x20 SHL PUSH3 0x1682 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH3 0xB6 SWAP2 DUP4 SWAP1 PUSH3 0x1720 PUSH3 0x15B DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x74 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x117 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x172 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x17B JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH3 0x1C4 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH3 0x175 JUMP JUMPDEST POP PUSH1 0x0 PUSH3 0x175 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x326D DUP1 PUSH3 0x20F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1DC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9010D07C GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xBAAA61BE GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xEA9119A5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xEA9119A5 EQ PUSH2 0x5C8 JUMPI DUP1 PUSH4 0xEAD8ECE8 EQ PUSH2 0x605 JUMPI DUP1 PUSH4 0xF4F3B200 EQ PUSH2 0x63A JUMPI DUP1 PUSH4 0xFBFA77CF EQ PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBAAA61BE EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x568 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x588 JUMPI DUP1 PUSH4 0xE43252D7 EQ PUSH2 0x5A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA001ECDD GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA001ECDD EQ PUSH2 0x4D5 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x4EB JUMPI DUP1 PUSH4 0xA702F2C0 EQ PUSH2 0x500 JUMPI DUP1 PUSH4 0xAD5C4648 EQ PUSH2 0x520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9010D07C EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x90238C39 EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x47E JUMPI DUP1 PUSH4 0x9CA519C6 EQ PUSH2 0x4C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4021A867 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x6817031B GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x6817031B EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x69FE0E2D EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x882796F1 EQ PUSH2 0x3F6 JUMPI DUP1 PUSH4 0x8AB1D681 EQ PUSH2 0x416 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4021A867 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x4C712594 EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0x5285301C EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0x3AF32ABF EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x3CC562B2 EQ PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x1694505E EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x1E3 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A03 JUMP JUMPDEST PUSH2 0x67A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x245 PUSH20 0x7A250D5630B4CF539739DF2C5DACB4C659F2488D DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A2D JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A5E JUMP JUMPDEST PUSH2 0x6BE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x2D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A5E JUMP JUMPDEST PUSH2 0x6E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x2F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x245 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x359 CALLDATASIZE PUSH1 0x4 PUSH2 0x2ABA JUMP JUMPDEST PUSH2 0x77A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x379 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AFC JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x399 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AFC JUMP JUMPDEST PUSH2 0x936 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0x208 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0xAB8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x3F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A2D JUMP JUMPDEST PUSH2 0xB34 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B38 JUMP JUMPDEST PUSH2 0xB77 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0xB99 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x245 PUSH2 0x451 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B55 JUMP JUMPDEST PUSH2 0xC7D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x245 PUSH20 0x47FB2585D2C56FE188D0E6EC628A38B74FCEEEDF DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x499 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A5E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2BB PUSH2 0x4D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B77 JUMP JUMPDEST PUSH2 0xC95 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x51B CALLDATASIZE PUSH1 0x4 PUSH2 0x2BF0 JUMP JUMPDEST PUSH2 0x1093 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x245 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x563 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AFC JUMP JUMPDEST PUSH2 0x1104 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x583 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A2D JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x5A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A5E JUMP JUMPDEST PUSH2 0x1246 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x5C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0x126C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x5E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x611 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x625 PUSH2 0x620 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C27 JUMP JUMPDEST PUSH2 0x1341 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x655 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0x1488 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x245 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x5A05180F00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x6B8 JUMPI POP PUSH2 0x6B8 DUP3 PUSH2 0x1735 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x6DA DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH2 0x6E4 DUP4 DUP4 PUSH2 0x181A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x76C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x776 DUP3 DUP3 PUSH2 0x183C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x786 DUP6 PUSH2 0x185E JUMP JUMPDEST SWAP1 POP PUSH2 0x793 DUP5 DUP5 DUP4 PUSH2 0x1093 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ADD PUSH2 0x7DD JUMPI PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP3 POP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADD PUSH2 0x81A JUMPI PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x826 DUP5 DUP5 PUSH2 0x18EF JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x83B JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x846 DUP6 PUSH2 0x185E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x855 DUP3 PUSH1 0xA PUSH2 0x2D56 JUMP JUMPDEST PUSH2 0x860 SWAP1 PUSH1 0x1 PUSH2 0x2D65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD06CA61F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0x7A250D5630B4CF539739DF2C5DACB4C659F2488D SWAP1 PUSH4 0xD06CA61F SWAP1 PUSH2 0x8B5 SWAP1 DUP5 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2DC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8F3 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8F0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2DFF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x903 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 MLOAD PUSH2 0x912 SWAP2 SWAP1 PUSH2 0x2EBD JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x922 JUMPI PUSH2 0x922 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC1 NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ADD PUSH2 0x975 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE SWAP3 POP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC1 NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADD PUSH2 0x9B2 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x9BE DUP5 DUP5 PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x9DA JUMPI PUSH2 0x9D2 DUP4 DUP3 PUSH1 0x12 PUSH2 0x77A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ DUP1 PUSH2 0xA21 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ JUMPDEST ISZERO PUSH2 0xA30 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA50 DUP6 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA72 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP7 PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0xA82 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xAAC JUMPI PUSH1 0x0 PUSH2 0xA93 DUP4 DUP4 PUSH2 0x1CEC JUMP JUMPDEST SWAP1 POP PUSH2 0xAA1 DUP7 DUP3 PUSH1 0x12 PUSH2 0x77A JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC4 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP1 PUSH32 0x8800DEB8C31293B539EAF5391FCC88280DC58F015C043D65DD5B72A0979A1DD1 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB40 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH1 0x5 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x1FE2943BAEE27F47ADD82886C2200F910C749C461C9B63C5FE83901A53BDB49 SWAP1 PUSH1 0x20 ADD PUSH2 0xB28 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB83 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST DUP2 ISZERO PUSH2 0xB91 JUMPI PUSH2 0x776 PUSH2 0x1CF8 JUMP JUMPDEST PUSH2 0x776 PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBA5 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xC33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41646472657373206973206D697373696E672066726F6D207468652077686974 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656C697374000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0xCDD2E9B91A56913D370075169CEFA1602BA36BE5301664F752192BB1709DF757 SWAP2 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x797 SWAP1 DUP4 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xCE8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x3 SLOAD SUB PUSH2 0xD3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP1 DUP7 AND SUB PUSH2 0xD9A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F66726F6D546F6B656E20657175616C20746F205F746F546F6B656E00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA8 DUP7 DUP7 DUP7 DUP6 PUSH2 0x1E2C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDB7 DUP7 DUP4 DUP7 PUSH2 0x1341 JUMP JUMPDEST POP SWAP1 POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SUB PUSH2 0xE6C JUMPI PUSH2 0xDE8 DUP2 DUP4 PUSH2 0x2EBD JUMP JUMPDEST SWAP2 POP DUP3 DUP3 GT PUSH2 0xE39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820746F6B656E732072657475726E6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xE66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0xEB8 JUMPI PUSH2 0xE93 DUP8 PUSH20 0x7A250D5630B4CF539739DF2C5DACB4C659F2488D DUP6 PUSH2 0x2103 JUMP JUMPDEST PUSH2 0xEB4 PUSH20 0x7A250D5630B4CF539739DF2C5DACB4C659F2488D DUP9 DUP5 DUP7 ADDRESS PUSH2 0x220D JUMP JUMPDEST POP SWAP1 POP JUMPDEST PUSH2 0xEC2 DUP2 DUP5 PUSH2 0x2EBD JUMP JUMPDEST SWAP3 POP DUP4 DUP4 GT PUSH2 0xF13 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820746F6B656E732072657475726E6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH4 0xA9059CBB CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF70 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF94 SWAP2 SWAP1 PUSH2 0x2EE6 JUMP JUMPDEST POP POP JUMPDEST DUP1 ISZERO PUSH2 0x1011 JUMPI PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x180E222D DUP3 CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x100B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP1 DUP9 AND PUSH32 0x2FE279DBE9D225A9D3C707F70E43C44034EE8EBBE8A65CEEFC7FE927A55A67DE PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP3 EQ PUSH2 0x1065 JUMPI DUP8 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x1067 JUMP JUMPDEST CALLVALUE JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP8 SWAP1 MSTORE DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 PUSH1 0x3 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND DUP4 PUSH1 0xFF AND LT ISZERO PUSH2 0x10CC JUMPI PUSH2 0x10AD DUP4 DUP4 PUSH2 0x2F03 JUMP JUMPDEST PUSH2 0x10BB SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x2F1C JUMP JUMPDEST PUSH2 0x10C5 SWAP1 DUP6 PUSH2 0x2D65 JUMP JUMPDEST SWAP1 POP PUSH2 0x797 JUMP JUMPDEST DUP2 PUSH1 0xFF AND DUP4 PUSH1 0xFF AND GT ISZERO PUSH2 0x10FC JUMPI PUSH2 0x10E4 DUP3 DUP5 PUSH2 0x2F03 JUMP JUMPDEST PUSH2 0x10F2 SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x2F1C JUMP JUMPDEST PUSH2 0x10C5 SWAP1 DUP6 PUSH2 0x2F3E JUMP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ DUP1 PUSH2 0x114D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ JUMPDEST DUP1 ISZERO PUSH2 0x119B JUMPI POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EQ DUP1 PUSH2 0x119B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ JUMPDEST ISZERO PUSH2 0x11AF JUMPI POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11BB DUP5 DUP5 PUSH2 0x936 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x11CA JUMPI SWAP1 POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11D6 DUP6 DUP6 PUSH2 0x79E JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x11E7 JUMPI SWAP2 POP PUSH2 0x6B8 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F205261746520466F756E6400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x6B8 SWAP1 PUSH2 0x237D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1262 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH2 0x6E4 DUP4 DUP4 PUSH2 0x183C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1278 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x12F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E27742061646420746865203078206164647265737320746F2074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xA850AE9193F515CBAE8D35E8925BD2BE26627FC91BCE650B8652ED254E9CAB03 SWAP2 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1352 JUMPI POP PUSH1 0x5 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1362 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x1480 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1382 DUP7 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH2 0x1104 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x138F DUP8 PUSH2 0x185E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x13A8 PUSH2 0x13A0 DUP9 DUP6 PUSH2 0x1CEC JUMP JUMPDEST DUP4 PUSH1 0x12 PUSH2 0x1093 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT PUSH2 0x141F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F74207377617070696E6720656E6F75676820746F207265636F7665722074 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x68652067617320726566756E6400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1439 PUSH1 0x5 SLOAD DUP9 DUP5 PUSH2 0x1433 SWAP2 SWAP1 PUSH2 0x2EBD JUMP JUMPDEST SWAP1 PUSH2 0x1CEC JUMP JUMPDEST SWAP1 POP PUSH2 0x1445 DUP8 DUP3 PUSH2 0x2F60 JUMP JUMPDEST SWAP6 POP PUSH1 0x0 PUSH2 0x1455 DUP8 PUSH1 0x12 DUP7 PUSH2 0x1093 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x146B PUSH8 0xDE0B6B3A7640000 DUP8 PUSH2 0x2387 JUMP JUMPDEST SWAP1 POP PUSH2 0x1477 DUP3 DUP3 PUSH2 0x1CEC JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1494 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADD PUSH2 0x153A JUMPI SELFBALANCE DUP1 PUSH2 0x1507 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7468696E6720746F20776974686472617700000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1534 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1581 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15A5 SWAP2 SWAP1 PUSH2 0x2F73 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x15F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7468696E6720746F20776974686472617700000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x165E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1534 SWAP2 SWAP1 PUSH2 0x2EE6 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x776 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x16DC CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x239C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x6B8 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x776 JUMPI PUSH2 0x17D8 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x23EB JUMP JUMPDEST PUSH2 0x17E3 DUP4 PUSH1 0x20 PUSH2 0x23EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17F4 SWAP3 SWAP2 SWAP1 PUSH2 0x2FB0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x763 SWAP2 PUSH1 0x4 ADD PUSH2 0x3031 JUMP JUMPDEST PUSH2 0x1824 DUP3 DUP3 PUSH2 0x1682 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6E4 SWAP1 DUP3 PUSH2 0x1720 JUMP JUMPDEST PUSH2 0x1846 DUP3 DUP3 PUSH2 0x25CC JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6E4 SWAP1 DUP3 PUSH2 0x264B JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADD PUSH2 0x188D JUMPI POP PUSH1 0x12 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6B8 SWAP2 SWAP1 PUSH2 0x3064 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE6A4390500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x60 SWAP1 PUSH20 0x5C69BEE701EF814A2B6A3EDD4B1652CB9CC5AA6F SWAP1 PUSH4 0xE6A43905 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1987 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1984 SWAP2 DUP2 ADD SWAP1 PUSH2 0x3081 JUMP JUMPDEST PUSH1 0x1 JUMPDEST ISZERO PUSH2 0x1AB2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1AB0 JUMPI PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19FF SWAP2 SWAP1 PUSH2 0x30C1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP3 POP POP POP PUSH3 0x15180 DUP2 TIMESTAMP PUSH2 0x1A19 SWAP2 SWAP1 PUSH2 0x2EBD JUMP JUMPDEST LT ISZERO PUSH2 0x1AAE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE SWAP1 SWAP2 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP3 POP DUP5 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A53 JUMPI PUSH2 0x1A53 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP4 DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1A87 JUMPI PUSH2 0x1A87 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST POP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ DUP1 PUSH2 0x1AF9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ JUMPDEST PUSH2 0x6B8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD PUSH1 0x60 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1B32 JUMPI PUSH2 0x1B32 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1B7A JUMPI PUSH2 0x1B7A PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP2 DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x1BAE JUMPI PUSH2 0x1BAE PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ DUP1 ISZERO PUSH2 0x1C16 JUMPI SWAP2 SWAP3 POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE SWAP2 JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBCFD032D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x47FB2585D2C56FE188D0E6EC628A38B74FCEEEDF SWAP1 PUSH4 0xBCFD032D SWAP1 PUSH1 0x44 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1CAB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1CA8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x3120 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1CB9 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST DUP6 ISZERO PUSH2 0x1CDE JUMPI PUSH2 0x1CD1 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x2387 JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST DUP4 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 DUP4 PUSH2 0x2660 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1D4B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1D80 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0x1DEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER PUSH2 0x1D80 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 DUP4 PUSH2 0x2759 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E3E PUSH2 0x2F8 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0x1E8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742077686974656C69737465640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0x1F07 JUMPI DUP3 PUSH1 0x40 ADD CALLDATALOAD CALLVALUE LT ISZERO PUSH2 0x1F02 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F756768204554482070726F7669646564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x1FBA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP6 DUP2 ADD CALLDATALOAD PUSH1 0x44 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP3 PUSH4 0x23B872DD SWAP3 PUSH1 0x64 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F9E SWAP2 SWAP1 PUSH2 0x2EE6 JUMP JUMPDEST POP PUSH2 0x1FBA DUP6 PUSH2 0x1FB0 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x2A8E JUMP JUMPDEST DUP6 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x2103 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC6 DUP6 ADDRESS PUSH2 0x2783 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FD7 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x2A8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH2 0x1FEE PUSH1 0x60 DUP9 ADD DUP9 PUSH2 0x3170 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FFC SWAP3 SWAP2 SWAP1 PUSH2 0x31BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2039 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x203E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x208F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F786965642053776170204661696C656400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x209B DUP8 ADDRESS PUSH2 0x2783 JUMP JUMPDEST SWAP1 POP PUSH2 0x20A7 DUP4 DUP3 PUSH2 0x2EBD JUMP JUMPDEST SWAP4 POP DUP5 DUP5 GT PUSH2 0x20F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820746F6B656E732072657475726E6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SUB PUSH2 0x212C JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP3 SWAP2 SWAP1 DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2194 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21B8 SWAP2 SWAP1 PUSH2 0x2F73 JUMP JUMPDEST LT ISZERO PUSH2 0x6E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 NOT PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH2 0x163F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP1 SWAP2 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP7 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2248 JUMPI PUSH2 0x2248 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2290 JUMPI PUSH2 0x2290 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x4A25D94A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP11 AND SWAP1 PUSH4 0x4A25D94A SWAP1 PUSH2 0x22EE SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x31CE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x230D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2335 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2DFF JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x234A JUMPI PUSH2 0x234A PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2365 JUMPI PUSH2 0x2365 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP SWAP4 POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B8 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 PUSH8 0xDE0B6B3A7640000 DUP5 PUSH2 0x282A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x23E3 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x6B8 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x23FA DUP4 PUSH1 0x2 PUSH2 0x2D65 JUMP JUMPDEST PUSH2 0x2405 SWAP1 PUSH1 0x2 PUSH2 0x2F60 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x241D JUMPI PUSH2 0x241D PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2447 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x247E JUMPI PUSH2 0x247E PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x24C9 JUMPI PUSH2 0x24C9 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x24ED DUP5 PUSH1 0x2 PUSH2 0x2D65 JUMP JUMPDEST PUSH2 0x24F8 SWAP1 PUSH1 0x1 PUSH2 0x2F60 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x257D JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2539 JUMPI PUSH2 0x2539 PUSH2 0x2ED0 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x254F JUMPI PUSH2 0x254F PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x2576 DUP2 PUSH2 0x320A JUMP JUMPDEST SWAP1 POP PUSH2 0x24FB JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x797 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x776 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2910 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP5 DUP7 MULMOD DUP5 DUP7 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH8 0xDE0B6B3A7640000 DUP2 LT PUSH2 0x26BD JUMPI PUSH1 0x40 MLOAD PUSH32 0xD31B340200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xDE0B6B3A7640000 DUP7 DUP9 MULMOD SWAP2 POP PUSH8 0x6F05B59D3B1FFFF DUP3 GT SWAP1 POP DUP3 PUSH1 0x0 SUB PUSH2 0x26FB JUMPI DUP1 PUSH8 0xDE0B6B3A7640000 DUP6 DIV ADD SWAP5 POP POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH3 0x40000 DUP3 DUP6 SUB DIV SWAP4 SWAP1 SWAP2 GT SWAP1 SWAP2 SUB PUSH30 0x400000000000000000000000000000000000000000000000000000000000 MUL SWAP2 SWAP1 SWAP2 OR PUSH32 0xACCB18165BD6FE31AE1CF318DC5B51EEE0E1BA569B88CD74C1773B91FAC10669 MUL ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2770 JUMPI PUSH2 0x2770 PUSH2 0x2ED0 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ PUSH2 0x281A JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2813 SWAP2 SWAP1 PUSH2 0x2F73 JUMP JUMPDEST SWAP1 POP PUSH2 0x6B8 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP DUP1 PUSH1 0x0 SUB PUSH2 0x2864 JUMPI DUP4 DUP3 DUP2 PUSH2 0x285A JUMPI PUSH2 0x285A PUSH2 0x2F28 JUMP JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x797 JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0x28A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x773CC18C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x2 PUSH1 0x1 DUP8 NOT DUP2 ADD DUP9 AND SWAP8 DUP9 SWAP1 DIV PUSH1 0x3 DUP2 MUL DUP4 XOR DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL SWAP1 DUP2 MUL SWAP1 SWAP3 SUB SWAP1 SWAP2 MUL PUSH1 0x0 DUP9 SWAP1 SUB DUP9 SWAP1 DIV SWAP1 SWAP2 ADD DUP6 DUP4 GT SWAP1 SWAP5 SUB SWAP4 SWAP1 SWAP4 MUL SWAP4 SUB SWAP5 SWAP1 SWAP5 DIV SWAP2 SWAP1 SWAP2 OR MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x29F9 JUMPI PUSH1 0x0 PUSH2 0x2934 PUSH1 0x1 DUP4 PUSH2 0x2EBD JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2948 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2EBD JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x29AD JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2968 JUMPI PUSH2 0x2968 PUSH2 0x2ED0 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x298B JUMPI PUSH2 0x298B PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x29BE JUMPI PUSH2 0x29BE PUSH2 0x3221 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2A5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2A83 DUP2 PUSH2 0x2A46 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x797 DUP2 PUSH2 0x2A46 JUMP JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2A5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2ACF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2ADA DUP2 PUSH2 0x2A46 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2AF1 DUP2 PUSH2 0x2AAB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2B1A DUP2 PUSH2 0x2A46 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2A83 DUP2 PUSH2 0x2A46 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2A5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x797 DUP2 PUSH2 0x2B2A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2B8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2B9A DUP2 PUSH2 0x2A46 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2BAA DUP2 PUSH2 0x2A46 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x80 DUP2 DUP10 SUB SLT ISZERO PUSH2 0x2BD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2C05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2C17 DUP2 PUSH2 0x2AAB JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2AF1 DUP2 PUSH2 0x2AAB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2C3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2C47 DUP2 PUSH2 0x2A46 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x2CAD JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2C93 JUMPI PUSH2 0x2C93 PUSH2 0x2C5C JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2CA0 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x2C77 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2CC4 JUMPI POP PUSH1 0x1 PUSH2 0x6B8 JUMP JUMPDEST DUP2 PUSH2 0x2CD1 JUMPI POP PUSH1 0x0 PUSH2 0x6B8 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2CE7 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2CF1 JUMPI PUSH2 0x2D0D JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x2D02 JUMPI PUSH2 0x2D02 PUSH2 0x2C5C JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x6B8 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x2D30 JUMPI POP DUP2 DUP2 EXP PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x2D3A DUP4 DUP4 PUSH2 0x2C72 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2D4E JUMPI PUSH2 0x2D4E PUSH2 0x2C5C JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x2CB5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2D7F JUMPI PUSH2 0x2D7F PUSH2 0x2C5C JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DBD JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2D98 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2DE1 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2D84 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2E2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2E50 JUMPI PUSH2 0x2E50 PUSH2 0x2DE9 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x2E75 JUMPI PUSH2 0x2E75 PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x2E93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x2EB1 JUMPI DUP5 MLOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x2E98 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6B8 JUMPI PUSH2 0x6B8 PUSH2 0x2C5C JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x797 DUP2 PUSH2 0x2B2A JUMP JUMPDEST PUSH1 0xFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH2 0x6B8 JUMPI PUSH2 0x6B8 PUSH2 0x2C5C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 DUP4 PUSH2 0x2CB5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2F5B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6B8 JUMPI PUSH2 0x6B8 PUSH2 0x2C5C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2FA7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2F8F JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2FE8 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2F8C JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x3025 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2F8C JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3050 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2F8C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x797 DUP2 PUSH2 0x2AAB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3093 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x797 DUP2 PUSH2 0x2A46 JUMP JUMPDEST DUP1 MLOAD PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x30BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x30D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30DF DUP5 PUSH2 0x309E JUMP JUMPDEST SWAP3 POP PUSH2 0x30ED PUSH1 0x20 DUP6 ADD PUSH2 0x309E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2AF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x30BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3141 DUP7 PUSH2 0x3106 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP3 POP PUSH1 0x60 DUP7 ADD MLOAD SWAP2 POP PUSH2 0x3164 PUSH1 0x80 DUP8 ADD PUSH2 0x3106 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x3187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x31A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x31B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP6 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x31ED PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x2D84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3219 JUMPI PUSH2 0x3219 PUSH2 0x2C5C JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH10 0x42485EC2B78DC8524E91 SWAP9 SLOAD CALLCODE 0xB4 DUP4 0xA7 0x5E SWAP2 0x5D 0xEA DUP9 0xDF PUSH3 0xF35A6A PUSH12 0xF6DAFCCE64736F6C63430008 LT STOP CALLER ",
          "sourceMap": "543:4083:33:-:0;;;886:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;981:7:8;:15;;-1:-1:-1;;981:15:8;;;;1806:7:9;:22;946:6:33;;1897:38:32;991:5:8;946:6:33;1897:10:32;:38::i;:::-;-1:-1:-1;309:38:36;2072:4:4;340:6:36;309:10;:38::i;:::-;271:83;886:70:33;543:4083;;6257:110:4;6335:25;6346:4;6352:7;6335:10;:25::i;:::-;6257:110;;:::o;1978:166:5:-;2065:31;2082:4;2088:7;2065:16;;;;;:31;;:::i;:::-;2106:18;;;;:12;:18;;;;;;;;:31;;2129:7;;2106:22;;;;;:31;;:::i;:::-;;1978:166;;:::o;6861:233:4:-;2995:4;3018:12;;;;;;;;;;;-1:-1:-1;;;;;3018:29:4;;;;;;;;;;;;6939:149;;6982:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6982:29:4;;;;;;;;;:36;;-1:-1:-1;;6982:36:4;7014:4;6982:36;;;7064:12;719:10:13;;640:96;7064:12:4;-1:-1:-1;;;;;7037:40:4;7055:7;-1:-1:-1;;;;;7037:40:4;7049:4;7037:40;;;;;;;;;;6861:233;;:::o;7612:150:17:-;7682:4;7705:50;7710:3;-1:-1:-1;;;;;7730:23:17;;7705:4;:50::i;:::-;7698:57;;7612:150;;;;;:::o;1697:404::-;1760:4;3834:19;;;:12;;;:19;;;;;;1776:319;;-1:-1:-1;1818:23:17;;;;;;;;:11;:23;;;;;;;;;;;;;1998:18;;1976:19;;;:12;;;:19;;;;;;:40;;;;2030:11;;1776:319;-1:-1:-1;2079:5:17;2072:12;;14:290:52;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:52;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:52:o;:::-;543:4083:33;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@DEFAULT_ADMIN_ROLE_441": {
              "entryPoint": null,
              "id": 441,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@WETH_4005": {
              "entryPoint": null,
              "id": 4005,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_4032": {
              "entryPoint": null,
              "id": 4032,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_add_2082": {
              "entryPoint": 9116,
              "id": 2082,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_at_2216": {
              "entryPoint": 10073,
              "id": 2216,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_checkRole_538": {
              "entryPoint": 6044,
              "id": 538,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_contains_2185": {
              "entryPoint": null,
              "id": 2185,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_getDecimals_4205": {
              "entryPoint": 6238,
              "id": 4205,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_grantRole_690": {
              "entryPoint": 5762,
              "id": 690,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_grantRole_822": {
              "entryPoint": 6170,
              "id": 822,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_handleApprovalFromThis_4776": {
              "entryPoint": 8451,
              "id": 4776,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_length_2199": {
              "entryPoint": null,
              "id": 2199,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_msgSender_1780": {
              "entryPoint": null,
              "id": 1780,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_pause_1020": {
              "entryPoint": 7416,
              "id": 1020,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_remove_2166": {
              "entryPoint": 10512,
              "id": 2166,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_returnUniswapV2Path_7293": {
              "entryPoint": 6383,
              "id": 7293,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_revokeRole_721": {
              "entryPoint": 9676,
              "id": 721,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_revokeRole_846": {
              "entryPoint": 6204,
              "id": 846,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_swapTokensForExactETH_7162": {
              "entryPoint": 8717,
              "id": 7162,
              "parameterSlots": 5,
              "returnSlots": 2
            },
            "@_swapTokensWithChecks_4934": {
              "entryPoint": 7724,
              "id": 4934,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_unpause_1036": {
              "entryPoint": 7581,
              "id": 1036,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@addToWhitelist_5631": {
              "entryPoint": 4716,
              "id": 5631,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@add_2368": {
              "entryPoint": 5920,
              "id": 2368,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@at_2464": {
              "entryPoint": 7712,
              "id": 2464,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@calculatePercentageFeeInETH_4736": {
              "entryPoint": 4929,
              "id": 4736,
              "parameterSlots": 3,
              "returnSlots": 2
            },
            "@div_10575": {
              "entryPoint": 9095,
              "id": 10575,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@ethContract_4011": {
              "entryPoint": null,
              "id": 4011,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@feePercentage_4028": {
              "entryPoint": null,
              "id": 4028,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@feedRegistry_4017": {
              "entryPoint": null,
              "id": 4017,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@getChainlinkRate_4485": {
              "entryPoint": 2358,
              "id": 4485,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getExchangeRate_4635": {
              "entryPoint": 4356,
              "id": 4635,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getRoleAdmin_553": {
              "entryPoint": null,
              "id": 553,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getRoleMemberCount_798": {
              "entryPoint": 4655,
              "id": 798,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getRoleMember_782": {
              "entryPoint": 3197,
              "id": 782,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getUniswapV2Rate_4571": {
              "entryPoint": 1950,
              "id": 4571,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@grantRole_573": {
              "entryPoint": 1726,
              "id": 573,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@hasRole_495": {
              "entryPoint": null,
              "id": 495,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@isEth_4057": {
              "entryPoint": null,
              "id": 4057,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@isWhitelisted_5601": {
              "entryPoint": null,
              "id": 5601,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@length_2437": {
              "entryPoint": 9085,
              "id": 2437,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@mulDivFixedPoint_9036": {
              "entryPoint": 9824,
              "id": 9036,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@mulDiv_8984": {
              "entryPoint": 10282,
              "id": 8984,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@mul_10924": {
              "entryPoint": 7404,
              "id": 10924,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@paused_981": {
              "entryPoint": null,
              "id": 981,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@proxySwapWithFee_5092": {
              "entryPoint": 3221,
              "id": 5092,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@removeFromWhitelist_5657": {
              "entryPoint": 2969,
              "id": 5657,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@remove_2395": {
              "entryPoint": 9803,
              "id": 2395,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@renounceRole_616": {
              "entryPoint": 1769,
              "id": 616,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@returnTokenBalance_4230": {
              "entryPoint": 10115,
              "id": 4230,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@revokeRole_593": {
              "entryPoint": 4678,
              "id": 593,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@scaleAmountFromDecimals_4361": {
              "entryPoint": 4243,
              "id": 4361,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@scaleAmountFromTokenDecimals_4387": {
              "entryPoint": 1914,
              "id": 4387,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@setContractPaused_4098": {
              "entryPoint": 2935,
              "id": 4098,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setFee_4184": {
              "entryPoint": 2868,
              "id": 4184,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setVault_4078": {
              "entryPoint": 2744,
              "id": 4078,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@supportsInterface_2016": {
              "entryPoint": null,
              "id": 2016,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_476": {
              "entryPoint": 5941,
              "id": 476,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_763": {
              "entryPoint": 1658,
              "id": 763,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@toHexString_1992": {
              "entryPoint": 9195,
              "id": 1992,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@tryGetChainlinkRate_4308": {
              "entryPoint": 7124,
              "id": 4308,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@uniswapV2Router_4023": {
              "entryPoint": null,
              "id": 4023,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@vault_4026": {
              "entryPoint": null,
              "id": 4026,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@withdrawERC20_4164": {
              "entryPoint": 5256,
              "id": 4164,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 10894,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 12417,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 11775,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bool": {
              "entryPoint": 11064,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 12006,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32": {
              "entryPoint": 10797,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32t_address": {
              "entryPoint": 10846,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes32t_uint256": {
              "entryPoint": 11093,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 10755,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_IERC20Extension_$6254": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_IERC20Extension_$6254t_contract$_IERC20Extension_$6254": {
              "entryPoint": 11004,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_contract$_IERC20Extension_$6254t_contract$_IERC20Extension_$6254t_struct$_SwapParams_$6279_calldata_ptrt_uint256t_uint256": {
              "entryPoint": 11127,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_contract$_IERC20Extension_$6254t_uint256t_uint256": {
              "entryPoint": 11303,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_contract$_IERC20Extension_$6254t_uint256t_uint8": {
              "entryPoint": 10938,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_contract$_IVault_$6373": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory": {
              "entryPoint": 12481,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 12147,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_uint8t_uint8": {
              "entryPoint": 11248,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory": {
              "entryPoint": 12576,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_uint8_fromMemory": {
              "entryPoint": 12388,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_uint112_fromMemory": {
              "entryPoint": 12446,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_uint80_fromMemory": {
              "entryPoint": 12550,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_array_address_dyn": {
              "entryPoint": 11652,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 12734,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 12208,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_FeedRegistryInterface_$413__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IERC20Extension_$6254__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IUniswapV2Router02_$3329__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IVault_$6373__to_t_address_payable__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 12337,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_14373ae13a43c5dd6e9fd26add6a1d6b2fbb5390cabb63f758018d07dad22b36__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_190efc4342d84e2f530e9c2ed40fbf35cc9090f0d8e7451e0c74b93fede7fe89__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1b19ac089d87f4146c293e731799080c98f8ee751187f94356e96cb0c086a394__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_4d7037a1e13d147b9b07b9401ec2f598c18fd4440c46d57f2266abc6f0c455a5__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_4ef7e73b278ed89ca1c08190d910535c7f6427e9a2f00b2eb691dd84cab465a7__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_72830cd2e69a452b3989df2d6c124f1de4827fe8ed6c5116814e4b49c3fcbdd0__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_882bd51cdea287dc64cd17d87d6bc24885d0ed00ec941ca79d46e03eef53ef5f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_aa488853b340104988e04385b57dae970eec1ad64141f784ad069c00b8fbafa2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b73316ddd64e6d8bca955d3c8bae26782bd68489ff344116d675cc018f35f092__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_fefbae264c85f90387b25bba1f4ca30cd84bc058ac45c5aead12f4cd9153378b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_array$_t_address_$dyn_memory_ptr__to_t_uint256_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 11720,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__to_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 12750,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "access_calldata_tail_t_bytes_calldata_ptr": {
              "entryPoint": 12656,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "checked_add_t_uint256": {
              "entryPoint": 12128,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 12094,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_helper": {
              "entryPoint": 11378,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "checked_exp_t_uint256_t_uint256": {
              "entryPoint": 12060,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_t_uint256_t_uint8": {
              "entryPoint": 11606,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_unsigned": {
              "entryPoint": 11445,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 11621,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 11965,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint8": {
              "entryPoint": 12035,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 12172,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "decrement_t_uint256": {
              "entryPoint": 12810,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 11356,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 12072,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x31": {
              "entryPoint": 12833,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 11984,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 11753,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 10822,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_bool": {
              "entryPoint": 11050,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_uint8": {
              "entryPoint": 10923,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:24858:52",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:52",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "83:263:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "129:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "138:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "141:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "131:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "131:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "131:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "104:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "113:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "100:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "100:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "125:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "96:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "96:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "93:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "154:36:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "180:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "167:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "167:23:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "158:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "300:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "309:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "312:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "302:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "302:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "302:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "212:5:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "223:5:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "230:66:52",
                                        "type": "",
                                        "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "219:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "219:78:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "209:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "209:89:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "202:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "202:97:52"
                          },
                          "nodeType": "YulIf",
                          "src": "199:117:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "325:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "335:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "325:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "49:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "60:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "72:6:52",
                        "type": ""
                      }
                    ],
                    "src": "14:332:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "446:92:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "456:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "468:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "479:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "464:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "464:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "456:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "498:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "523:6:52"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "516:6:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "516:14:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "509:6:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "509:22:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "491:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "491:41:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "491:41:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "415:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "426:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "437:4:52",
                        "type": ""
                      }
                    ],
                    "src": "351:187:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "671:125:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "681:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "693:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "704:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "689:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "689:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "681:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "723:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "738:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "746:42:52",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "734:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "734:55:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "716:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "716:74:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "716:74:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IUniswapV2Router02_$3329__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "640:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "651:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "662:4:52",
                        "type": ""
                      }
                    ],
                    "src": "543:253:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "871:110:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "917:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "926:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "929:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "919:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "919:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "919:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "892:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "901:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "888:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "888:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "913:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "884:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "884:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "881:52:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "942:33:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "965:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "952:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "952:23:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "942:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "837:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "848:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "860:6:52",
                        "type": ""
                      }
                    ],
                    "src": "801:180:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1087:76:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1097:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1109:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1120:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1105:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1105:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1097:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1139:9:52"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1150:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1132:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1132:25:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1132:25:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1056:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1067:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1078:4:52",
                        "type": ""
                      }
                    ],
                    "src": "986:177:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1213:109:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1300:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1309:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1312:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1302:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1302:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1302:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1236:5:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1247:5:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1254:42:52",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1243:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1243:54:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1233:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1233:65:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1226:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1226:73:52"
                          },
                          "nodeType": "YulIf",
                          "src": "1223:93:52"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1202:5:52",
                        "type": ""
                      }
                    ],
                    "src": "1168:154:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1414:228:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1460:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1469:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1472:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1462:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1462:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1462:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1435:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1444:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1431:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1431:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1456:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1427:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1427:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "1424:52:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1485:33:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1508:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1495:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1495:23:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1485:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1527:45:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1557:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1568:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1553:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1553:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1540:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1540:32:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1531:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1606:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1581:24:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1581:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1581:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1621:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1631:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1621:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1372:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1383:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1395:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1403:6:52",
                        "type": ""
                      }
                    ],
                    "src": "1327:315:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1717:177:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1763:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1772:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1775:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1765:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1765:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1765:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1738:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1747:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1734:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1734:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1759:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1730:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1730:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "1727:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1788:36:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1814:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1801:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1801:23:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1792:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1858:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1833:24:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1833:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1833:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1873:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1883:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1873:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1683:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1694:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1706:6:52",
                        "type": ""
                      }
                    ],
                    "src": "1647:247:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2024:125:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2034:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2046:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2057:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2042:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2042:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2034:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2076:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2091:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2099:42:52",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2087:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2087:55:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2069:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2069:74:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2069:74:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IERC20Extension_$6254__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1993:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2004:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2015:4:52",
                        "type": ""
                      }
                    ],
                    "src": "1899:250:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2197:71:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2246:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2255:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2258:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2248:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2248:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2248:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2220:5:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "2231:5:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2238:4:52",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2227:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2227:16:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2217:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2217:27:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2210:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2210:35:52"
                          },
                          "nodeType": "YulIf",
                          "src": "2207:55:52"
                        }
                      ]
                    },
                    "name": "validator_revert_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2186:5:52",
                        "type": ""
                      }
                    ],
                    "src": "2154:114:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2399:350:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2445:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2454:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2457:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2447:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2447:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2447:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2420:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2429:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2416:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2416:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2441:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2412:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2412:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "2409:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2470:36:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2496:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2483:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2483:23:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2474:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2540:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "2515:24:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2515:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2515:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2555:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2565:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2555:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2579:42:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2606:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2617:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2602:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2602:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2589:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2589:32:52"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2579:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2630:47:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2662:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2673:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2658:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2658:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2645:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2645:32:52"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "2634:7:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "2709:7:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "2686:22:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2686:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2686:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2726:17:52",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "2736:7:52"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "2726:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IERC20Extension_$6254t_uint256t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2349:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2360:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2372:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2380:6:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2388:6:52",
                        "type": ""
                      }
                    ],
                    "src": "2273:476:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2855:76:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2865:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2877:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2888:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2873:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2873:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2865:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2907:9:52"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2918:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2900:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2900:25:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2900:25:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2824:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2835:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2846:4:52",
                        "type": ""
                      }
                    ],
                    "src": "2754:177:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3071:301:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3117:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3126:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3129:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3119:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3119:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3119:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3092:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3101:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3088:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3088:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3113:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3084:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3084:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "3081:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3142:36:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3168:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3155:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3155:23:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3146:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3212:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3187:24:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3187:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3187:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3227:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3237:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3227:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3251:47:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3283:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3294:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3279:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3279:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3266:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3266:32:52"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "3255:7:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "3332:7:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3307:24:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3307:33:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3307:33:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3349:17:52",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "3359:7:52"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3349:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IERC20Extension_$6254t_contract$_IERC20Extension_$6254",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3029:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3040:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3052:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3060:6:52",
                        "type": ""
                      }
                    ],
                    "src": "2936:436:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3462:177:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3508:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3517:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3520:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3510:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3510:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3510:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3483:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3492:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3479:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3479:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3504:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3475:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3475:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "3472:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3533:36:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3559:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3546:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3546:23:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "3537:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3603:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "3578:24:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3578:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3578:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3618:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3628:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3618:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IVault_$6373",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3428:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3439:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3451:6:52",
                        "type": ""
                      }
                    ],
                    "src": "3377:262:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3714:110:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3760:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3769:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3772:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3762:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3762:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3762:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3735:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3744:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3731:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3731:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3756:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3727:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3727:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "3724:52:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3785:33:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3808:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3795:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3795:23:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3785:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3680:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3691:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3703:6:52",
                        "type": ""
                      }
                    ],
                    "src": "3644:180:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3871:76:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3925:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3934:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3937:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3927:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3927:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3927:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3894:5:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "3915:5:52"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "3908:6:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3908:13:52"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "3901:6:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3901:21:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "3891:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3891:32:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3884:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3884:40:52"
                          },
                          "nodeType": "YulIf",
                          "src": "3881:60:52"
                        }
                      ]
                    },
                    "name": "validator_revert_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3860:5:52",
                        "type": ""
                      }
                    ],
                    "src": "3829:118:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4019:174:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4065:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4074:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4077:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4067:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4067:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4067:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4040:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4049:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4036:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4036:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4061:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4032:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4032:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "4029:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4090:36:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4116:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4103:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4103:23:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4094:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4157:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "4135:21:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4135:28:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4135:28:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4172:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4182:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4172:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3985:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3996:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4008:6:52",
                        "type": ""
                      }
                    ],
                    "src": "3952:241:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4285:161:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4331:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4340:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4343:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4333:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4333:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4333:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4306:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4315:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4302:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4302:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4327:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4298:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4298:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "4295:52:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4356:33:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4379:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4366:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4366:23:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4356:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4398:42:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4425:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4436:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4421:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4421:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4408:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4408:32:52"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4398:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4243:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4254:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4266:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4274:6:52",
                        "type": ""
                      }
                    ],
                    "src": "4198:248:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4552:125:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4562:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4574:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4585:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4570:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4570:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4562:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4604:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4619:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4627:42:52",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4615:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4615:55:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4597:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4597:74:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4597:74:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4521:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4532:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4543:4:52",
                        "type": ""
                      }
                    ],
                    "src": "4451:226:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4812:125:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4822:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4834:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4845:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4830:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4830:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4822:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4864:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4879:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4887:42:52",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4875:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4875:55:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4857:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4857:74:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4857:74:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_FeedRegistryInterface_$413__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4781:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4792:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4803:4:52",
                        "type": ""
                      }
                    ],
                    "src": "4682:255:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5158:636:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5205:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5214:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5217:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5207:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5207:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5207:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5179:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5188:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5175:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5175:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5200:3:52",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5171:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5171:33:52"
                          },
                          "nodeType": "YulIf",
                          "src": "5168:53:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5230:36:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5256:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5243:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5243:23:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5234:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5300:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5275:24:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5275:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5275:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5315:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5325:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5315:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5339:47:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5371:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5382:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5367:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5367:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5354:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5354:32:52"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "5343:7:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "5420:7:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5395:24:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5395:33:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5395:33:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5437:17:52",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "5447:7:52"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5437:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5463:46:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5494:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5505:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5490:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5490:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5477:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5477:32:52"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "5467:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5552:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5561:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5564:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5554:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5554:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5554:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5524:6:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5532:18:52",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5521:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5521:30:52"
                          },
                          "nodeType": "YulIf",
                          "src": "5518:50:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5577:32:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5591:9:52"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5602:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5587:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5587:22:52"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5581:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5648:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5657:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5660:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5650:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5650:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5650:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5629:7:52"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5638:2:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5625:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5625:16:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5643:3:52",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5621:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5621:26:52"
                          },
                          "nodeType": "YulIf",
                          "src": "5618:46:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5673:12:52",
                          "value": {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "5683:2:52"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "5673:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5694:42:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5721:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5732:2:52",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5717:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5717:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5704:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5704:32:52"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "5694:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5745:43:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5772:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5783:3:52",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5768:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5768:19:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5755:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5755:33:52"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "5745:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IERC20Extension_$6254t_contract$_IERC20Extension_$6254t_struct$_SwapParams_$6279_calldata_ptrt_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5092:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5103:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5115:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5123:6:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5131:6:52",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "5139:6:52",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "5147:6:52",
                        "type": ""
                      }
                    ],
                    "src": "4942:852:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5899:348:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5945:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5954:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5957:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5947:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5947:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5947:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5920:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5929:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5916:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5916:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5941:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5912:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5912:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "5909:52:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5970:33:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5993:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5980:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5980:23:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5970:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6012:45:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6042:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6053:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6038:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6038:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6025:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6025:32:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "6016:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6089:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "6066:22:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6066:29:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6066:29:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6104:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6114:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "6104:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6128:47:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6160:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6171:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6156:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6156:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6143:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6143:32:52"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "6132:7:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "6207:7:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "6184:22:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6184:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6184:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6224:17:52",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "6234:7:52"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "6224:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint8t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5849:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5860:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5872:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5880:6:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5888:6:52",
                        "type": ""
                      }
                    ],
                    "src": "5799:448:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6346:177:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6392:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6401:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6404:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6394:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6394:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6394:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6367:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6376:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6363:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6363:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6388:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6359:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6359:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "6356:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6417:36:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6443:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6430:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6430:23:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "6421:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6487:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "6462:24:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6462:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6462:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6502:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6512:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6502:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IERC20Extension_$6254",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6312:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6323:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6335:6:52",
                        "type": ""
                      }
                    ],
                    "src": "6252:271:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6656:279:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6702:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6711:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6714:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6704:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6704:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6704:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6677:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6686:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6673:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6673:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6698:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6669:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6669:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "6666:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6727:36:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6753:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6740:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6740:23:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "6731:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6797:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "6772:24:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6772:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6772:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6812:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6822:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6812:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6836:42:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6863:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6874:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6859:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6859:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6846:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6846:32:52"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "6836:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6887:42:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6914:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6925:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6910:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6910:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6897:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6897:32:52"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "6887:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IERC20Extension_$6254t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6606:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6617:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6629:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6637:6:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "6645:6:52",
                        "type": ""
                      }
                    ],
                    "src": "6528:407:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7069:119:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7079:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7091:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7102:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7087:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7087:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7079:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7121:9:52"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7132:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7114:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7114:25:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7114:25:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7159:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7170:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7155:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7155:18:52"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7175:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7148:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7148:34:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7148:34:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7030:9:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7041:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7049:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7060:4:52",
                        "type": ""
                      }
                    ],
                    "src": "6940:248:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7317:125:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7327:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7339:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7350:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7335:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7335:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7327:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7369:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7384:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7392:42:52",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7380:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7380:55:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7362:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7362:74:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7362:74:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IVault_$6373__to_t_address_payable__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7286:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7297:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7308:4:52",
                        "type": ""
                      }
                    ],
                    "src": "7193:249:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7621:237:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7638:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7649:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7631:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7631:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7631:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7672:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7683:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7668:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7668:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7688:2:52",
                                "type": "",
                                "value": "47"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7661:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7661:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7661:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7711:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7722:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7707:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7707:18:52"
                              },
                              {
                                "hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7727:34:52",
                                "type": "",
                                "value": "AccessControl: can only renounce"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7700:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7700:62:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7700:62:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7782:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7793:2:52",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7778:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7778:18:52"
                              },
                              {
                                "hexValue": "20726f6c657320666f722073656c66",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7798:17:52",
                                "type": "",
                                "value": " roles for self"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7771:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7771:45:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7771:45:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7825:27:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7837:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7848:3:52",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7833:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7833:19:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7825:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7598:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7612:4:52",
                        "type": ""
                      }
                    ],
                    "src": "7447:411:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7895:152:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7912:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7915:77:52",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7905:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7905:88:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7905:88:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8009:1:52",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8012:4:52",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8002:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8002:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8002:15:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8033:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8036:4:52",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "8026:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8026:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8026:15:52"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "7863:184:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8116:358:52",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8126:16:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8141:1:52",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "8130:7:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8151:16:52",
                          "value": {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "8160:7:52"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "8151:5:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8176:13:52",
                          "value": {
                            "name": "_base",
                            "nodeType": "YulIdentifier",
                            "src": "8184:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "base",
                              "nodeType": "YulIdentifier",
                              "src": "8176:4:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8240:228:52",
                            "statements": [
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "8285:22:52",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "8287:16:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8287:18:52"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "8287:18:52"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "8260:4:52"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "8274:1:52",
                                              "type": "",
                                              "value": "0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "8270:3:52"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8270:6:52"
                                        },
                                        {
                                          "name": "base",
                                          "nodeType": "YulIdentifier",
                                          "src": "8278:4:52"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "div",
                                        "nodeType": "YulIdentifier",
                                        "src": "8266:3:52"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8266:17:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "8257:2:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8257:27:52"
                                },
                                "nodeType": "YulIf",
                                "src": "8254:53:52"
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "8346:29:52",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "8348:25:52",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "power",
                                            "nodeType": "YulIdentifier",
                                            "src": "8361:5:52"
                                          },
                                          {
                                            "name": "base",
                                            "nodeType": "YulIdentifier",
                                            "src": "8368:4:52"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "8357:3:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8357:16:52"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "power",
                                          "nodeType": "YulIdentifier",
                                          "src": "8348:5:52"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "8327:8:52"
                                    },
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8337:7:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "8323:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8323:22:52"
                                },
                                "nodeType": "YulIf",
                                "src": "8320:55:52"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "8388:23:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "8400:4:52"
                                    },
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "8406:4:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mul",
                                    "nodeType": "YulIdentifier",
                                    "src": "8396:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8396:15:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "8388:4:52"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "8424:34:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8440:7:52"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "8449:8:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "8436:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8436:22:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "8424:8:52"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "8209:8:52"
                              },
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "8219:7:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8206:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8206:21:52"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "8228:3:52",
                            "statements": []
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "8202:3:52",
                            "statements": []
                          },
                          "src": "8198:270:52"
                        }
                      ]
                    },
                    "name": "checked_exp_helper",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "_base",
                        "nodeType": "YulTypedName",
                        "src": "8080:5:52",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "8087:8:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "8100:5:52",
                        "type": ""
                      },
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "8107:4:52",
                        "type": ""
                      }
                    ],
                    "src": "8052:422:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8538:747:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8576:52:52",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "8590:10:52",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8599:1:52",
                                  "type": "",
                                  "value": "1"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "8590:5:52"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "8613:5:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "8558:8:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "8551:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8551:16:52"
                          },
                          "nodeType": "YulIf",
                          "src": "8548:80:52"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8661:52:52",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "8675:10:52",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8684:1:52",
                                  "type": "",
                                  "value": "0"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "8675:5:52"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "8698:5:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "8647:4:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "8640:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8640:12:52"
                          },
                          "nodeType": "YulIf",
                          "src": "8637:76:52"
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "8749:52:52",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8763:10:52",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8772:1:52",
                                      "type": "",
                                      "value": "1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "8763:5:52"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "8786:5:52"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "8742:59:52",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8747:1:52",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "8817:123:52",
                                "statements": [
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "8852:22:52",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "panic_error_0x11",
                                              "nodeType": "YulIdentifier",
                                              "src": "8854:16:52"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "8854:18:52"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "8854:18:52"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "8837:8:52"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8847:3:52",
                                          "type": "",
                                          "value": "255"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nodeType": "YulIdentifier",
                                        "src": "8834:2:52"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8834:17:52"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "8831:43:52"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8887:25:52",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "8900:8:52"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8910:1:52",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "8896:3:52"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8896:16:52"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "8887:5:52"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "8925:5:52"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "8810:130:52",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8815:1:52",
                                "type": "",
                                "value": "2"
                              }
                            }
                          ],
                          "expression": {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "8729:4:52"
                          },
                          "nodeType": "YulSwitch",
                          "src": "8722:218:52"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9038:70:52",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "9052:28:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "9065:4:52"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "9071:8:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "exp",
                                    "nodeType": "YulIdentifier",
                                    "src": "9061:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9061:19:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "9052:5:52"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "9093:5:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "8962:4:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8968:2:52",
                                        "type": "",
                                        "value": "11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "8959:2:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8959:12:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "8976:8:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8986:2:52",
                                        "type": "",
                                        "value": "78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "8973:2:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8973:16:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8955:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8955:35:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "8999:4:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9005:3:52",
                                        "type": "",
                                        "value": "307"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "8996:2:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8996:13:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "9014:8:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9024:2:52",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "9011:2:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9011:16:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8992:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8992:36:52"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "8952:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8952:77:52"
                          },
                          "nodeType": "YulIf",
                          "src": "8949:159:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9117:57:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "9159:4:52"
                              },
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "9165:8:52"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_helper",
                              "nodeType": "YulIdentifier",
                              "src": "9140:18:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9140:34:52"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "9121:7:52",
                              "type": ""
                            },
                            {
                              "name": "base_1",
                              "nodeType": "YulTypedName",
                              "src": "9130:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9219:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "9221:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9221:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9221:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "9189:7:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9206:1:52",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "9202:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9202:6:52"
                                  },
                                  {
                                    "name": "base_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9210:6:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "9198:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9198:19:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9186:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9186:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "9183:58:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9250:29:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "9263:7:52"
                              },
                              {
                                "name": "base_1",
                                "nodeType": "YulIdentifier",
                                "src": "9272:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "9259:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9259:20:52"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "9250:5:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_unsigned",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "8509:4:52",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "8515:8:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "8528:5:52",
                        "type": ""
                      }
                    ],
                    "src": "8479:806:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9358:72:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9368:56:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "9398:4:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "9408:8:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9418:4:52",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9404:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9404:19:52"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_unsigned",
                              "nodeType": "YulIdentifier",
                              "src": "9377:20:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9377:47:52"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "9368:5:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_t_uint256_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "9329:4:52",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "9335:8:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "9348:5:52",
                        "type": ""
                      }
                    ],
                    "src": "9290:140:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9487:116:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9546:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "9548:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9548:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9548:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "9518:1:52"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "9511:6:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9511:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "9504:6:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9504:17:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "9526:1:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9537:1:52",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "9533:3:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9533:6:52"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "9541:1:52"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "9529:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9529:14:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "9523:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9523:21:52"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9500:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9500:45:52"
                          },
                          "nodeType": "YulIf",
                          "src": "9497:71:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9577:20:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "9592:1:52"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "9595:1:52"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "9588:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9588:9:52"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "9577:7:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "9466:1:52",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "9469:1:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "9475:7:52",
                        "type": ""
                      }
                    ],
                    "src": "9435:168:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9669:423:52",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9679:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9699:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9693:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9693:12:52"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "9683:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9721:3:52"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "9726:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9714:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9714:19:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9714:19:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9742:14:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9752:4:52",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "9746:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9765:19:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9776:3:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9781:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9772:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9772:12:52"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "9765:3:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9793:28:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9811:5:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9818:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9807:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9807:14:52"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "9797:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9830:10:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9839:1:52",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "9834:1:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9898:169:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "9919:3:52"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "srcPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "9934:6:52"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "9928:5:52"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "9928:13:52"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "9943:42:52",
                                          "type": "",
                                          "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "9924:3:52"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9924:62:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "9912:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9912:75:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9912:75:52"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "10000:19:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "10011:3:52"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "10016:2:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "10007:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10007:12:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "10000:3:52"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "10032:25:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "10046:6:52"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "10054:2:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "10042:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10042:15:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "10032:6:52"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "9860:1:52"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "9863:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "9857:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9857:13:52"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "9871:18:52",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "9873:14:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "9882:1:52"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9885:1:52",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "9878:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9878:9:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "9873:1:52"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "9853:3:52",
                            "statements": []
                          },
                          "src": "9849:218:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10076:10:52",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "10083:3:52"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "10076:3:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_array_address_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "9646:5:52",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "9653:3:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "9661:3:52",
                        "type": ""
                      }
                    ],
                    "src": "9608:484:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10276:153:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10293:9:52"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "10304:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10286:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10286:25:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10286:25:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10331:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10342:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10327:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10327:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10347:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10320:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10320:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10320:30:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10359:64:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "10396:6:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10408:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10419:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10404:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10404:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "10367:28:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10367:56:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10359:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_array$_t_address_$dyn_memory_ptr__to_t_uint256_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10237:9:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10248:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10256:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10267:4:52",
                        "type": ""
                      }
                    ],
                    "src": "10097:332:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10466:152:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10483:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10486:77:52",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10476:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10476:88:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10476:88:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10580:1:52",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10583:4:52",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10573:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10573:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10573:15:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10604:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10607:4:52",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "10597:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10597:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10597:15:52"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "10434:184:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10729:999:52",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10739:12:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10749:2:52",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10743:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10796:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10805:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10808:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10798:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10798:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10798:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10771:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10780:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10767:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10767:23:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10792:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10763:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10763:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "10760:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10821:30:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10841:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10835:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10835:16:52"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "10825:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10860:28:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10870:18:52",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "10864:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10915:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10924:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10927:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10917:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10917:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10917:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10903:6:52"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "10911:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10900:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10900:14:52"
                          },
                          "nodeType": "YulIf",
                          "src": "10897:34:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10940:32:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10954:9:52"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10965:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10950:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10950:22:52"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "10944:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11020:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11029:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11032:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11022:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11022:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11022:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "10999:2:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11003:4:52",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10995:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10995:13:52"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11010:7:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "10991:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10991:27:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "10984:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10984:35:52"
                          },
                          "nodeType": "YulIf",
                          "src": "10981:55:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11045:19:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "11061:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "11055:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11055:9:52"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "11049:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11087:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "11089:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11089:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11089:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "11079:2:52"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "11083:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11076:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11076:10:52"
                          },
                          "nodeType": "YulIf",
                          "src": "11073:36:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11118:20:52",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11132:1:52",
                                "type": "",
                                "value": "5"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "11135:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "11128:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11128:10:52"
                          },
                          "variables": [
                            {
                              "name": "_5",
                              "nodeType": "YulTypedName",
                              "src": "11122:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11147:23:52",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11167:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "11161:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11161:9:52"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "11151:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11179:56:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "11201:6:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_5",
                                        "nodeType": "YulIdentifier",
                                        "src": "11217:2:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11221:2:52",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11213:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11213:11:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11230:2:52",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "11226:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11226:7:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11209:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11209:25:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11197:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11197:38:52"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "11183:10:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11294:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "11296:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11296:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11296:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "11253:10:52"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "11265:2:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "11250:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11250:18:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "11273:10:52"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "11285:6:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "11270:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11270:22:52"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "11247:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11247:46:52"
                          },
                          "nodeType": "YulIf",
                          "src": "11244:72:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11332:2:52",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "11336:10:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11325:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11325:22:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11325:22:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11356:17:52",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "11367:6:52"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "11360:3:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "11389:6:52"
                              },
                              {
                                "name": "_4",
                                "nodeType": "YulIdentifier",
                                "src": "11397:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11382:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11382:18:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11382:18:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11409:22:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "11420:6:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11428:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11416:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11416:15:52"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "11409:3:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11440:34:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "11462:2:52"
                                  },
                                  {
                                    "name": "_5",
                                    "nodeType": "YulIdentifier",
                                    "src": "11466:2:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11458:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11458:11:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11471:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11454:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11454:20:52"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "11444:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11506:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11515:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11518:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11508:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11508:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11508:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11489:6:52"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11497:7:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11486:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11486:19:52"
                          },
                          "nodeType": "YulIf",
                          "src": "11483:39:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11531:22:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "11546:2:52"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11550:2:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11542:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11542:11:52"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "11535:3:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11618:79:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "11639:3:52"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "11650:3:52"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "11644:5:52"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11644:10:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "11632:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11632:23:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11632:23:52"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "11668:19:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "11679:3:52"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "11684:2:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "11675:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11675:12:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "11668:3:52"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "11573:3:52"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11578:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "11570:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11570:15:52"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "11586:23:52",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "11588:19:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "11599:3:52"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "11604:2:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "11595:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11595:12:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "11588:3:52"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "11566:3:52",
                            "statements": []
                          },
                          "src": "11562:135:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11706:16:52",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "11716:6:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "11706:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10695:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10706:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10718:6:52",
                        "type": ""
                      }
                    ],
                    "src": "10623:1105:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11782:79:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11792:17:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "11804:1:52"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "11807:1:52"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "11800:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11800:9:52"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "11792:4:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11833:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "11835:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11835:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11835:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "11824:4:52"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "11830:1:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11821:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11821:11:52"
                          },
                          "nodeType": "YulIf",
                          "src": "11818:37:52"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "11764:1:52",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "11767:1:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "11773:4:52",
                        "type": ""
                      }
                    ],
                    "src": "11733:128:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11898:152:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11915:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11918:77:52",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11908:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11908:88:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11908:88:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12012:1:52",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12015:4:52",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12005:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12005:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12005:15:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12036:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12039:4:52",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "12029:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12029:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12029:15:52"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "11866:184:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12229:227:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12246:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12257:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12239:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12239:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12239:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12280:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12291:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12276:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12276:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12296:2:52",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12269:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12269:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12269:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12319:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12330:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12315:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12315:18:52"
                              },
                              {
                                "hexValue": "41646472657373206973206d697373696e672066726f6d207468652077686974",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12335:34:52",
                                "type": "",
                                "value": "Address is missing from the whit"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12308:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12308:62:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12308:62:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12390:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12401:2:52",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12386:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12386:18:52"
                              },
                              {
                                "hexValue": "656c697374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12406:7:52",
                                "type": "",
                                "value": "elist"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12379:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12379:35:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12379:35:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12423:27:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12435:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12446:3:52",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12431:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12431:19:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12423:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_190efc4342d84e2f530e9c2ed40fbf35cc9090f0d8e7451e0c74b93fede7fe89__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12206:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12220:4:52",
                        "type": ""
                      }
                    ],
                    "src": "12055:401:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12635:166:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12652:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12663:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12645:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12645:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12645:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12686:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12697:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12682:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12682:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12702:2:52",
                                "type": "",
                                "value": "16"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12675:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12675:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12675:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12725:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12736:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12721:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12721:18:52"
                              },
                              {
                                "hexValue": "5061757361626c653a20706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12741:18:52",
                                "type": "",
                                "value": "Pausable: paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12714:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12714:46:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12714:46:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12769:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12781:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12792:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12777:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12777:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12769:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12612:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12626:4:52",
                        "type": ""
                      }
                    ],
                    "src": "12461:340:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12980:181:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12997:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13008:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12990:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12990:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12990:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13031:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13042:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13027:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13027:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13047:2:52",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13020:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13020:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13020:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13070:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13081:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13066:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13066:18:52"
                              },
                              {
                                "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13086:33:52",
                                "type": "",
                                "value": "ReentrancyGuard: reentrant call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13059:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13059:61:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13059:61:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13129:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13141:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13152:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13137:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13137:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13129:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12957:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12971:4:52",
                        "type": ""
                      }
                    ],
                    "src": "12806:355:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13340:178:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13357:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13368:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13350:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13350:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13350:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13391:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13402:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13387:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13387:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13407:2:52",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13380:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13380:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13380:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13430:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13441:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13426:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13426:18:52"
                              },
                              {
                                "hexValue": "5f66726f6d546f6b656e20657175616c20746f205f746f546f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13446:30:52",
                                "type": "",
                                "value": "_fromToken equal to _toToken"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13419:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13419:58:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13419:58:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13486:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13498:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13509:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13494:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13494:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13486:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_14373ae13a43c5dd6e9fd26add6a1d6b2fbb5390cabb63f758018d07dad22b36__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13317:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13331:4:52",
                        "type": ""
                      }
                    ],
                    "src": "13166:352:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13697:176:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13714:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13725:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13707:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13707:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13707:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13748:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13759:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13744:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13744:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13764:2:52",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13737:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13737:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13737:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13787:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13798:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13783:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13783:18:52"
                              },
                              {
                                "hexValue": "4e6f7420656e6f75676820746f6b656e732072657475726e6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13803:28:52",
                                "type": "",
                                "value": "Not enough tokens returned"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13776:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13776:56:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13776:56:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13841:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13853:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13864:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13849:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13849:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13841:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_4ef7e73b278ed89ca1c08190d910535c7f6427e9a2f00b2eb691dd84cab465a7__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13674:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13688:4:52",
                        "type": ""
                      }
                    ],
                    "src": "13523:350:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14007:168:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14017:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14029:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14040:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14025:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14025:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14017:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14059:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "14074:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14082:42:52",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14070:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14070:55:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14052:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14052:74:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14052:74:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14146:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14157:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14142:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14142:18:52"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "14162:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14135:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14135:34:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14135:34:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13968:9:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "13979:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13987:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13998:4:52",
                        "type": ""
                      }
                    ],
                    "src": "13878:297:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14258:167:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14304:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14313:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14316:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14306:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14306:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14306:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14279:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14288:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14275:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14275:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14300:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "14271:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14271:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "14268:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14329:29:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14348:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "14342:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14342:16:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "14333:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14389:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "14367:21:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14367:28:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14367:28:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14404:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "14414:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "14404:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14224:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "14235:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14247:6:52",
                        "type": ""
                      }
                    ],
                    "src": "14180:245:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14587:162:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14597:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14609:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14620:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14605:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14605:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14597:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14639:9:52"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "14650:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14632:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14632:25:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14632:25:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14677:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14688:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14673:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14673:18:52"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "14693:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14666:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14666:34:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14666:34:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14720:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14731:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14716:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14716:18:52"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "14736:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14709:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14709:34:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14709:34:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14540:9:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "14551:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "14559:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14567:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14578:4:52",
                        "type": ""
                      }
                    ],
                    "src": "14430:319:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14801:104:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14811:39:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "14827:1:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14830:4:52",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14823:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14823:12:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "14841:1:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14844:4:52",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14837:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14837:12:52"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "14819:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14819:31:52"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "14811:4:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14877:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "14879:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14879:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14879:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "14865:4:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14871:4:52",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14862:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14862:14:52"
                          },
                          "nodeType": "YulIf",
                          "src": "14859:40:52"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "14783:1:52",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "14786:1:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "14792:4:52",
                        "type": ""
                      }
                    ],
                    "src": "14754:151:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14980:61:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14990:45:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "15020:4:52"
                              },
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "15026:8:52"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_unsigned",
                              "nodeType": "YulIdentifier",
                              "src": "14999:20:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14999:36:52"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "14990:5:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_t_uint256_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "14951:4:52",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "14957:8:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "14970:5:52",
                        "type": ""
                      }
                    ],
                    "src": "14910:131:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15078:152:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15095:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15098:77:52",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15088:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15088:88:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15088:88:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15192:1:52",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15195:4:52",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15185:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15185:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15185:15:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15216:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15219:4:52",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "15209:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15209:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15209:15:52"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "15046:184:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15281:228:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15312:168:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15333:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15336:77:52",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "15326:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15326:88:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15326:88:52"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15434:1:52",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15437:4:52",
                                      "type": "",
                                      "value": "0x12"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "15427:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15427:15:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15427:15:52"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15462:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15465:4:52",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15455:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15455:15:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15455:15:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15301:1:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "15294:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15294:9:52"
                          },
                          "nodeType": "YulIf",
                          "src": "15291:189:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15489:14:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "15498:1:52"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "15501:1:52"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "15494:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15494:9:52"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "15489:1:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "15266:1:52",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "15269:1:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "15275:1:52",
                        "type": ""
                      }
                    ],
                    "src": "15235:274:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15688:163:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15705:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15716:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15698:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15698:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15698:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15739:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15750:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15735:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15735:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15755:2:52",
                                "type": "",
                                "value": "13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15728:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15728:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15728:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15778:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15789:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15774:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15774:18:52"
                              },
                              {
                                "hexValue": "4e6f205261746520466f756e64",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15794:15:52",
                                "type": "",
                                "value": "No Rate Found"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15767:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15767:43:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15767:43:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15819:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15831:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15842:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15827:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15827:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15819:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fefbae264c85f90387b25bba1f4ca30cd84bc058ac45c5aead12f4cd9153378b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15665:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15679:4:52",
                        "type": ""
                      }
                    ],
                    "src": "15514:337:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16030:231:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16047:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16058:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16040:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16040:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16040:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16081:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16092:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16077:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16077:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16097:2:52",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16070:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16070:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16070:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16120:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16131:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16116:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16116:18:52"
                              },
                              {
                                "hexValue": "43616e27742061646420746865203078206164647265737320746f2074686520",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16136:34:52",
                                "type": "",
                                "value": "Can't add the 0x address to the "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16109:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16109:62:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16109:62:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16191:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16202:2:52",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16187:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16187:18:52"
                              },
                              {
                                "hexValue": "77686974656c697374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16207:11:52",
                                "type": "",
                                "value": "whitelist"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16180:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16180:39:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16180:39:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16228:27:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16240:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16251:3:52",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16236:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16236:19:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16228:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b73316ddd64e6d8bca955d3c8bae26782bd68489ff344116d675cc018f35f092__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16007:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16021:4:52",
                        "type": ""
                      }
                    ],
                    "src": "15856:405:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16440:235:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16457:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16468:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16450:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16450:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16450:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16491:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16502:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16487:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16487:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16507:2:52",
                                "type": "",
                                "value": "45"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16480:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16480:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16480:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16530:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16541:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16526:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16526:18:52"
                              },
                              {
                                "hexValue": "4e6f74207377617070696e6720656e6f75676820746f207265636f7665722074",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16546:34:52",
                                "type": "",
                                "value": "Not swapping enough to recover t"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16519:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16519:62:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16519:62:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16601:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16612:2:52",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16597:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16597:18:52"
                              },
                              {
                                "hexValue": "68652067617320726566756e64",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16617:15:52",
                                "type": "",
                                "value": "he gas refund"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16590:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16590:43:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16590:43:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16642:27:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16654:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16665:3:52",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16650:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16650:19:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16642:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_aa488853b340104988e04385b57dae970eec1ad64141f784ad069c00b8fbafa2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16417:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16431:4:52",
                        "type": ""
                      }
                    ],
                    "src": "16266:409:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16728:77:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16738:16:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16749:1:52"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "16752:1:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16745:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16745:9:52"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "16738:3:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16777:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "16779:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16779:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16779:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "16769:1:52"
                              },
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "16772:3:52"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "16766:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16766:10:52"
                          },
                          "nodeType": "YulIf",
                          "src": "16763:36:52"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "16711:1:52",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "16714:1:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "16720:3:52",
                        "type": ""
                      }
                    ],
                    "src": "16680:125:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16984:169:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17001:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17012:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16994:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16994:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16994:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17035:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17046:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17031:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17031:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17051:2:52",
                                "type": "",
                                "value": "19"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17024:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17024:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17024:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17074:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17085:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17070:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17070:18:52"
                              },
                              {
                                "hexValue": "4e6f7468696e6720746f207769746864726177",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17090:21:52",
                                "type": "",
                                "value": "Nothing to withdraw"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17063:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17063:49:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17063:49:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17121:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17133:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17144:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17129:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17129:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17121:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1b19ac089d87f4146c293e731799080c98f8ee751187f94356e96cb0c086a394__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16961:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16975:4:52",
                        "type": ""
                      }
                    ],
                    "src": "16810:343:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17239:103:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17285:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17294:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17297:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17287:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17287:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17287:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "17260:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17269:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "17256:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17256:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17281:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "17252:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17252:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "17249:52:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17310:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17326:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "17320:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17320:16:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "17310:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17205:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "17216:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17228:6:52",
                        "type": ""
                      }
                    ],
                    "src": "17158:184:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17413:184:52",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17423:10:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17432:1:52",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "17427:1:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17492:63:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "17517:3:52"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "17522:1:52"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "17513:3:52"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "17513:11:52"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "17536:3:52"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "17541:1:52"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "17532:3:52"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "17532:11:52"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "17526:5:52"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "17526:18:52"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "17506:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17506:39:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17506:39:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "17453:1:52"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "17456:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "17450:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17450:13:52"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "17464:19:52",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "17466:15:52",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "17475:1:52"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17478:2:52",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "17471:3:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17471:10:52"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "17466:1:52"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "17446:3:52",
                            "statements": []
                          },
                          "src": "17442:113:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "17575:3:52"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "17580:6:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17571:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17571:16:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17589:1:52",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17564:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17564:27:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17564:27:52"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "17391:3:52",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "17396:3:52",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "17401:6:52",
                        "type": ""
                      }
                    ],
                    "src": "17347:250:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17991:423:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18008:3:52"
                              },
                              {
                                "hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18013:25:52",
                                "type": "",
                                "value": "AccessControl: account "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18001:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18001:38:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18001:38:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18048:27:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18068:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "18062:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18062:13:52"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "18052:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "18123:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18131:4:52",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18119:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18119:17:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "18142:3:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18147:2:52",
                                    "type": "",
                                    "value": "23"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18138:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18138:12:52"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "18152:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "18084:34:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18084:75:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18084:75:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18168:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "18182:3:52"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "18187:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18178:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18178:16:52"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "18172:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18214:2:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18218:2:52",
                                    "type": "",
                                    "value": "23"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18210:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18210:11:52"
                              },
                              {
                                "hexValue": "206973206d697373696e6720726f6c6520",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18223:19:52",
                                "type": "",
                                "value": " is missing role "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18203:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18203:40:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18203:40:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18252:29:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "18274:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "18268:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18268:13:52"
                          },
                          "variables": [
                            {
                              "name": "length_1",
                              "nodeType": "YulTypedName",
                              "src": "18256:8:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18329:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18337:4:52",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18325:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18325:17:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18348:2:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18352:2:52",
                                    "type": "",
                                    "value": "40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18344:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18344:11:52"
                              },
                              {
                                "name": "length_1",
                                "nodeType": "YulIdentifier",
                                "src": "18357:8:52"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "18290:34:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18290:76:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18290:76:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18375:33:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18390:2:52"
                                  },
                                  {
                                    "name": "length_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18394:8:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18386:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18386:17:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18405:2:52",
                                "type": "",
                                "value": "40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18382:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18382:26:52"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "18375:3:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "17959:3:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "17964:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17972:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "17983:3:52",
                        "type": ""
                      }
                    ],
                    "src": "17602:812:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18540:275:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18557:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18568:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18550:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18550:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18550:21:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18580:27:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18600:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "18594:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18594:13:52"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "18584:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18627:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18638:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18623:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18623:18:52"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "18643:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18616:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18616:34:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18616:34:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "18698:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18706:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18694:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18694:15:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18715:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18726:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18711:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18711:18:52"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "18731:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "18659:34:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18659:79:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18659:79:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18747:62:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18763:9:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "18782:6:52"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "18790:2:52",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "18778:3:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "18778:15:52"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "18799:2:52",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "18795:3:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "18795:7:52"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "18774:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18774:29:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18759:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18759:45:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18806:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18755:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18755:54:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18747:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18509:9:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18520:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18531:4:52",
                        "type": ""
                      }
                    ],
                    "src": "18419:396:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18899:168:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18945:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18954:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18957:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18947:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18947:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18947:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "18920:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18929:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "18916:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18916:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18941:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "18912:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18912:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "18909:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18970:29:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18989:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "18983:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18983:16:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "18974:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "19031:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "19008:22:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19008:29:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19008:29:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19046:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "19056:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "19046:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint8_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18865:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "18876:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18888:6:52",
                        "type": ""
                      }
                    ],
                    "src": "18820:247:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19201:198:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19211:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19223:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19234:2:52",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19219:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19219:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19211:4:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19246:52:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19256:42:52",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "19250:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19314:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "19329:6:52"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19337:2:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19325:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19325:15:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19307:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19307:34:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19307:34:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19361:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19372:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19357:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19357:18:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19381:6:52"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19389:2:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19377:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19377:15:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19350:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19350:43:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19350:43:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19162:9:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "19173:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19181:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19192:4:52",
                        "type": ""
                      }
                    ],
                    "src": "19072:327:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19485:170:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19531:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19540:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19543:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "19533:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19533:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19533:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "19506:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19515:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "19502:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19502:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19527:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "19498:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19498:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "19495:52:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19556:29:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19575:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19569:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19569:16:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "19560:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "19619:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "19594:24:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19594:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19594:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19634:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "19644:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "19634:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19451:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "19462:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19474:6:52",
                        "type": ""
                      }
                    ],
                    "src": "19404:251:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19720:128:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19730:22:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "19745:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19739:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19739:13:52"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "19730:5:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19826:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19835:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19838:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "19828:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19828:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19828:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "19774:5:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "19785:5:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19792:30:52",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "19781:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19781:42:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "19771:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19771:53:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "19764:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19764:61:52"
                          },
                          "nodeType": "YulIf",
                          "src": "19761:81:52"
                        }
                      ]
                    },
                    "name": "abi_decode_uint112_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "19699:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "19710:5:52",
                        "type": ""
                      }
                    ],
                    "src": "19660:188:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19967:336:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20013:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20022:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20025:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "20015:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20015:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20015:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "19988:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19997:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "19984:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19984:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20009:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "19980:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19980:32:52"
                          },
                          "nodeType": "YulIf",
                          "src": "19977:52:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20038:50:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20078:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint112_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "20048:29:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20048:40:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "20038:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20097:59:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20141:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20152:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20137:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20137:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint112_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "20107:29:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20107:49:52"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "20097:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20165:38:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20188:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20199:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20184:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20184:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20178:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20178:25:52"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "20169:5:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20257:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20266:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20269:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "20259:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20259:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20259:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "20225:5:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "20236:5:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20243:10:52",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "20232:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20232:22:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "20222:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20222:33:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "20215:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20215:41:52"
                          },
                          "nodeType": "YulIf",
                          "src": "20212:61:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20282:15:52",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "20292:5:52"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "20282:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19917:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "19928:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19940:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "19948:6:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "19956:6:52",
                        "type": ""
                      }
                    ],
                    "src": "19853:450:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20367:120:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20377:22:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "20392:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20386:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20386:13:52"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "20377:5:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20465:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20474:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20477:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "20467:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20467:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20467:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "20421:5:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "20432:5:52"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20439:22:52",
                                        "type": "",
                                        "value": "0xffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "20428:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20428:34:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "20418:2:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20418:45:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "20411:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20411:53:52"
                          },
                          "nodeType": "YulIf",
                          "src": "20408:73:52"
                        }
                      ]
                    },
                    "name": "abi_decode_uint80_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "20346:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "20357:5:52",
                        "type": ""
                      }
                    ],
                    "src": "20308:179:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20638:327:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20685:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20694:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20697:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "20687:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20687:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20687:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "20659:7:52"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20668:9:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "20655:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20655:23:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20680:3:52",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "20651:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20651:33:52"
                          },
                          "nodeType": "YulIf",
                          "src": "20648:53:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20710:49:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20749:9:52"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint80_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "20720:28:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20720:39:52"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "20710:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20768:35:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20788:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20799:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20784:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20784:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20778:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20778:25:52"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "20768:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20812:35:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20832:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20843:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20828:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20828:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20822:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20822:25:52"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "20812:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20856:35:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20876:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20887:2:52",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20872:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20872:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20866:5:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20866:25:52"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "20856:6:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20900:59:52",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20943:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20954:3:52",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20939:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20939:19:52"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint80_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "20910:28:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20910:49:52"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "20900:6:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20572:9:52",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "20583:7:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20595:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20603:6:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "20611:6:52",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "20619:6:52",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "20627:6:52",
                        "type": ""
                      }
                    ],
                    "src": "20492:473:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21144:170:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21161:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21172:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21154:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21154:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21154:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21195:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21206:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21191:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21191:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21211:2:52",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21184:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21184:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21184:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21234:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21245:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21230:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21230:18:52"
                              },
                              {
                                "hexValue": "5061757361626c653a206e6f7420706175736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21250:22:52",
                                "type": "",
                                "value": "Pausable: not paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21223:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21223:50:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21223:50:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21282:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21294:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21305:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21290:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21290:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21282:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21121:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21135:4:52",
                        "type": ""
                      }
                    ],
                    "src": "20970:344:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21493:165:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21510:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21521:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21503:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21503:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21503:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21544:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21555:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21540:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21540:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21560:2:52",
                                "type": "",
                                "value": "15"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21533:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21533:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21533:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21583:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21594:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21579:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21579:18:52"
                              },
                              {
                                "hexValue": "4e6f742077686974656c6973746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21599:17:52",
                                "type": "",
                                "value": "Not whitelisted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21572:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21572:45:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21572:45:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21626:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21638:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21649:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21634:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21634:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21626:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_72830cd2e69a452b3989df2d6c124f1de4827fe8ed6c5116814e4b49c3fcbdd0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21470:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21484:4:52",
                        "type": ""
                      }
                    ],
                    "src": "21319:339:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21837:173:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21854:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21865:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21847:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21847:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21847:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21888:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21899:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21884:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21884:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21904:2:52",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21877:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21877:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21877:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21927:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21938:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21923:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21923:18:52"
                              },
                              {
                                "hexValue": "4e6f7420656e6f756768204554482070726f7669646564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21943:25:52",
                                "type": "",
                                "value": "Not enough ETH provided"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21916:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21916:53:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21916:53:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21978:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21990:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22001:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21986:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21986:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21978:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_882bd51cdea287dc64cd17d87d6bc24885d0ed00ec941ca79d46e03eef53ef5f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21814:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21828:4:52",
                        "type": ""
                      }
                    ],
                    "src": "21663:347:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22172:241:52",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22182:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22194:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22205:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22190:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22190:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22182:4:52"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22217:52:52",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "22227:42:52",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "22221:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22285:9:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "22300:6:52"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22308:2:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22296:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22296:15:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22278:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22278:34:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22278:34:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22332:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22343:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22328:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22328:18:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22352:6:52"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22360:2:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22348:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22348:15:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22321:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22321:43:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22321:43:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22384:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22395:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22380:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22380:18:52"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "22400:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22373:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22373:34:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22373:34:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22125:9:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "22136:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22144:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22152:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22163:4:52",
                        "type": ""
                      }
                    ],
                    "src": "22015:398:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22512:427:52",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22522:51:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr_to_tail",
                                "nodeType": "YulIdentifier",
                                "src": "22561:11:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "22548:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22548:25:52"
                          },
                          "variables": [
                            {
                              "name": "rel_offset_of_tail",
                              "nodeType": "YulTypedName",
                              "src": "22526:18:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22662:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22671:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22674:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "22664:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22664:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22664:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "rel_offset_of_tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "22596:18:52"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "calldatasize",
                                              "nodeType": "YulIdentifier",
                                              "src": "22624:12:52"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "22624:14:52"
                                          },
                                          {
                                            "name": "base_ref",
                                            "nodeType": "YulIdentifier",
                                            "src": "22640:8:52"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "22620:3:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "22620:29:52"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "22655:2:52",
                                            "type": "",
                                            "value": "30"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "22651:3:52"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "22651:7:52"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "22616:3:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "22616:43:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "22592:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22592:68:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "22585:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22585:76:52"
                          },
                          "nodeType": "YulIf",
                          "src": "22582:96:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22687:47:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "base_ref",
                                "nodeType": "YulIdentifier",
                                "src": "22705:8:52"
                              },
                              {
                                "name": "rel_offset_of_tail",
                                "nodeType": "YulIdentifier",
                                "src": "22715:18:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22701:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22701:33:52"
                          },
                          "variables": [
                            {
                              "name": "addr_1",
                              "nodeType": "YulTypedName",
                              "src": "22691:6:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22743:30:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "addr_1",
                                "nodeType": "YulIdentifier",
                                "src": "22766:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "22753:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22753:20:52"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "22743:6:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22816:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22825:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22828:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "22818:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22818:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22818:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "22788:6:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22796:18:52",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "22785:2:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22785:30:52"
                          },
                          "nodeType": "YulIf",
                          "src": "22782:50:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22841:25:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "addr_1",
                                "nodeType": "YulIdentifier",
                                "src": "22853:6:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22861:4:52",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22849:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22849:17:52"
                          },
                          "variableNames": [
                            {
                              "name": "addr",
                              "nodeType": "YulIdentifier",
                              "src": "22841:4:52"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22917:16:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22926:1:52",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "22929:1:52",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "22919:6:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22919:12:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22919:12:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "addr",
                                "nodeType": "YulIdentifier",
                                "src": "22882:4:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "calldatasize",
                                      "nodeType": "YulIdentifier",
                                      "src": "22892:12:52"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "22892:14:52"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "22908:6:52"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22888:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22888:27:52"
                              }
                            ],
                            "functionName": {
                              "name": "sgt",
                              "nodeType": "YulIdentifier",
                              "src": "22878:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22878:38:52"
                          },
                          "nodeType": "YulIf",
                          "src": "22875:58:52"
                        }
                      ]
                    },
                    "name": "access_calldata_tail_t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base_ref",
                        "nodeType": "YulTypedName",
                        "src": "22469:8:52",
                        "type": ""
                      },
                      {
                        "name": "ptr_to_tail",
                        "nodeType": "YulTypedName",
                        "src": "22479:11:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "addr",
                        "nodeType": "YulTypedName",
                        "src": "22495:4:52",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "22501:6:52",
                        "type": ""
                      }
                    ],
                    "src": "22418:521:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23091:124:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "23114:3:52"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "23119:6:52"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "23127:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "23101:12:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23101:33:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23101:33:52"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23143:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "23157:3:52"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "23162:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23153:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23153:16:52"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "23147:2:52",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "23185:2:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23189:1:52",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23178:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23178:13:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23178:13:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23200:9:52",
                          "value": {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "23207:2:52"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "23200:3:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "23059:3:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "23064:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "23072:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "23083:3:52",
                        "type": ""
                      }
                    ],
                    "src": "22944:271:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23394:169:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23411:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23422:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23404:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23404:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23404:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23445:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23456:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23441:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23441:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23461:2:52",
                                "type": "",
                                "value": "19"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23434:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23434:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23434:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23484:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23495:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23480:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23480:18:52"
                              },
                              {
                                "hexValue": "50726f786965642053776170204661696c6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "23500:21:52",
                                "type": "",
                                "value": "Proxied Swap Failed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23473:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23473:49:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23473:49:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23531:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23543:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23554:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23539:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23539:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23531:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_4d7037a1e13d147b9b07b9401ec2f598c18fd4440c46d57f2266abc6f0c455a5__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23371:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23385:4:52",
                        "type": ""
                      }
                    ],
                    "src": "23220:343:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23831:334:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23848:9:52"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "23859:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23841:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23841:25:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23841:25:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23886:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23897:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23882:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23882:18:52"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "23902:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23875:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23875:34:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23875:34:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23929:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23940:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23925:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23925:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23945:3:52",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23918:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23918:31:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23918:31:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23958:65:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "23995:6:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24007:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24018:3:52",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24003:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24003:19:52"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "23966:28:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23966:57:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23958:4:52"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24043:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24054:2:52",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24039:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24039:18:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "24063:6:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24071:42:52",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "24059:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24059:55:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24032:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24032:83:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24032:83:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24135:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24146:3:52",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24131:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24131:19:52"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "24152:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24124:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24124:35:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24124:35:52"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__to_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23768:9:52",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "23779:6:52",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "23787:6:52",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "23795:6:52",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "23803:6:52",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "23811:6:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23822:4:52",
                        "type": ""
                      }
                    ],
                    "src": "23568:597:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24217:89:52",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "24244:22:52",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "24246:16:52"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "24246:18:52"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "24246:18:52"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "24237:5:52"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "24230:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24230:13:52"
                          },
                          "nodeType": "YulIf",
                          "src": "24227:39:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24275:25:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "24286:5:52"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24297:1:52",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "24293:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24293:6:52"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24282:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24282:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "24275:3:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "decrement_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "24199:5:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "24209:3:52",
                        "type": ""
                      }
                    ],
                    "src": "24170:136:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24485:182:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24502:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24513:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24495:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24495:21:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24495:21:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24536:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24547:2:52",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24532:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24532:18:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24552:2:52",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24525:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24525:30:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24525:30:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24575:9:52"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24586:2:52",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24571:3:52"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24571:18:52"
                              },
                              {
                                "hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24591:34:52",
                                "type": "",
                                "value": "Strings: hex length insufficient"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24564:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24564:62:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24564:62:52"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24635:26:52",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24647:9:52"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24658:2:52",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24643:3:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24643:18:52"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24635:4:52"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24462:9:52",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24476:4:52",
                        "type": ""
                      }
                    ],
                    "src": "24311:356:52"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24704:152:52",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24721:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24724:77:52",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24714:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24714:88:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24714:88:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24818:1:52",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24821:4:52",
                                "type": "",
                                "value": "0x31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24811:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24811:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24811:15:52"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24842:1:52",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24845:4:52",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "24835:6:52"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24835:15:52"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24835:15:52"
                        }
                      ]
                    },
                    "name": "panic_error_0x31",
                    "nodeType": "YulFunctionDefinition",
                    "src": "24672:184:52"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IUniswapV2Router02_$3329__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_IERC20Extension_$6254__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_uint8(value)\n    {\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20Extension_$6254t_uint256t_uint8(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_uint8(value_1)\n        value2 := value_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_contract$_IERC20Extension_$6254t_contract$_IERC20Extension_$6254(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_contract$_IVault_$6373(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_FeedRegistryInterface_$413__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_contract$_IERC20Extension_$6254t_contract$_IERC20Extension_$6254t_struct$_SwapParams_$6279_calldata_ptrt_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 128) { revert(0, 0) }\n        value2 := _1\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_uint256t_uint8t_uint8(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_uint8(value)\n        value1 := value\n        let value_1 := calldataload(add(headStart, 64))\n        validator_revert_uint8(value_1)\n        value2 := value_1\n    }\n    function abi_decode_tuple_t_contract$_IERC20Extension_$6254(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC20Extension_$6254t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_contract$_IVault_$6373__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_array_address_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_tuple_t_uint256_t_array$_t_address_$dyn_memory_ptr__to_t_uint256_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_array_address_dyn(value1, add(headStart, 64))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_190efc4342d84e2f530e9c2ed40fbf35cc9090f0d8e7451e0c74b93fede7fe89__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"Address is missing from the whit\")\n        mstore(add(headStart, 96), \"elist\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_14373ae13a43c5dd6e9fd26add6a1d6b2fbb5390cabb63f758018d07dad22b36__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"_fromToken equal to _toToken\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4ef7e73b278ed89ca1c08190d910535c7f6427e9a2f00b2eb691dd84cab465a7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Not enough tokens returned\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_sub_t_uint8(x, y) -> diff\n    {\n        diff := sub(and(x, 0xff), and(y, 0xff))\n        if gt(diff, 0xff) { panic_error_0x11() }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_fefbae264c85f90387b25bba1f4ca30cd84bc058ac45c5aead12f4cd9153378b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"No Rate Found\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b73316ddd64e6d8bca955d3c8bae26782bd68489ff344116d675cc018f35f092__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"Can't add the 0x address to the \")\n        mstore(add(headStart, 96), \"whitelist\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_aa488853b340104988e04385b57dae970eec1ad64141f784ad069c00b8fbafa2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"Not swapping enough to recover t\")\n        mstore(add(headStart, 96), \"he gas refund\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_1b19ac089d87f4146c293e731799080c98f8ee751187f94356e96cb0c086a394__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Nothing to withdraw\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_uint8(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_uint112_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint112t_uint112t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_uint112_fromMemory(headStart)\n        value1 := abi_decode_uint112_fromMemory(add(headStart, 32))\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n        value2 := value\n    }\n    function abi_decode_uint80_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint80t_int256t_uint256t_uint256t_uint80_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_uint80_fromMemory(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        value4 := abi_decode_uint80_fromMemory(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_72830cd2e69a452b3989df2d6c124f1de4827fe8ed6c5116814e4b49c3fcbdd0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Not whitelisted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_882bd51cdea287dc64cd17d87d6bc24885d0ed00ec941ca79d46e03eef53ef5f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Not enough ETH provided\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_stringliteral_4d7037a1e13d147b9b07b9401ec2f598c18fd4440c46d57f2266abc6f0c455a5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Proxied Swap Failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__to_t_uint256_t_uint256_t_array$_t_address_$dyn_memory_ptr_t_address_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 160)\n        tail := abi_encode_array_address_dyn(value2, add(headStart, 160))\n        mstore(add(headStart, 96), and(value3, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 128), value4)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n}",
              "id": 52,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "6080604052600436106101dc5760003560e01c80639010d07c11610102578063baaa61be11610095578063ea9119a511610064578063ea9119a5146105c8578063ead8ece814610605578063f4f3b2001461063a578063fbfa77cf1461065a57600080fd5b8063baaa61be14610548578063ca15c87314610568578063d547741f14610588578063e43252d7146105a857600080fd5b8063a001ecdd116100d1578063a001ecdd146104d5578063a217fddf146104eb578063a702f2c014610500578063ad5c46481461052057600080fd5b80639010d07c1461043657806390238c391461045657806391d148541461047e5780639ca519c6146104c257600080fd5b80634021a8671161017a5780636817031b116101495780636817031b146103b657806369fe0e2d146103d6578063882796f1146103f65780638ab1d6811461041657600080fd5b80634021a8671461033e5780634c7125941461035e5780635285301c1461037e5780635c975abb1461039e57600080fd5b80632f2ff15d116101b65780632f2ff15d1461029b57806336568abe146102bd5780633af32abf146102dd5780633cc562b21461031657600080fd5b806301ffc9a7146101e85780631694505e1461021d578063248a9ca31461025d57600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b50610208610203366004612a03565b61067a565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610245737a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b039091168152602001610214565b34801561026957600080fd5b5061028d610278366004612a2d565b60009081526020819052604090206001015490565b604051908152602001610214565b3480156102a757600080fd5b506102bb6102b6366004612a5e565b6106be565b005b3480156102c957600080fd5b506102bb6102d8366004612a5e565b6106e9565b3480156102e957600080fd5b506102086102f8366004612a8e565b6001600160a01b031660009081526006602052604090205460ff1690565b34801561032257600080fd5b5061024573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561034a57600080fd5b5061028d610359366004612aba565b61077a565b34801561036a57600080fd5b5061028d610379366004612afc565b61079e565b34801561038a57600080fd5b5061028d610399366004612afc565b610936565b3480156103aa57600080fd5b5060025460ff16610208565b3480156103c257600080fd5b506102bb6103d1366004612a8e565b610ab8565b3480156103e257600080fd5b506102bb6103f1366004612a2d565b610b34565b34801561040257600080fd5b506102bb610411366004612b38565b610b77565b34801561042257600080fd5b506102bb610431366004612a8e565b610b99565b34801561044257600080fd5b50610245610451366004612b55565b610c7d565b34801561046257600080fd5b506102457347fb2585d2c56fe188d0e6ec628a38b74fceeedf81565b34801561048a57600080fd5b50610208610499366004612a5e565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6102bb6104d0366004612b77565b610c95565b3480156104e157600080fd5b5061028d60055481565b3480156104f757600080fd5b5061028d600081565b34801561050c57600080fd5b5061028d61051b366004612bf0565b611093565b34801561052c57600080fd5b5061024573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b34801561055457600080fd5b5061028d610563366004612afc565b611104565b34801561057457600080fd5b5061028d610583366004612a2d565b61122f565b34801561059457600080fd5b506102bb6105a3366004612a5e565b611246565b3480156105b457600080fd5b506102bb6105c3366004612a8e565b61126c565b3480156105d457600080fd5b506102086105e3366004612a8e565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b34801561061157600080fd5b50610625610620366004612c27565b611341565b60408051928352602083019190915201610214565b34801561064657600080fd5b506102bb610655366004612a8e565b611488565b34801561066657600080fd5b50600454610245906001600160a01b031681565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806106b857506106b882611735565b92915050565b6000828152602081905260409020600101546106da813361179c565b6106e4838361181a565b505050565b6001600160a01b038116331461076c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b610776828261183c565b5050565b6000806107868561185e565b9050610793848483611093565b9150505b9392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038416016107dd5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc292505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161081a5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291505b600061082684846118ef565b9050805160000361083b5760009150506106b8565b60006108468561185e565b9050600061085582600a612d56565b610860906001612d65565b6040517fd06ca61f000000000000000000000000000000000000000000000000000000008152909150737a250d5630b4cf539739df2c5dacb4c659f2488d9063d06ca61f906108b59084908790600401612dc8565b600060405180830381865afa9250505080156108f357506040513d6000823e601f3d908101601f191682016040526108f09190810190612dff565b60015b61090357600093505050506106b8565b80600185516109129190612ebd565b8151811061092257610922612ed0565b602002602001015194505050505092915050565b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc1196001600160a01b038416016109755773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee92505b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc1196001600160a01b038316016109b25773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee91505b60006109be8484611bd4565b905080156109da576109d28382601261077a565b9150506106b8565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480610a2157506001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610a305760009150506106b8565b6000610a508573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee611bd4565b90506000610a7273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee86611bd4565b90508115801590610a8257508015155b15610aac576000610a938383611cec565b9050610aa18682601261077a565b9450505050506106b8565b50600095945050505050565b6000610ac4813361179c565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915560405190815233907f8800deb8c31293b539eaf5391fcc88280dc58f015c043d65dd5b72a0979a1dd1906020015b60405180910390a25050565b6000610b40813361179c565b600582905560405182815233907f01fe2943baee27f47add82886c2200f910c749c461c9b63c5fe83901a53bdb4990602001610b28565b6000610b83813361179c565b8115610b9157610776611cf8565b610776611d9d565b6000610ba5813361179c565b6001600160a01b03821660009081526006602052604090205460ff16610c335760405162461bcd60e51b815260206004820152602560248201527f41646472657373206973206d697373696e672066726f6d20746865207768697460448201527f656c6973740000000000000000000000000000000000000000000000000000006064820152608401610763565b6001600160a01b038216600081815260066020526040808220805460ff19169055517fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df7579190a25050565b60008281526001602052604081206107979083611e20565b60025460ff1615610ce85760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610763565b600260035403610d3a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b60026003556001600160a01b0380851690861603610d9a5760405162461bcd60e51b815260206004820152601c60248201527f5f66726f6d546f6b656e20657175616c20746f205f746f546f6b656e000000006044820152606401610763565b6000610da886868685611e2c565b90506000610db7868386611341565b50905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03871603610e6c57610de88183612ebd565b9150828211610e395760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b604051339083156108fc029084906000818181858888f19350505050158015610e66573d6000803e3d6000fd5b50610f97565b60008115610eb857610e9387737a250d5630b4cf539739df2c5dacb4c659f2488d85612103565b610eb4737a250d5630b4cf539739df2c5dacb4c659f2488d8884863061220d565b5090505b610ec28184612ebd565b9250838311610f135760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b6001600160a01b03871663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f949190612ee6565b50505b8015611011576004546001600160a01b031663180e222d82336040516001600160e01b031960e085901b1681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b50505050505b6001600160a01b038087169088167f2fe279dbe9d225a9d3c707f70e43c44034ee8ebbe8a65ceefc7fe927a55a67de73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8214611065578760400135611067565b345b6040805191825260208201879052810185905260600160405180910390a3505060016003555050505050565b60008160ff168360ff1610156110cc576110ad8383612f03565b6110bb9060ff16600a612f1c565b6110c59085612d65565b9050610797565b8160ff168360ff1611156110fc576110e48284612f03565b6110f29060ff16600a612f1c565b6110c59085612f3e565b509192915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038416148061114d57506001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b801561119b575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038316148061119b57506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b156111af5750670de0b6b3a76400006106b8565b60006111bb8484610936565b905080156111ca5790506106b8565b60006111d6858561079e565b905080156111e75791506106b89050565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f205261746520466f756e64000000000000000000000000000000000000006044820152606401610763565b60008181526001602052604081206106b89061237d565b600082815260208190526040902060010154611262813361179c565b6106e4838361183c565b6000611278813361179c565b6001600160a01b0382166112f45760405162461bcd60e51b815260206004820152602960248201527f43616e27742061646420746865203078206164647265737320746f207468652060448201527f77686974656c69737400000000000000000000000000000000000000000000006064820152608401610763565b6001600160a01b038216600081815260066020526040808220805460ff19166001179055517fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab039190a25050565b600080821580156113525750600554155b1561136257506000905080611480565b60006113828673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2611104565b9050600061138f8761185e565b905060006113a86113a08885611cec565b836012611093565b905085811161141f5760405162461bcd60e51b815260206004820152602d60248201527f4e6f74207377617070696e6720656e6f75676820746f207265636f766572207460448201527f68652067617320726566756e64000000000000000000000000000000000000006064820152608401610763565b600061143960055488846114339190612ebd565b90611cec565b90506114458782612f60565b9550600061145587601286611093565b9050600061146b670de0b6b3a764000087612387565b90506114778282611cec565b96505050505050505b935093915050565b6000611494813361179c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161153a5747806115075760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610763565b604051339082156108fc029083906000818181858888f19350505050158015611534573d6000803e3d6000fd5b50505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a59190612f73565b9050600081116115f75760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610763565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0384169063a9059cbb906044015b6020604051808303816000875af115801561165e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190612ee6565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610776576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556116dc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610797836001600160a01b03841661239c565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106b857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106b8565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610776576117d8816001600160a01b031660146123eb565b6117e38360206123eb565b6040516020016117f4929190612fb0565b60408051601f198184030181529082905262461bcd60e51b825261076391600401613031565b6118248282611682565b60008281526001602052604090206106e49082611720565b61184682826125cc565b60008281526001602052604090206106e4908261264b565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161188d57506012919050565b816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190613064565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152606090735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f9063e6a4390590604401602060405180830381865afa925050508015611987575060408051601f3d908101601f1916820190925261198491810190613081565b60015b15611ab2576001600160a01b03811615611ab0576000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156119db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ff91906130c1565b63ffffffff1692505050620151808142611a199190612ebd565b1015611aae5760408051600280825260608201835290916020830190803683370190505092508483600081518110611a5357611a53612ed0565b60200260200101906001600160a01b031690816001600160a01b0316815250508383600181518110611a8757611a87612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505050506106b8565b505b505b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21480611af957506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b6106b8576040805160038082526080820190925290602082016060803683370190505090508281600081518110611b3257611b32612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600181518110611b7a57611b7a612ed0565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110611bae57611bae612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b60006001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015611c165791925073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee915b6040517fbcfd032d0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152841660248201527347fb2585d2c56fe188d0e6ec628a38b74fceeedf9063bcfd032d9060440160a060405180830381865afa925050508015611cab575060408051601f3d908101601f19168201909252611ca891810190613120565b60015b611cb95760009150506106b8565b8515611cde57611cd1670de0b6b3a764000085612387565b96505050505050506106b8565b8396505050505050506106b8565b60006107978383612660565b60025460ff1615611d4b5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610763565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d803390565b6040516001600160a01b03909116815260200160405180910390a1565b60025460ff16611def5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610763565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611d80565b60006107978383612759565b6000611e3e6102f86020850185612a8e565b611e8a5760405162461bcd60e51b815260206004820152600f60248201527f4e6f742077686974656c697374656400000000000000000000000000000000006044820152606401610763565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03861603611f07578260400135341015611f025760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768204554482070726f76696465640000000000000000006044820152606401610763565b611fba565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152602085810135604483015291516001600160a01b038816926323b872dd926064808201939182900301816000875af1158015611f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9e9190612ee6565b50611fba85611fb06020860186612a8e565b8560200135612103565b6000611fc68530612783565b90506000611fd76020860186612a8e565b6001600160a01b031634611fee6060880188613170565b604051611ffc9291906131be565b60006040518083038185875af1925050503d8060008114612039576040519150601f19603f3d011682016040523d82523d6000602084013e61203e565b606091505b505090508061208f5760405162461bcd60e51b815260206004820152601360248201527f50726f786965642053776170204661696c6564000000000000000000000000006044820152606401610763565b600061209b8730612783565b90506120a78382612ebd565b93508484116120f85760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b505050949350505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0384160361212c57505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015282919085169063dd62ed3e90604401602060405180830381865afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190612f73565b10156106e4576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600019602483015284169063095ea7b39060440161163f565b604080516002808252606082018352600092839283929091602083019080368337019050509050868160008151811061224857612248612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061229057612290612ed0565b6001600160a01b0392831660209182029290920101526040517f4a25d94a0000000000000000000000000000000000000000000000000000000081526000918a1690634a25d94a906122ee908a908a9087908b9042906004016131ce565b6000604051808303816000875af115801561230d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123359190810190612dff565b90508060008151811061234a5761234a612ed0565b60200260200101518160018151811061236557612365612ed0565b60200260200101519350935050509550959350505050565b60006106b8825490565b600061079783670de0b6b3a76400008461282a565b60008181526001830160205260408120546123e3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b8565b5060006106b8565b606060006123fa836002612d65565b612405906002612f60565b67ffffffffffffffff81111561241d5761241d612de9565b6040519080825280601f01601f191660200182016040528015612447576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061247e5761247e612ed0565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106124c9576124c9612ed0565b60200101906001600160f81b031916908160001a90535060006124ed846002612d65565b6124f8906001612f60565b90505b600181111561257d577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061253957612539612ed0565b1a60f81b82828151811061254f5761254f612ed0565b60200101906001600160f81b031916908160001a90535060049490941c936125768161320a565b90506124fb565b5083156107975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610763565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610776576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610797836001600160a01b038416612910565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106126bd576040517fd31b340200000000000000000000000000000000000000000000000000000000815260048101829052602401610763565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff82119050826000036126fb5780670de0b6b3a76400008504019450505050506106b8565b6204000082850304939091119091037d40000000000000000000000000000000000000000000000000000000000002919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600082600001828154811061277057612770612ed0565b9060005260206000200154905092915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0384161461281a576040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa1580156127ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128139190612f73565b90506106b8565b506001600160a01b031631919050565b60008080600019858709858702925082811083820303915050806000036128645783828161285a5761285a612f28565b0492505050610797565b8381106128a7576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610763565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600081815260018301602052604081205480156129f9576000612934600183612ebd565b855490915060009061294890600190612ebd565b90508181146129ad57600086600001828154811061296857612968612ed0565b906000526020600020015490508087600001848154811061298b5761298b612ed0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806129be576129be613221565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106b8565b60009150506106b8565b600060208284031215612a1557600080fd5b81356001600160e01b03198116811461079757600080fd5b600060208284031215612a3f57600080fd5b5035919050565b6001600160a01b0381168114612a5b57600080fd5b50565b60008060408385031215612a7157600080fd5b823591506020830135612a8381612a46565b809150509250929050565b600060208284031215612aa057600080fd5b813561079781612a46565b60ff81168114612a5b57600080fd5b600080600060608486031215612acf57600080fd5b8335612ada81612a46565b9250602084013591506040840135612af181612aab565b809150509250925092565b60008060408385031215612b0f57600080fd5b8235612b1a81612a46565b91506020830135612a8381612a46565b8015158114612a5b57600080fd5b600060208284031215612b4a57600080fd5b813561079781612b2a565b60008060408385031215612b6857600080fd5b50508035926020909101359150565b600080600080600060a08688031215612b8f57600080fd5b8535612b9a81612a46565b94506020860135612baa81612a46565b9350604086013567ffffffffffffffff811115612bc657600080fd5b860160808189031215612bd857600080fd5b94979396509394606081013594506080013592915050565b600080600060608486031215612c0557600080fd5b833592506020840135612c1781612aab565b91506040840135612af181612aab565b600080600060608486031215612c3c57600080fd5b8335612c4781612a46565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612cad578160001904821115612c9357612c93612c5c565b80851615612ca057918102915b93841c9390800290612c77565b509250929050565b600082612cc4575060016106b8565b81612cd1575060006106b8565b8160018114612ce75760028114612cf157612d0d565b60019150506106b8565b60ff841115612d0257612d02612c5c565b50506001821b6106b8565b5060208310610133831016604e8410600b8410161715612d30575081810a6106b8565b612d3a8383612c72565b8060001904821115612d4e57612d4e612c5c565b029392505050565b600061079760ff841683612cb5565b6000816000190483118215151615612d7f57612d7f612c5c565b500290565b600081518084526020808501945080840160005b83811015612dbd5781516001600160a01b031687529582019590820190600101612d98565b509495945050505050565b828152604060208201526000612de16040830184612d84565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612e1257600080fd5b825167ffffffffffffffff80821115612e2a57600080fd5b818501915085601f830112612e3e57600080fd5b815181811115612e5057612e50612de9565b8060051b604051601f19603f83011681018181108582111715612e7557612e75612de9565b604052918252848201925083810185019188831115612e9357600080fd5b938501935b82851015612eb157845184529385019392850192612e98565b98975050505050505050565b818103818111156106b8576106b8612c5c565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612ef857600080fd5b815161079781612b2a565b60ff82811682821603908111156106b8576106b8612c5c565b60006107978383612cb5565b634e487b7160e01b600052601260045260246000fd5b600082612f5b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156106b8576106b8612c5c565b600060208284031215612f8557600080fd5b5051919050565b60005b83811015612fa7578181015183820152602001612f8f565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612fe8816017850160208801612f8c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613025816028840160208801612f8c565b01602801949350505050565b6020815260008251806020840152613050816040850160208701612f8c565b601f01601f19169190910160400192915050565b60006020828403121561307657600080fd5b815161079781612aab565b60006020828403121561309357600080fd5b815161079781612a46565b80516dffffffffffffffffffffffffffff811681146130bc57600080fd5b919050565b6000806000606084860312156130d657600080fd5b6130df8461309e565b92506130ed6020850161309e565b9150604084015163ffffffff81168114612af157600080fd5b805169ffffffffffffffffffff811681146130bc57600080fd5b600080600080600060a0868803121561313857600080fd5b61314186613106565b945060208601519350604086015192506060860151915061316460808701613106565b90509295509295909350565b6000808335601e1984360301811261318757600080fd5b83018035915067ffffffffffffffff8211156131a257600080fd5b6020019150368190038213156131b757600080fd5b9250929050565b8183823760009101908152919050565b85815284602082015260a0604082015260006131ed60a0830186612d84565b6001600160a01b0394909416606083015250608001529392505050565b60008161321957613219612c5c565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206942485ec2b78dc8524e919854f2b483a75e915dea88df62f35a6a6bf6dafcce64736f6c63430008100033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1DC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9010D07C GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xBAAA61BE GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xEA9119A5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xEA9119A5 EQ PUSH2 0x5C8 JUMPI DUP1 PUSH4 0xEAD8ECE8 EQ PUSH2 0x605 JUMPI DUP1 PUSH4 0xF4F3B200 EQ PUSH2 0x63A JUMPI DUP1 PUSH4 0xFBFA77CF EQ PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBAAA61BE EQ PUSH2 0x548 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x568 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x588 JUMPI DUP1 PUSH4 0xE43252D7 EQ PUSH2 0x5A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA001ECDD GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xA001ECDD EQ PUSH2 0x4D5 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x4EB JUMPI DUP1 PUSH4 0xA702F2C0 EQ PUSH2 0x500 JUMPI DUP1 PUSH4 0xAD5C4648 EQ PUSH2 0x520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9010D07C EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x90238C39 EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x47E JUMPI DUP1 PUSH4 0x9CA519C6 EQ PUSH2 0x4C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4021A867 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x6817031B GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x6817031B EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x69FE0E2D EQ PUSH2 0x3D6 JUMPI DUP1 PUSH4 0x882796F1 EQ PUSH2 0x3F6 JUMPI DUP1 PUSH4 0x8AB1D681 EQ PUSH2 0x416 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4021A867 EQ PUSH2 0x33E JUMPI DUP1 PUSH4 0x4C712594 EQ PUSH2 0x35E JUMPI DUP1 PUSH4 0x5285301C EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2F2FF15D GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x2BD JUMPI DUP1 PUSH4 0x3AF32ABF EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x3CC562B2 EQ PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1E8 JUMPI DUP1 PUSH4 0x1694505E EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x25D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x1E3 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A03 JUMP JUMPDEST PUSH2 0x67A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x245 PUSH20 0x7A250D5630B4CF539739DF2C5DACB4C659F2488D DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A2D JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A5E JUMP JUMPDEST PUSH2 0x6BE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x2D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A5E JUMP JUMPDEST PUSH2 0x6E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x2F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x322 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x245 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x359 CALLDATASIZE PUSH1 0x4 PUSH2 0x2ABA JUMP JUMPDEST PUSH2 0x77A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x379 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AFC JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x399 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AFC JUMP JUMPDEST PUSH2 0x936 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0x208 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x3D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0xAB8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x3F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A2D JUMP JUMPDEST PUSH2 0xB34 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B38 JUMP JUMPDEST PUSH2 0xB77 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x431 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0xB99 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x245 PUSH2 0x451 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B55 JUMP JUMPDEST PUSH2 0xC7D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x245 PUSH20 0x47FB2585D2C56FE188D0E6EC628A38B74FCEEEDF DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x499 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A5E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2BB PUSH2 0x4D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B77 JUMP JUMPDEST PUSH2 0xC95 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x51B CALLDATASIZE PUSH1 0x4 PUSH2 0x2BF0 JUMP JUMPDEST PUSH2 0x1093 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x245 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x554 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x563 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AFC JUMP JUMPDEST PUSH2 0x1104 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28D PUSH2 0x583 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A2D JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x594 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x5A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A5E JUMP JUMPDEST PUSH2 0x1246 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x5C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0x126C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH2 0x5E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x611 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x625 PUSH2 0x620 CALLDATASIZE PUSH1 0x4 PUSH2 0x2C27 JUMP JUMPDEST PUSH2 0x1341 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x214 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BB PUSH2 0x655 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0x1488 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x666 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x245 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x5A05180F00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x6B8 JUMPI POP PUSH2 0x6B8 DUP3 PUSH2 0x1735 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x6DA DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH2 0x6E4 DUP4 DUP4 PUSH2 0x181A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x76C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x776 DUP3 DUP3 PUSH2 0x183C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x786 DUP6 PUSH2 0x185E JUMP JUMPDEST SWAP1 POP PUSH2 0x793 DUP5 DUP5 DUP4 PUSH2 0x1093 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ADD PUSH2 0x7DD JUMPI PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP3 POP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADD PUSH2 0x81A JUMPI PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x826 DUP5 DUP5 PUSH2 0x18EF JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x83B JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x846 DUP6 PUSH2 0x185E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x855 DUP3 PUSH1 0xA PUSH2 0x2D56 JUMP JUMPDEST PUSH2 0x860 SWAP1 PUSH1 0x1 PUSH2 0x2D65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD06CA61F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0x7A250D5630B4CF539739DF2C5DACB4C659F2488D SWAP1 PUSH4 0xD06CA61F SWAP1 PUSH2 0x8B5 SWAP1 DUP5 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2DC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8F3 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8F0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2DFF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x903 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 MLOAD PUSH2 0x912 SWAP2 SWAP1 PUSH2 0x2EBD JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x922 JUMPI PUSH2 0x922 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC1 NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ADD PUSH2 0x975 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE SWAP3 POP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC1 NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADD PUSH2 0x9B2 JUMPI PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE SWAP2 POP JUMPDEST PUSH1 0x0 PUSH2 0x9BE DUP5 DUP5 PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x9DA JUMPI PUSH2 0x9D2 DUP4 DUP3 PUSH1 0x12 PUSH2 0x77A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ DUP1 PUSH2 0xA21 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ JUMPDEST ISZERO PUSH2 0xA30 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA50 DUP6 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA72 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP7 PUSH2 0x1BD4 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 0xA82 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xAAC JUMPI PUSH1 0x0 PUSH2 0xA93 DUP4 DUP4 PUSH2 0x1CEC JUMP JUMPDEST SWAP1 POP PUSH2 0xAA1 DUP7 DUP3 PUSH1 0x12 PUSH2 0x77A JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC4 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP1 PUSH32 0x8800DEB8C31293B539EAF5391FCC88280DC58F015C043D65DD5B72A0979A1DD1 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB40 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH1 0x5 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x1FE2943BAEE27F47ADD82886C2200F910C749C461C9B63C5FE83901A53BDB49 SWAP1 PUSH1 0x20 ADD PUSH2 0xB28 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB83 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST DUP2 ISZERO PUSH2 0xB91 JUMPI PUSH2 0x776 PUSH2 0x1CF8 JUMP JUMPDEST PUSH2 0x776 PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBA5 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xC33 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41646472657373206973206D697373696E672066726F6D207468652077686974 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x656C697374000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0xCDD2E9B91A56913D370075169CEFA1602BA36BE5301664F752192BB1709DF757 SWAP2 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x797 SWAP1 DUP4 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xCE8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x3 SLOAD SUB PUSH2 0xD3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP1 DUP7 AND SUB PUSH2 0xD9A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F66726F6D546F6B656E20657175616C20746F205F746F546F6B656E00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA8 DUP7 DUP7 DUP7 DUP6 PUSH2 0x1E2C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDB7 DUP7 DUP4 DUP7 PUSH2 0x1341 JUMP JUMPDEST POP SWAP1 POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SUB PUSH2 0xE6C JUMPI PUSH2 0xDE8 DUP2 DUP4 PUSH2 0x2EBD JUMP JUMPDEST SWAP2 POP DUP3 DUP3 GT PUSH2 0xE39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820746F6B656E732072657475726E6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xE66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0xF97 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0xEB8 JUMPI PUSH2 0xE93 DUP8 PUSH20 0x7A250D5630B4CF539739DF2C5DACB4C659F2488D DUP6 PUSH2 0x2103 JUMP JUMPDEST PUSH2 0xEB4 PUSH20 0x7A250D5630B4CF539739DF2C5DACB4C659F2488D DUP9 DUP5 DUP7 ADDRESS PUSH2 0x220D JUMP JUMPDEST POP SWAP1 POP JUMPDEST PUSH2 0xEC2 DUP2 DUP5 PUSH2 0x2EBD JUMP JUMPDEST SWAP3 POP DUP4 DUP4 GT PUSH2 0xF13 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820746F6B656E732072657475726E6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH4 0xA9059CBB CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF70 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF94 SWAP2 SWAP1 PUSH2 0x2EE6 JUMP JUMPDEST POP POP JUMPDEST DUP1 ISZERO PUSH2 0x1011 JUMPI PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x180E222D DUP3 CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x100B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP1 DUP9 AND PUSH32 0x2FE279DBE9D225A9D3C707F70E43C44034EE8EBBE8A65CEEFC7FE927A55A67DE PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP3 EQ PUSH2 0x1065 JUMPI DUP8 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x1067 JUMP JUMPDEST CALLVALUE JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP8 SWAP1 MSTORE DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH1 0x1 PUSH1 0x3 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND DUP4 PUSH1 0xFF AND LT ISZERO PUSH2 0x10CC JUMPI PUSH2 0x10AD DUP4 DUP4 PUSH2 0x2F03 JUMP JUMPDEST PUSH2 0x10BB SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x2F1C JUMP JUMPDEST PUSH2 0x10C5 SWAP1 DUP6 PUSH2 0x2D65 JUMP JUMPDEST SWAP1 POP PUSH2 0x797 JUMP JUMPDEST DUP2 PUSH1 0xFF AND DUP4 PUSH1 0xFF AND GT ISZERO PUSH2 0x10FC JUMPI PUSH2 0x10E4 DUP3 DUP5 PUSH2 0x2F03 JUMP JUMPDEST PUSH2 0x10F2 SWAP1 PUSH1 0xFF AND PUSH1 0xA PUSH2 0x2F1C JUMP JUMPDEST PUSH2 0x10C5 SWAP1 DUP6 PUSH2 0x2F3E JUMP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ DUP1 PUSH2 0x114D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ JUMPDEST DUP1 ISZERO PUSH2 0x119B JUMPI POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EQ DUP1 PUSH2 0x119B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ JUMPDEST ISZERO PUSH2 0x11AF JUMPI POP PUSH8 0xDE0B6B3A7640000 PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11BB DUP5 DUP5 PUSH2 0x936 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x11CA JUMPI SWAP1 POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11D6 DUP6 DUP6 PUSH2 0x79E JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x11E7 JUMPI SWAP2 POP PUSH2 0x6B8 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F205261746520466F756E6400000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH2 0x6B8 SWAP1 PUSH2 0x237D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1262 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH2 0x6E4 DUP4 DUP4 PUSH2 0x183C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1278 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x12F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E27742061646420746865203078206164647265737320746F2074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0xA850AE9193F515CBAE8D35E8925BD2BE26627FC91BCE650B8652ED254E9CAB03 SWAP2 SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 ISZERO DUP1 ISZERO PUSH2 0x1352 JUMPI POP PUSH1 0x5 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1362 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x1480 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1382 DUP7 PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 PUSH2 0x1104 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x138F DUP8 PUSH2 0x185E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x13A8 PUSH2 0x13A0 DUP9 DUP6 PUSH2 0x1CEC JUMP JUMPDEST DUP4 PUSH1 0x12 PUSH2 0x1093 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT PUSH2 0x141F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F74207377617070696E6720656E6F75676820746F207265636F7665722074 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x68652067617320726566756E6400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1439 PUSH1 0x5 SLOAD DUP9 DUP5 PUSH2 0x1433 SWAP2 SWAP1 PUSH2 0x2EBD JUMP JUMPDEST SWAP1 PUSH2 0x1CEC JUMP JUMPDEST SWAP1 POP PUSH2 0x1445 DUP8 DUP3 PUSH2 0x2F60 JUMP JUMPDEST SWAP6 POP PUSH1 0x0 PUSH2 0x1455 DUP8 PUSH1 0x12 DUP7 PUSH2 0x1093 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x146B PUSH8 0xDE0B6B3A7640000 DUP8 PUSH2 0x2387 JUMP JUMPDEST SWAP1 POP PUSH2 0x1477 DUP3 DUP3 PUSH2 0x1CEC JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1494 DUP2 CALLER PUSH2 0x179C JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADD PUSH2 0x153A JUMPI SELFBALANCE DUP1 PUSH2 0x1507 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7468696E6720746F20776974686472617700000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1534 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1581 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15A5 SWAP2 SWAP1 PUSH2 0x2F73 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x15F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7468696E6720746F20776974686472617700000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x165E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1534 SWAP2 SWAP1 PUSH2 0x2EE6 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x776 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x16DC CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x239C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH32 0x7965DB0B00000000000000000000000000000000000000000000000000000000 EQ DUP1 PUSH2 0x6B8 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x776 JUMPI PUSH2 0x17D8 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x23EB JUMP JUMPDEST PUSH2 0x17E3 DUP4 PUSH1 0x20 PUSH2 0x23EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17F4 SWAP3 SWAP2 SWAP1 PUSH2 0x2FB0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x763 SWAP2 PUSH1 0x4 ADD PUSH2 0x3031 JUMP JUMPDEST PUSH2 0x1824 DUP3 DUP3 PUSH2 0x1682 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6E4 SWAP1 DUP3 PUSH2 0x1720 JUMP JUMPDEST PUSH2 0x1846 DUP3 DUP3 PUSH2 0x25CC JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6E4 SWAP1 DUP3 PUSH2 0x264B JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED NOT PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADD PUSH2 0x188D JUMPI POP PUSH1 0x12 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6B8 SWAP2 SWAP1 PUSH2 0x3064 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE6A4390500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x60 SWAP1 PUSH20 0x5C69BEE701EF814A2B6A3EDD4B1652CB9CC5AA6F SWAP1 PUSH4 0xE6A43905 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1987 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1984 SWAP2 DUP2 ADD SWAP1 PUSH2 0x3081 JUMP JUMPDEST PUSH1 0x1 JUMPDEST ISZERO PUSH2 0x1AB2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1AB0 JUMPI PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x19DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19FF SWAP2 SWAP1 PUSH2 0x30C1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP3 POP POP POP PUSH3 0x15180 DUP2 TIMESTAMP PUSH2 0x1A19 SWAP2 SWAP1 PUSH2 0x2EBD JUMP JUMPDEST LT ISZERO PUSH2 0x1AAE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE SWAP1 SWAP2 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP3 POP DUP5 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A53 JUMPI PUSH2 0x1A53 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP4 DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1A87 JUMPI PUSH2 0x1A87 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST POP JUMPDEST POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ DUP1 PUSH2 0x1AF9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ JUMPDEST PUSH2 0x6B8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP3 ADD PUSH1 0x60 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP3 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1B32 JUMPI PUSH2 0x1B32 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1B7A JUMPI PUSH2 0x1B7A PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP2 DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x1BAE JUMPI PUSH2 0x1BAE PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ DUP1 ISZERO PUSH2 0x1C16 JUMPI SWAP2 SWAP3 POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE SWAP2 JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBCFD032D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x47FB2585D2C56FE188D0E6EC628A38B74FCEEEDF SWAP1 PUSH4 0xBCFD032D SWAP1 PUSH1 0x44 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1CAB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1CA8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x3120 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1CB9 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST DUP6 ISZERO PUSH2 0x1CDE JUMPI PUSH2 0x1CD1 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x2387 JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST DUP4 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 DUP4 PUSH2 0x2660 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1D4B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1D80 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0x1DEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A206E6F7420706175736564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER PUSH2 0x1D80 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 DUP4 PUSH2 0x2759 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E3E PUSH2 0x2F8 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x2A8E JUMP JUMPDEST PUSH2 0x1E8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F742077686974656C69737465640000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SUB PUSH2 0x1F07 JUMPI DUP3 PUSH1 0x40 ADD CALLDATALOAD CALLVALUE LT ISZERO PUSH2 0x1F02 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F756768204554482070726F7669646564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH2 0x1FBA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP6 DUP2 ADD CALLDATALOAD PUSH1 0x44 DUP4 ADD MSTORE SWAP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP3 PUSH4 0x23B872DD SWAP3 PUSH1 0x64 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F9E SWAP2 SWAP1 PUSH2 0x2EE6 JUMP JUMPDEST POP PUSH2 0x1FBA DUP6 PUSH2 0x1FB0 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x2A8E JUMP JUMPDEST DUP6 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x2103 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC6 DUP6 ADDRESS PUSH2 0x2783 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1FD7 PUSH1 0x20 DUP7 ADD DUP7 PUSH2 0x2A8E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLVALUE PUSH2 0x1FEE PUSH1 0x60 DUP9 ADD DUP9 PUSH2 0x3170 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FFC SWAP3 SWAP2 SWAP1 PUSH2 0x31BE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2039 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x203E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x208F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F786965642053776170204661696C656400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x209B DUP8 ADDRESS PUSH2 0x2783 JUMP JUMPDEST SWAP1 POP PUSH2 0x20A7 DUP4 DUP3 PUSH2 0x2EBD JUMP JUMPDEST SWAP4 POP DUP5 DUP5 GT PUSH2 0x20F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F75676820746F6B656E732072657475726E6564000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SUB PUSH2 0x212C JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP3 SWAP2 SWAP1 DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2194 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21B8 SWAP2 SWAP1 PUSH2 0x2F73 JUMP JUMPDEST LT ISZERO PUSH2 0x6E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 NOT PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH2 0x163F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP1 SWAP2 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP7 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2248 JUMPI PUSH2 0x2248 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2290 JUMPI PUSH2 0x2290 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x4A25D94A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 DUP11 AND SWAP1 PUSH4 0x4A25D94A SWAP1 PUSH2 0x22EE SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x31CE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x230D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2335 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2DFF JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x234A JUMPI PUSH2 0x234A PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2365 JUMPI PUSH2 0x2365 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP SWAP4 POP POP POP SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B8 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 PUSH8 0xDE0B6B3A7640000 DUP5 PUSH2 0x282A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x23E3 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x6B8 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x23FA DUP4 PUSH1 0x2 PUSH2 0x2D65 JUMP JUMPDEST PUSH2 0x2405 SWAP1 PUSH1 0x2 PUSH2 0x2F60 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x241D JUMPI PUSH2 0x241D PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2447 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x247E JUMPI PUSH2 0x247E PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x24C9 JUMPI PUSH2 0x24C9 PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x24ED DUP5 PUSH1 0x2 PUSH2 0x2D65 JUMP JUMPDEST PUSH2 0x24F8 SWAP1 PUSH1 0x1 PUSH2 0x2F60 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x257D JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2539 JUMPI PUSH2 0x2539 PUSH2 0x2ED0 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x254F JUMPI PUSH2 0x254F PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x2576 DUP2 PUSH2 0x320A JUMP JUMPDEST SWAP1 POP PUSH2 0x24FB JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x797 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x776 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2910 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP5 DUP7 MULMOD DUP5 DUP7 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP PUSH8 0xDE0B6B3A7640000 DUP2 LT PUSH2 0x26BD JUMPI PUSH1 0x40 MLOAD PUSH32 0xD31B340200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH8 0xDE0B6B3A7640000 DUP7 DUP9 MULMOD SWAP2 POP PUSH8 0x6F05B59D3B1FFFF DUP3 GT SWAP1 POP DUP3 PUSH1 0x0 SUB PUSH2 0x26FB JUMPI DUP1 PUSH8 0xDE0B6B3A7640000 DUP6 DIV ADD SWAP5 POP POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH3 0x40000 DUP3 DUP6 SUB DIV SWAP4 SWAP1 SWAP2 GT SWAP1 SWAP2 SUB PUSH30 0x400000000000000000000000000000000000000000000000000000000000 MUL SWAP2 SWAP1 SWAP2 OR PUSH32 0xACCB18165BD6FE31AE1CF318DC5B51EEE0E1BA569B88CD74C1773B91FAC10669 MUL ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2770 JUMPI PUSH2 0x2770 PUSH2 0x2ED0 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EQ PUSH2 0x281A JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2813 SWAP2 SWAP1 PUSH2 0x2F73 JUMP JUMPDEST SWAP1 POP PUSH2 0x6B8 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP6 DUP8 MUL SWAP3 POP DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP DUP1 PUSH1 0x0 SUB PUSH2 0x2864 JUMPI DUP4 DUP3 DUP2 PUSH2 0x285A JUMPI PUSH2 0x285A PUSH2 0x2F28 JUMP JUMPDEST DIV SWAP3 POP POP POP PUSH2 0x797 JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0x28A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x773CC18C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x763 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x2 PUSH1 0x1 DUP8 NOT DUP2 ADD DUP9 AND SWAP8 DUP9 SWAP1 DIV PUSH1 0x3 DUP2 MUL DUP4 XOR DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL DUP1 DUP3 MUL DUP5 SUB MUL SWAP1 DUP2 MUL SWAP1 SWAP3 SUB SWAP1 SWAP2 MUL PUSH1 0x0 DUP9 SWAP1 SUB DUP9 SWAP1 DIV SWAP1 SWAP2 ADD DUP6 DUP4 GT SWAP1 SWAP5 SUB SWAP4 SWAP1 SWAP4 MUL SWAP4 SUB SWAP5 SWAP1 SWAP5 DIV SWAP2 SWAP1 SWAP2 OR MUL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x29F9 JUMPI PUSH1 0x0 PUSH2 0x2934 PUSH1 0x1 DUP4 PUSH2 0x2EBD JUMP JUMPDEST DUP6 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2948 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2EBD JUMP JUMPDEST SWAP1 POP DUP2 DUP2 EQ PUSH2 0x29AD JUMPI PUSH1 0x0 DUP7 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2968 JUMPI PUSH2 0x2968 PUSH2 0x2ED0 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 DUP8 PUSH1 0x0 ADD DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x298B JUMPI PUSH2 0x298B PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP2 DUP3 MSTORE PUSH1 0x1 DUP9 ADD SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP4 SWAP1 SSTORE JUMPDEST DUP6 SLOAD DUP7 SWAP1 DUP1 PUSH2 0x29BE JUMPI PUSH2 0x29BE PUSH2 0x3221 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP6 PUSH1 0x1 ADD PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2A5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2A83 DUP2 PUSH2 0x2A46 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x797 DUP2 PUSH2 0x2A46 JUMP JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2A5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2ACF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2ADA DUP2 PUSH2 0x2A46 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2AF1 DUP2 PUSH2 0x2AAB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2B1A DUP2 PUSH2 0x2A46 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2A83 DUP2 PUSH2 0x2A46 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2A5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x797 DUP2 PUSH2 0x2B2A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2B8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2B9A DUP2 PUSH2 0x2A46 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2BAA DUP2 PUSH2 0x2A46 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x80 DUP2 DUP10 SUB SLT ISZERO PUSH2 0x2BD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2C05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2C17 DUP2 PUSH2 0x2AAB JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x2AF1 DUP2 PUSH2 0x2AAB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2C3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2C47 DUP2 PUSH2 0x2A46 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x2CAD JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2C93 JUMPI PUSH2 0x2C93 PUSH2 0x2C5C JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2CA0 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x2C77 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2CC4 JUMPI POP PUSH1 0x1 PUSH2 0x6B8 JUMP JUMPDEST DUP2 PUSH2 0x2CD1 JUMPI POP PUSH1 0x0 PUSH2 0x6B8 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2CE7 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2CF1 JUMPI PUSH2 0x2D0D JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x2D02 JUMPI PUSH2 0x2D02 PUSH2 0x2C5C JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x6B8 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x2D30 JUMPI POP DUP2 DUP2 EXP PUSH2 0x6B8 JUMP JUMPDEST PUSH2 0x2D3A DUP4 DUP4 PUSH2 0x2C72 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2D4E JUMPI PUSH2 0x2D4E PUSH2 0x2C5C JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x2CB5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x2D7F JUMPI PUSH2 0x2D7F PUSH2 0x2C5C JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2DBD JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2D98 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2DE1 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2D84 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2E2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2E3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x2E50 JUMPI PUSH2 0x2E50 PUSH2 0x2DE9 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x2E75 JUMPI PUSH2 0x2E75 PUSH2 0x2DE9 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x2E93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x2EB1 JUMPI DUP5 MLOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x2E98 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6B8 JUMPI PUSH2 0x6B8 PUSH2 0x2C5C JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x797 DUP2 PUSH2 0x2B2A JUMP JUMPDEST PUSH1 0xFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH2 0x6B8 JUMPI PUSH2 0x6B8 PUSH2 0x2C5C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP4 DUP4 PUSH2 0x2CB5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2F5B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6B8 JUMPI PUSH2 0x6B8 PUSH2 0x2C5C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2FA7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2F8F JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2FE8 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2F8C JUMP JUMPDEST PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x3025 DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2F8C JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3050 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2F8C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x797 DUP2 PUSH2 0x2AAB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3093 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x797 DUP2 PUSH2 0x2A46 JUMP JUMPDEST DUP1 MLOAD PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x30BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x30D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30DF DUP5 PUSH2 0x309E JUMP JUMPDEST SWAP3 POP PUSH2 0x30ED PUSH1 0x20 DUP6 ADD PUSH2 0x309E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2AF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH10 0xFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x30BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3141 DUP7 PUSH2 0x3106 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP3 POP PUSH1 0x60 DUP7 ADD MLOAD SWAP2 POP PUSH2 0x3164 PUSH1 0x80 DUP8 ADD PUSH2 0x3106 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x3187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x31A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x31B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST DUP6 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x31ED PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x2D84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3219 JUMPI PUSH2 0x3219 PUSH2 0x2C5C JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH10 0x42485EC2B78DC8524E91 SWAP9 SLOAD CALLCODE 0xB4 DUP4 0xA7 0x5E SWAP2 0x5D 0xEA DUP9 0xDF PUSH3 0xF35A6A PUSH12 0xF6DAFCCE64736F6C63430008 LT STOP CALLER ",
          "sourceMap": "543:4083:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;634:212:5;;;;;;;;;;-1:-1:-1;634:212:5;;;;;:::i;:::-;;:::i;:::-;;;516:14:52;;509:22;491:41;;479:2;464:18;634:212:5;;;;;;;;1437:123:32;;;;;;;;;;;;1517:42;1437:123;;;;;-1:-1:-1;;;;;734:55:52;;;716:74;;704:2;689:18;1437:123:32;543:253:52;4008:129:4;;;;;;;;;;-1:-1:-1;4008:129:4;;;;;:::i;:::-;4082:7;4108:12;;;;;;;;;;:22;;;;4008:129;;;;1132:25:52;;;1120:2;1105:18;4008:129:4;986:177:52;4387:145:4;;;;;;;;;;-1:-1:-1;4387:145:4;;;;;:::i;:::-;;:::i;:::-;;5404:214;;;;;;;;;;-1:-1:-1;5404:214:4;;;;;:::i;:::-;;:::i;360:156:36:-;;;;;;;;;;-1:-1:-1;360:156:36;;;;;:::i;:::-;-1:-1:-1;;;;;490:19:36;463:4;490:19;;;:9;:19;;;;;;;;;360:156;1154:113:32;;;;;;;;;;;;1224:42;1154:113;;6409:298;;;;;;;;;;-1:-1:-1;6409:298:32;;;;;:::i;:::-;;:::i;8228:1265::-;;;;;;;;;;-1:-1:-1;8228:1265:32;;;;;:::i;:::-;;:::i;6713:1509::-;;;;;;;;;;-1:-1:-1;6713:1509:32;;;;;:::i;:::-;;:::i;1098:84:8:-;;;;;;;;;;-1:-1:-1;1168:7:8;;;;1098:84;;2185:148:32;;;;;;;;;;-1:-1:-1;2185:148:32;;;;;:::i;:::-;;:::i;3352:147::-;;;;;;;;;;-1:-1:-1;3352:147:32;;;;;:::i;:::-;;:::i;2413:216::-;;;;;;;;;;-1:-1:-1;2413:216:32;;;;;:::i;:::-;;:::i;848:326:36:-;;;;;;;;;;-1:-1:-1;848:326:36;;;;;:::i;:::-;;:::i;1431:151:5:-;;;;;;;;;;-1:-1:-1;1431:151:5;;;;;:::i;:::-;;:::i;1304:126:32:-;;;;;;;;;;;;1387:42;1304:126;;2909:145:4;;;;;;;;;;-1:-1:-1;2909:145:4;;;;;:::i;:::-;2995:4;3018:12;;;;;;;;;;;-1:-1:-1;;;;;3018:29:4;;;;;;;;;;;;;;;2909:145;2523:2101:33;;;;;;:::i;:::-;;:::i;1647:28:32:-;;;;;;;;;;;;;;;;2027:49:4;;;;;;;;;;-1:-1:-1;2027:49:4;2072:4;2027:49;;5561:721:32;;;;;;;;;;-1:-1:-1;5561:721:32;;;;;:::i;:::-;;:::i;924:106::-;;;;;;;;;;;;987:42;924:106;;9499:802;;;;;;;;;;-1:-1:-1;9499:802:32;;;;;:::i;:::-;;:::i;1750:140:5:-;;;;;;;;;;-1:-1:-1;1750:140:5;;;;;:::i;:::-;;:::i;4766:147:4:-;;;;;;;;;;-1:-1:-1;4766:147:4;;;;;:::i;:::-;;:::i;522:320:36:-;;;;;;;;;;-1:-1:-1;522:320:36;;;;;:::i;:::-;;:::i;2009:111:32:-;;;;;;;;;;-1:-1:-1;2009:111:32;;;;;:::i;:::-;-1:-1:-1;;;;;2092:21:32;1224:42;2092:21;;2009:111;10307:1505;;;;;;;;;;-1:-1:-1;10307:1505:32;;;;;:::i;:::-;;:::i;:::-;;;;7114:25:52;;;7170:2;7155:18;;7148:34;;;;7087:18;10307:1505:32;6940:248:52;2756:513:32;;;;;;;;;;-1:-1:-1;2756:513:32;;;;;:::i;:::-;;:::i;1567:19::-;;;;;;;;;;-1:-1:-1;1567:19:32;;;;-1:-1:-1;;;;;1567:19:32;;;634:212:5;719:4;-1:-1:-1;;;;;;742:57:5;;757:42;742:57;;:97;;;803:36;827:11;803:23;:36::i;:::-;735:104;634:212;-1:-1:-1;;634:212:5:o;4387:145:4:-;4082:7;4108:12;;;;;;;;;;:22;;;2505:30;2516:4;719:10:13;2505::4;:30::i;:::-;4500:25:::1;4511:4;4517:7;4500:10;:25::i;:::-;4387:145:::0;;;:::o;5404:214::-;-1:-1:-1;;;;;5499:23:4;;719:10:13;5499:23:4;5491:83;;;;-1:-1:-1;;;5491:83:4;;7649:2:52;5491:83:4;;;7631:21:52;7688:2;7668:18;;;7661:30;7727:34;7707:18;;;7700:62;7798:17;7778:18;;;7771:45;7833:19;;5491:83:4;;;;;;;;;5585:26;5597:4;5603:7;5585:11;:26::i;:::-;5404:214;;:::o;6409:298:32:-;6561:14;6587;6604:20;6617:6;6604:12;:20::i;:::-;6587:37;;6642:58;6666:7;6675:14;6691:8;6642:23;:58::i;:::-;6635:65;;;6409:298;;;;;;:::o;8228:1265::-;8360:7;-1:-1:-1;;;;;;;8487:25:32;;;8483:73;;987:42;8528:17;;8483:73;-1:-1:-1;;;;;;;8570:23:32;;;8566:69;;987:42;8609:15;;8566:69;8679:21;8703:93;8754:10;8778:8;8703:37;:93::i;:::-;8679:117;;8915:4;:11;8930:1;8915:16;8911:30;;8940:1;8933:8;;;;;8911:30;9104:19;9126:24;9139:10;9126:12;:24::i;:::-;9104:46;-1:-1:-1;9205:16:32;9228:17;9104:46;9228:2;:17;:::i;:::-;9224:21;;:1;:21;:::i;:::-;9294:45;;;;;9205:40;;-1:-1:-1;1517:42:32;;9294:29;;:45;;9205:40;;9334:4;;9294:45;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9294:45:32;;;;;;;;;;;;:::i;:::-;;;9290:197;;9475:1;9468:8;;;;;;;9290:197;9415:4;9434:1;9420:4;:11;:15;;;;:::i;:::-;9415:21;;;;;;;;:::i;:::-;;;;;;;9408:28;;;;;;8228:1265;;;;:::o;6713:1509::-;6845:20;-1:-1:-1;;;;;;;6993:18:32;;;6989:73;;1224:42;7027:24;;6989:73;-1:-1:-1;;;;;;;7075:16:32;;;7071:69;;1224:42;7107:22;;7071:69;7208:18;7229:41;7249:10;7261:8;7229:19;:41::i;:::-;7208:62;-1:-1:-1;7285:15:32;;7281:205;;7421:54;7450:8;7460:10;7472:2;7421:28;:54::i;:::-;7414:61;;;;;7281:205;-1:-1:-1;;;;;7572:25:32;;1224:42;7572:25;;:52;;-1:-1:-1;;;;;;7601:23:32;;1224:42;7601:23;7572:52;7568:91;;;7647:1;7640:8;;;;;7568:91;7749:17;7769:44;7789:10;1224:42;7769:19;:44::i;:::-;7749:64;;7823:19;7845:42;1224;7878:8;7845:19;:42::i;:::-;7823:64;-1:-1:-1;8012:14:32;;;;;:34;;-1:-1:-1;8030:16:32;;;8012:34;8008:189;;;8062:19;8084:26;:9;8098:11;8084:13;:26::i;:::-;8062:48;;8131:55;8160:8;8170:11;8183:2;8131:28;:55::i;:::-;8124:62;;;;;;;;8008:189;-1:-1:-1;8214:1:32;;6713:1509;-1:-1:-1;;;;;6713:1509:32:o;2185:148::-;2072:4:4;2505:30;2072:4;719:10:13;2505::4;:30::i;:::-;2266:5:32::1;:14:::0;;;::::1;-1:-1:-1::0;;;;;2266:14:32;::::1;::::0;;::::1;::::0;;;2296:30:::1;::::0;716:74:52;;;719:10:13;;2296:30:32::1;::::0;704:2:52;689:18;2296:30:32::1;;;;;;;;2185:148:::0;;:::o;3352:147::-;2072:4:4;2505:30;2072:4;719:10:13;2505::4;:30::i;:::-;3430:13:32::1;:20:::0;;;3466:26:::1;::::0;1132:25:52;;;719:10:13;;3466:26:32::1;::::0;1120:2:52;1105:18;3466:26:32::1;986:177:52::0;2413:216:32;2072:4:4;2505:30;2072:4;719:10:13;2505::4;:30::i;:::-;2533:14:32::1;2529:94;;;2563:8;:6;:8::i;2529:94::-;2602:10;:8;:10::i;848:326:36:-:0;2072:4:4;2505:30;2072:4;719:10:13;2505::4;:30::i;:::-;-1:-1:-1;;;;;490:19:36;;463:4;490:19;;;:9;:19;;;;;;;;978:107:::1;;;::::0;-1:-1:-1;;;978:107:36;;12257:2:52;978:107:36::1;::::0;::::1;12239:21:52::0;12296:2;12276:18;;;12269:30;12335:34;12315:18;;;12308:62;12406:7;12386:18;;;12379:35;12431:19;;978:107:36::1;12055:401:52::0;978:107:36::1;-1:-1:-1::0;;;;;1102:19:36;::::1;;::::0;;;:9:::1;:19;::::0;;;;;1095:26;;-1:-1:-1;;1095:26:36::1;::::0;;1137:30;::::1;::::0;1102:19;1137:30:::1;848:326:::0;;:::o;1431:151:5:-;1521:7;1547:18;;;:12;:18;;;;;:28;;1569:5;1547:21;:28::i;2523:2101:33:-;1168:7:8;;;;1411:9;1403:38;;;;-1:-1:-1;;;1403:38:8;;12663:2:52;1403:38:8;;;12645:21:52;12702:2;12682:18;;;12675:30;12741:18;12721;;;12714:46;12777:18;;1403:38:8;12461:340:52;1403:38:8;1744:1:9::1;2325:7;;:19:::0;2317:63:::1;;;::::0;-1:-1:-1;;;2317:63:9;;13008:2:52;2317:63:9::1;::::0;::::1;12990:21:52::0;13047:2;13027:18;;;13020:30;13086:33;13066:18;;;13059:61;13137:18;;2317:63:9::1;12806:355:52::0;2317:63:9::1;1744:1;2455:7;:18:::0;-1:-1:-1;;;;;2803:22:33;;::::2;::::0;;::::2;::::0;2795:63:::2;;;::::0;-1:-1:-1;;;2795:63:33;;13368:2:52;2795:63:33::2;::::0;::::2;13350:21:52::0;13407:2;13387:18;;;13380:30;13446;13426:18;;;13419:58;13494:18;;2795:63:33::2;13166:352:52::0;2795:63:33::2;2869:22;2894:136;2929:10;2953:8;2975:11;3000:20;2894:21;:136::i;:::-;2869:161;;3042:21;3069:111;3110:8;3132:14;3160:10;3069:27;:111::i;:::-;-1:-1:-1::0;3041:139:33;-1:-1:-1;1224:42:32;-1:-1:-1;;;;;2092:21:32;;;3191:1032:33::2;;3226:31;3244:13:::0;3226:31;::::2;:::i;:::-;;;3314:20;3297:14;:37;3272:122;;;::::0;-1:-1:-1;;;3272:122:33;;13725:2:52;3272:122:33::2;::::0;::::2;13707:21:52::0;13764:2;13744:18;;;13737:30;13803:28;13783:18;;;13776:56;13849:18;;3272:122:33::2;13523:350:52::0;3272:122:33::2;3409:46;::::0;719:10:13;;3409:46:33;::::2;;;::::0;3440:14;;3409:46:::2;::::0;;;3440:14;719:10:13;3409:46:33;::::2;;;;;;;;;;;;;::::0;::::2;;;;;;3191:1032;;;3486:23;3528:17:::0;;3524:442:::2;;3565:153;3610:8;1517:42:32;3686:14:33;3565:23;:153::i;:::-;3759:192;1517:42:32;3819:8:33::0;3849:13;3884:14;3928:4:::2;3759:38;:192::i;:::-;-1:-1:-1::0;3737:214:33;-1:-1:-1;3524:442:33::2;3980:33;3998:15:::0;3980:33;::::2;:::i;:::-;;;4070:20;4053:14;:37;4028:122;;;::::0;-1:-1:-1;;;4028:122:33;;13725:2:52;4028:122:33::2;::::0;::::2;13707:21:52::0;13764:2;13744:18;;;13737:30;13803:28;13783:18;;;13776:56;13849:18;;4028:122:33::2;13523:350:52::0;4028:122:33::2;-1:-1:-1::0;;;;;4165:17:33;::::2;;719:10:13::0;4165:47:33::2;::::0;-1:-1:-1;;;;;;4165:47:33::2;::::0;;;;;;-1:-1:-1;;;;;14070:55:52;;;4165:47:33::2;::::0;::::2;14052:74:52::0;14142:18;;;14135:34;;;14025:18;;4165:47:33::2;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3472:751;3191:1032;4237:17:::0;;4233:161:::2;;4318:5;::::0;-1:-1:-1;;;;;4318:5:33::2;:14;4340:13:::0;719:10:13;4318:65:33::2;::::0;-1:-1:-1;;;;;;4318:65:33::2;::::0;;;;;;-1:-1:-1;;;;;14070:55:52;;;4318:65:33::2;::::0;::::2;14052:74:52::0;14142:18;;;14135:34;;;14025:18;;4318:65:33::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;4233:161;-1:-1:-1::0;;;;;4409:208:33;;::::2;::::0;;::::2;;1224:42:32::0;2092:21;;4503:49:33::2;;4535:11;:17;;;4503:49;;;4523:9;4503:49;4409:208;::::0;;14632:25:52;;;14688:2;14673:18;;14666:34;;;14716:18;;14709:34;;;14620:2;14605:18;4409:208:33::2;;;;;;;-1:-1:-1::0;;1701:1:9::1;2628:7;:22:::0;-1:-1:-1;;;;;2523:2101:33:o;5561:721:32:-;5707:7;5808:15;5791:32;;:14;:32;;;5787:415;;;5908:32;5926:14;5908:15;:32;:::i;:::-;5896:45;;5900:41;;5896:2;:45;:::i;:::-;5862:80;;:7;:80;:::i;:::-;5839:103;;;;5787:415;6057:15;6040:32;;:14;:32;;;6036:166;;;6157:32;6174:15;6157:14;:32;:::i;:::-;6145:45;;6149:41;;6145:2;:45;:::i;:::-;6111:80;;:7;:80;:::i;6036:166::-;-1:-1:-1;6268:7:32;;5561:721;-1:-1:-1;;5561:721:32:o;9499:802::-;9630:7;1224:42;-1:-1:-1;;;;;2092:21:32;;;9769:39;;;-1:-1:-1;;;;;;9790:18:32;;987:42;9790:18;9769:39;9768:94;;;;-1:-1:-1;1224:42:32;-1:-1:-1;;;;;2092:21:32;;;9826:35;;;-1:-1:-1;;;;;;9845:16:32;;987:42;9845:16;9826:35;9751:161;;;-1:-1:-1;9894:7:32;9887:14;;9751:161;9973:21;9997:38;10014:10;10026:8;9997:16;:38::i;:::-;9973:62;-1:-1:-1;10049:18:32;;10045:44;;10076:13;-1:-1:-1;10069:20:32;;10045:44;10144:21;10168:38;10185:10;10197:8;10168:16;:38::i;:::-;10144:62;-1:-1:-1;10220:18:32;;10216:44;;10247:13;-1:-1:-1;10240:20:32;;-1:-1:-1;10240:20:32;10216:44;10271:23;;-1:-1:-1;;;10271:23:32;;15716:2:52;10271:23:32;;;15698:21:52;15755:2;15735:18;;;15728:30;15794:15;15774:18;;;15767:43;15827:18;;10271:23:32;15514:337:52;1750:140:5;1830:7;1856:18;;;:12;:18;;;;;:27;;:25;:27::i;4766:147:4:-;4082:7;4108:12;;;;;;;;;;:22;;;2505:30;2516:4;719:10:13;2505::4;:30::i;:::-;4880:26:::1;4892:4;4898:7;4880:11;:26::i;522:320:36:-:0;2072:4:4;2505:30;2072:4;719:10:13;2505::4;:30::i;:::-;-1:-1:-1;;;;;668:22:36;::::1;647:110;;;::::0;-1:-1:-1;;;647:110:36;;16058:2:52;647:110:36::1;::::0;::::1;16040:21:52::0;16097:2;16077:18;;;16070:30;16136:34;16116:18;;;16109:62;16207:11;16187:18;;;16180:39;16236:19;;647:110:36::1;15856:405:52::0;647:110:36::1;-1:-1:-1::0;;;;;767:19:36;::::1;;::::0;;;:9:::1;:19;::::0;;;;;:26;;-1:-1:-1;;767:26:36::1;789:4;767:26;::::0;;809;::::1;::::0;767:19;809:26:::1;522:320:::0;;:::o;10307:1505:32:-;10497:21;;10563:15;;:37;;;;-1:-1:-1;10582:13:32;;:18;10563:37;10559:81;;;-1:-1:-1;10624:1:32;;-1:-1:-1;10624:1:32;10616:13;;10559:81;10650:25;10678:29;10694:6;987:42;10678:15;:29::i;:::-;10650:57;;10718:19;10740:20;10753:6;10740:12;:20::i;:::-;10718:42;-1:-1:-1;10901:19:32;10923:120;10960:30;:7;10972:17;10960:11;:30::i;:::-;11004:13;11031:2;10923:23;:120::i;:::-;10901:142;;11089:10;11075:11;:24;11054:116;;;;-1:-1:-1;;;11054:116:32;;16468:2:52;11054:116:32;;;16450:21:52;16507:2;16487:18;;;16480:30;16546:34;16526:18;;;16519:62;16617:15;16597:18;;;16590:43;16650:19;;11054:116:32;16266:409:52;11054:116:32;11349:26;11378:67;11422:13;;11393:10;11379:11;:24;;;;:::i;:::-;11378:30;;:67::i;:::-;11349:96;-1:-1:-1;11472:31:32;11493:10;11349:96;11472:31;:::i;:::-;11456:47;;11514:31;11548:103;11585:13;11612:2;11628:13;11548:23;:103::i;:::-;11514:137;-1:-1:-1;11661:26:32;11690:39;11698:7;11711:17;11690:20;:39::i;:::-;11661:68;-1:-1:-1;11758:47:32;:23;11661:68;11758:27;:47::i;:::-;11740:65;;10549:1263;;;;;;10307:1505;;;;;;;:::o;2756:513::-;2072:4:4;2505:30;2072:4;719:10:13;2505::4;:30::i;:::-;-1:-1:-1;;;;;;;2875:21:32;::::1;::::0;2871:392:::1;;2930:21;2973:11:::0;2965:43:::1;;;::::0;-1:-1:-1;;;2965:43:32;;17012:2:52;2965:43:32::1;::::0;::::1;16994:21:52::0;17051:2;17031:18;;;17024:30;17090:21;17070:18;;;17063:49;17129:18;;2965:43:32::1;16810:343:52::0;2965:43:32::1;3023:39;::::0;719:10:13;;3023:39:32;::::1;;;::::0;3054:7;;3023:39:::1;::::0;;;3054:7;719:10:13;3023:39:32;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;2898:175;5404:214:4::0;;:::o;2871:392:32:-:1;3111:31;::::0;-1:-1:-1;;;3111:31:32;;3136:4:::1;3111:31;::::0;::::1;716:74:52::0;3093:15:32::1;::::0;-1:-1:-1;;;;;3111:16:32;::::1;::::0;::::1;::::0;689:18:52;;3111:31:32::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3093:49;;3174:1;3164:7;:11;3156:43;;;::::0;-1:-1:-1;;;3156:43:32;;17012:2:52;3156:43:32::1;::::0;::::1;16994:21:52::0;17051:2;17031:18;;;17024:30;17090:21;17070:18;;;17063:49;17129:18;;3156:43:32::1;16810:343:52::0;3156:43:32::1;3214:38;::::0;;;;719:10:13;3214:38:32::1;::::0;::::1;14052:74:52::0;14142:18;;;14135:34;;;-1:-1:-1;;;;;3214:15:32;::::1;::::0;::::1;::::0;14025:18:52;;3214:38:32::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;6861:233:4:-:0;2995:4;3018:12;;;;;;;;;;;-1:-1:-1;;;;;3018:29:4;;;;;;;;;;;;6939:149;;6982:6;:12;;;;;;;;;;;-1:-1:-1;;;;;6982:29:4;;;;;;;;;:36;;-1:-1:-1;;6982:36:4;7014:4;6982:36;;;7064:12;719:10:13;;640:96;7064:12:4;-1:-1:-1;;;;;7037:40:4;7055:7;-1:-1:-1;;;;;7037:40:4;7049:4;7037:40;;;;;;;;;;6861:233;;:::o;7612:150:17:-;7682:4;7705:50;7710:3;-1:-1:-1;;;;;7730:23:17;;7705:4;:50::i;2620:202:4:-;2705:4;-1:-1:-1;;;;;;2728:47:4;;2743:32;2728:47;;:87;;-1:-1:-1;952:25:15;-1:-1:-1;;;;;;937:40:15;;;2779:36:4;829:155:15;3335:492:4;2995:4;3018:12;;;;;;;;;;;-1:-1:-1;;;;;3018:29:4;;;;;;;;;;;;3418:403;;3606:41;3634:7;-1:-1:-1;;;;;3606:41:4;3644:2;3606:19;:41::i;:::-;3718:38;3746:4;3753:2;3718:19;:38::i;:::-;3513:265;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3513:265:4;;;;;;;;;;-1:-1:-1;;;3461:349:4;;;;;;;:::i;1978:166:5:-;2065:31;2082:4;2088:7;2065:16;:31::i;:::-;2106:18;;;;:12;:18;;;;;:31;;2129:7;2106:22;:31::i;2233:171::-;2321:32;2339:4;2345:7;2321:17;:32::i;:::-;2363:18;;;;:12;:18;;;;;:34;;2389:7;2363:25;:34::i;3718:225:32:-;3811:14;-1:-1:-1;;;;;;;3845:21:32;;;3841:61;;-1:-1:-1;3889:2:32;;3718:225;-1:-1:-1;3718:225:32:o;3841:61::-;3919:6;-1:-1:-1;;;;;3919:15:32;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1360:1871:48:-;1592:64;;;;;-1:-1:-1;;;;;19325:15:52;;;1592:64:48;;;19307:34:52;19377:15;;19357:18;;;19350:43;1473:21:48;;526:42;;1592:24;;19219:18:52;;1592:64:48;;;;;;;;;;;;;;;;;;-1:-1:-1;1592:64:48;;;;;;;;-1:-1:-1;;1592:64:48;;;;;;;;;;;;:::i;:::-;;;1576:1269;;;-1:-1:-1;;;;;1777:26:48;;;1773:1053;;1955:26;2000:12;-1:-1:-1;;;;;1985:61:48;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1950:98;;;;;;2606:5;2585:18;2567:15;:36;;;;:::i;:::-;:44;2563:249;;;2642:16;;;2656:1;2642:16;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2642:16:48;2635:23;;2699:10;2681:4;2686:1;2681:7;;;;;;;;:::i;:::-;;;;;;:29;-1:-1:-1;;;;;2681:29:48;;;-1:-1:-1;;;;;2681:29:48;;;;;2750:8;2732:4;2737:1;2732:7;;;;;;;;:::i;:::-;;;;;;:27;-1:-1:-1;;;;;2732:27:48;;;-1:-1:-1;;;;;2732:27:48;;;;;2782:11;;;;2563:249;1805:1021;1773:1053;1665:1171;1576:1269;-1:-1:-1;;;;;2957:18:48;;404:42;2957:18;;:38;;-1:-1:-1;;;;;;2979:16:48;;404:42;2979:16;2957:38;3011:11;2953:80;3098:16;;;3112:1;3098:16;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3098:16:48;3091:23;;3143:10;3125:4;3130:1;3125:7;;;;;;;;:::i;:::-;;;;;;:29;-1:-1:-1;;;;;3125:29:48;;;-1:-1:-1;;;;;3125:29:48;;;;;404:42;3164:4;3169:1;3164:7;;;;;;;;:::i;:::-;;;;;;:23;-1:-1:-1;;;;;3164:23:48;;;-1:-1:-1;;;;;3164:23:48;;;;;3215:8;3197:4;3202:1;3197:7;;;;;;;;:::i;:::-;;;;;;:27;-1:-1:-1;;;;;3197:27:48;;;-1:-1:-1;;;;;3197:27:48;;;;;1360:1871;;;;:::o;4329:1094:32:-;4441:7;-1:-1:-1;;;;;4685:25:32;;1224:42;4685:25;4721:98;;;;4764:8;;-1:-1:-1;1224:42:32;;4721:98;4845:68;;;;;-1:-1:-1;;;;;19325:15:52;;;4845:68:32;;;19307:34:52;19377:15;;19357:18;;;19350:43;1387:42:32;;4845:28;;19219:18:52;;4845:68:32;;;;;;;;;;;;;;;;;;-1:-1:-1;4845:68:32;;;;;;;;-1:-1:-1;;4845:68:32;;;;;;;;;;;;:::i;:::-;;;4829:588;;5405:1;5398:8;;;;;4829:588;5225:10;5221:101;;;5262:45;5270:7;5291:14;5262:20;:45::i;:::-;5255:52;;;;;;;;;;5221:101;5351:14;5336:30;;;;;;;;;;21270:130:51;21328:14;21363:30;21388:1;21391;21363:24;:30::i;1863:115:8:-;1168:7;;;;1411:9;1403:38;;;;-1:-1:-1;;;1403:38:8;;12663:2:52;1403:38:8;;;12645:21:52;12702:2;12682:18;;;12675:30;12741:18;12721;;;12714:46;12777:18;;1403:38:8;12461:340:52;1403:38:8;1922:7:::1;:14:::0;;-1:-1:-1;;1922:14:8::1;1932:4;1922:14;::::0;;1951:20:::1;1958:12;719:10:13::0;;640:96;1958:12:8::1;1951:20;::::0;-1:-1:-1;;;;;734:55:52;;;716:74;;704:2;689:18;1951:20:8::1;;;;;;;1863:115::o:0;2110:117::-;1168:7;;;;1669:41;;;;-1:-1:-1;;;1669:41:8;;21172:2:52;1669:41:8;;;21154:21:52;21211:2;21191:18;;;21184:30;21250:22;21230:18;;;21223:50;21290:18;;1669:41:8;20970:344:52;1669:41:8;2168:7:::1;:15:::0;;-1:-1:-1;;2168:15:8::1;::::0;;2198:22:::1;719:10:13::0;2207:12:8::1;640:96:13::0;8870:156:17;8944:7;8994:22;8998:3;9010:5;8994:3;:22::i;962:1555:33:-;1166:22;1208:29;1222:14;;;;:11;:14;:::i;1208:29::-;1200:57;;;;-1:-1:-1;;;1200:57:33;;21521:2:52;1200:57:33;;;21503:21:52;21560:2;21540:18;;;21533:30;21599:17;21579:18;;;21572:45;21634:18;;1200:57:33;21319:339:52;1200:57:33;1224:42:32;-1:-1:-1;;;;;2092:21:32;;;1268:427:33;;1326:11;:17;;;1313:9;:30;;1305:66;;;;-1:-1:-1;;;1305:66:33;;21865:2:52;1305:66:33;;;21847:21:52;21904:2;21884:18;;;21877:30;21943:25;21923:18;;;21916:53;21986:18;;1305:66:33;21663:347:52;1305:66:33;1268:427;;;1402:134;;;;;;719:10:13;1402:134:33;;;22278:34:52;1481:4:33;22328:18:52;;;22321:43;1504:18:33;;;;;22380::52;;;22373:34;1402:134:33;;-1:-1:-1;;;;;1402:23:33;;;;;22190:18:52;;;;;1402:134:33;;;;;;-1:-1:-1;1402:23:33;:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1551:133:33;1592:10;1620:14;;;;:11;:14;:::i;:::-;1652:11;:18;;;1551:23;:133::i;:::-;1909:28;1940:77;1972:8;2002:4;1940:18;:77::i;:::-;1909:108;-1:-1:-1;2057:12:33;2075:14;;;;:11;:14;:::i;:::-;-1:-1:-1;;;;;2075:19:33;2102:9;2126:16;;;;:11;:16;:::i;:::-;2075:77;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2056:96;;;2170:7;2162:39;;;;-1:-1:-1;;;2162:39:33;;23422:2:52;2162:39:33;;;23404:21:52;23461:2;23441:18;;;23434:30;23500:21;23480:18;;;23473:49;23539:18;;2162:39:33;23220:343:52;2162:39:33;2212:27;2242:77;2274:8;2304:4;2242:18;:77::i;:::-;2212:107;-1:-1:-1;2347:42:33;2369:20;2212:107;2347:42;:::i;:::-;2330:59;;2438:20;2421:14;:37;2400:110;;;;-1:-1:-1;;;2400:110:33;;13725:2:52;2400:110:33;;;13707:21:52;13764:2;13744:18;;;13737:30;13803:28;13783:18;;;13776:56;13849:18;;2400:110:33;13523:350:52;2400:110:33;1190:1327;;;962:1555;;;;;;:::o;12247:312:32:-;1224:42;-1:-1:-1;;;;;2092:21:32;;;12388:165;;12247:312;;;:::o;12388:165::-;12432:41;;;;;12457:4;12432:41;;;19307:34:52;-1:-1:-1;;;;;19377:15:52;;;19357:18;;;19350:43;12476:7:32;;12432:16;;;;;;19219:18:52;;12432:41:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:51;12428:125;;;12499:43;;;;;-1:-1:-1;;;;;14070:55:52;;;12499:43:32;;;14052:74:52;-1:-1:-1;;14142:18:52;;;14135:34;12499:14:32;;;;;14025:18:52;;12499:43:32;13878:297:52;654:615:48;932:16;;;946:1;932:16;;;;;;;;861;;;;;;932;;;;;;;;;;;;-1:-1:-1;932:16:48;908:40;;976:6;958:4;963:1;958:7;;;;;;;;:::i;:::-;;;;;;:25;-1:-1:-1;;;;;958:25:48;;;-1:-1:-1;;;;;958:25:48;;;;;404:42;993:4;998:1;993:7;;;;;;;;:::i;:::-;-1:-1:-1;;;;;993:23:48;;;:7;;;;;;;;;:23;1054:166;;;;;1027:24;;1054:38;;;;;:166;;1106:10;;1130:16;;1160:4;;1178:3;;1195:15;;1054:166;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1054:166:48;;;;;;;;;;;;:::i;:::-;1027:193;;1239:7;1247:1;1239:10;;;;;;;;:::i;:::-;;;;;;;1251:7;1259:1;1251:10;;;;;;;;:::i;:::-;;;;;;;1231:31;;;;;;654:615;;;;;;;;:::o;8413:115:17:-;8476:7;8502:19;8510:3;4028:18;;3946:107;3839:127:51;3897:14;3932:27;3947:1;1359:4;3957:1;3932:14;:27::i;1697:404:17:-;1760:4;3834:19;;;:12;;;:19;;;;;;1776:319;;-1:-1:-1;1818:23:17;;;;;;;;:11;:23;;;;;;;;;;;;;1998:18;;1976:19;;;:12;;;:19;;;;;;:40;;;;2030:11;;1776:319;-1:-1:-1;2079:5:17;2072:12;;1588:441:14;1663:13;1688:19;1720:10;1724:6;1720:1;:10;:::i;:::-;:14;;1733:1;1720:14;:::i;:::-;1710:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1710:25:14;;1688:47;;1745:15;:6;1752:1;1745:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1745:15:14;;;;;;;;;1770;:6;1777:1;1770:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1770:15:14;;;;;;;;-1:-1:-1;1800:9:14;1812:10;1816:6;1812:1;:10;:::i;:::-;:14;;1825:1;1812:14;:::i;:::-;1800:26;;1795:132;1832:1;1828;:5;1795:132;;;1866:12;1879:5;1887:3;1879:11;1866:25;;;;;;;:::i;:::-;;;;1854:6;1861:1;1854:9;;;;;;;;:::i;:::-;;;;:37;-1:-1:-1;;;;;1854:37:14;;;;;;;;-1:-1:-1;1915:1:14;1905:11;;;;;1835:3;;;:::i;:::-;;;1795:132;;;-1:-1:-1;1944:10:14;;1936:55;;;;-1:-1:-1;;;1936:55:14;;24513:2:52;1936:55:14;;;24495:21:52;;;24532:18;;;24525:30;24591:34;24571:18;;;24564:62;24643:18;;1936:55:14;24311:356:52;7219:234:4;2995:4;3018:12;;;;;;;;;;;-1:-1:-1;;;;;3018:29:4;;;;;;;;;;;;7298:149;;;7372:5;7340:12;;;;;;;;;;;-1:-1:-1;;;;;7340:29:4;;;;;;;;;;:37;;-1:-1:-1;;7340:37:4;;;7396:40;719:10:13;;7340:12:4;;7396:40;;7372:5;7396:40;7219:234;;:::o;7930:156:17:-;8003:4;8026:53;8034:3;-1:-1:-1;;;;;8054:23:17;;8026:7;:53::i;20191:1149:49:-;20262:14;;;-1:-1:-1;;20377:1:49;20374;20367:20;20416:1;20413;20409:9;20400:18;;20467:5;20463:2;20460:13;20452:5;20448:2;20444:14;20440:34;20431:43;;;4210:4;20498:5;:14;20494:92;;20535:40;;;;;;;;1132:25:52;;;1105:18;;20535:40:49;986:177:52;20494:92:49;20596:17;20623:19;20701:5;20698:1;20695;20688:19;20675:32;;20749:18;20738:9;20735:33;20720:48;;20792:5;20801:1;20792:10;20788:152;;20873:11;4210:4;20856:5;:13;20855:29;20846:38;;20902:13;;;;;;20788:152;21189:11;21061:21;;;21057:39;21137:20;;;;21126:32;;;21160:45;21122:84;21029:199;;;;21250:13;21004:277;20983:341;;-1:-1:-1;20191:1149:49;;;;:::o;4395:118:17:-;4462:7;4488:3;:11;;4500:5;4488:18;;;;;;;;:::i;:::-;;;;;;;;;4481:25;;4395:118;;;;:::o;3949:258:32:-;4066:7;1224:42;-1:-1:-1;;;;;2092:21:32;;;4089:78;;4130:26;;-1:-1:-1;;;4130:26:32;;-1:-1:-1;;;;;734:55:52;;;4130:26:32;;;716:74:52;4130:16:32;;;;;689:18:52;;4130:26:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4123:33;;;;4089:78;-1:-1:-1;;;;;;4184:16:32;;;3949:258;-1:-1:-1;3949:258:32:o;15079:3983:49:-;15191:14;;;-1:-1:-1;;15680:1:49;15677;15670:20;15719:1;15716;15712:9;15703:18;;15770:5;15766:2;15763:13;15755:5;15751:2;15747:14;15743:34;15734:43;;;15860:5;15869:1;15860:10;15856:138;;15931:11;15923:5;:19;;;;;:::i;:::-;;15914:28;;15970:13;;;;15856:138;16101:11;16092:5;:20;16088:101;;16135:43;;;;;;;;7114:25:52;;;7155:18;;;7148:34;;;7087:18;;16135:43:49;6940:248:52;16088:101:49;16424:17;16547:11;16544:1;16541;16534:25;17956:1;17093;17078:12;;:16;;17063:32;;17201:25;;;;17937:1;:15;;17936:21;;18189;;;18185:25;;18174:36;18258:21;;;18254:25;;18243:36;18328:21;;;18324:25;;18313:36;18398:21;;;18394:25;;18383:36;18468:21;;;18464:25;;18453:36;18539:21;;;18535:25;;;18524:36;;;17045:15;17467;;;17463:29;;;17459:37;;;16653:20;;;16642:32;;;17585:15;;;;16696:21;;17305:19;;;;17576:24;;;;19003:15;;;-1:-1:-1;;;;15079:3983:49:o;2269:1388:17:-;2335:4;2472:19;;;:12;;;:19;;;;;;2506:15;;2502:1149;;2875:21;2899:14;2912:1;2899:10;:14;:::i;:::-;2947:18;;2875:38;;-1:-1:-1;2927:17:17;;2947:22;;2968:1;;2947:22;:::i;:::-;2927:42;;3001:13;2988:9;:26;2984:398;;3034:17;3054:3;:11;;3066:9;3054:22;;;;;;;;:::i;:::-;;;;;;;;;3034:42;;3205:9;3176:3;:11;;3188:13;3176:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;3288:23;;;:12;;;:23;;;;;:36;;;2984:398;3460:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;3552:3;:12;;:19;3565:5;3552:19;;;;;;;;;;;3545:26;;;3593:4;3586:11;;;;;;;2502:1149;3635:5;3628:12;;;;;14:332:52;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;-1:-1:-1;;;;;;223:5:52;219:78;212:5;209:89;199:117;;312:1;309;302:12;801:180;860:6;913:2;901:9;892:7;888:23;884:32;881:52;;;929:1;926;919:12;881:52;-1:-1:-1;952:23:52;;801:180;-1:-1:-1;801:180:52:o;1168:154::-;-1:-1:-1;;;;;1247:5:52;1243:54;1236:5;1233:65;1223:93;;1312:1;1309;1302:12;1223:93;1168:154;:::o;1327:315::-;1395:6;1403;1456:2;1444:9;1435:7;1431:23;1427:32;1424:52;;;1472:1;1469;1462:12;1424:52;1508:9;1495:23;1485:33;;1568:2;1557:9;1553:18;1540:32;1581:31;1606:5;1581:31;:::i;:::-;1631:5;1621:15;;;1327:315;;;;;:::o;1647:247::-;1706:6;1759:2;1747:9;1738:7;1734:23;1730:32;1727:52;;;1775:1;1772;1765:12;1727:52;1814:9;1801:23;1833:31;1858:5;1833:31;:::i;2154:114::-;2238:4;2231:5;2227:16;2220:5;2217:27;2207:55;;2258:1;2255;2248:12;2273:476;2372:6;2380;2388;2441:2;2429:9;2420:7;2416:23;2412:32;2409:52;;;2457:1;2454;2447:12;2409:52;2496:9;2483:23;2515:31;2540:5;2515:31;:::i;:::-;2565:5;-1:-1:-1;2617:2:52;2602:18;;2589:32;;-1:-1:-1;2673:2:52;2658:18;;2645:32;2686:31;2645:32;2686:31;:::i;:::-;2736:7;2726:17;;;2273:476;;;;;:::o;2936:436::-;3052:6;3060;3113:2;3101:9;3092:7;3088:23;3084:32;3081:52;;;3129:1;3126;3119:12;3081:52;3168:9;3155:23;3187:31;3212:5;3187:31;:::i;:::-;3237:5;-1:-1:-1;3294:2:52;3279:18;;3266:32;3307:33;3266:32;3307:33;:::i;3829:118::-;3915:5;3908:13;3901:21;3894:5;3891:32;3881:60;;3937:1;3934;3927:12;3952:241;4008:6;4061:2;4049:9;4040:7;4036:23;4032:32;4029:52;;;4077:1;4074;4067:12;4029:52;4116:9;4103:23;4135:28;4157:5;4135:28;:::i;4198:248::-;4266:6;4274;4327:2;4315:9;4306:7;4302:23;4298:32;4295:52;;;4343:1;4340;4333:12;4295:52;-1:-1:-1;;4366:23:52;;;4436:2;4421:18;;;4408:32;;-1:-1:-1;4198:248:52:o;4942:852::-;5115:6;5123;5131;5139;5147;5200:3;5188:9;5179:7;5175:23;5171:33;5168:53;;;5217:1;5214;5207:12;5168:53;5256:9;5243:23;5275:31;5300:5;5275:31;:::i;:::-;5325:5;-1:-1:-1;5382:2:52;5367:18;;5354:32;5395:33;5354:32;5395:33;:::i;:::-;5447:7;-1:-1:-1;5505:2:52;5490:18;;5477:32;5532:18;5521:30;;5518:50;;;5564:1;5561;5554:12;5518:50;5587:22;;5643:3;5625:16;;;5621:26;5618:46;;;5660:1;5657;5650:12;5618:46;4942:852;;;;-1:-1:-1;5683:2:52;;5732;5717:18;;5704:32;;-1:-1:-1;5783:3:52;5768:19;5755:33;;4942:852;-1:-1:-1;;4942:852:52:o;5799:448::-;5872:6;5880;5888;5941:2;5929:9;5920:7;5916:23;5912:32;5909:52;;;5957:1;5954;5947:12;5909:52;5993:9;5980:23;5970:33;;6053:2;6042:9;6038:18;6025:32;6066:29;6089:5;6066:29;:::i;:::-;6114:5;-1:-1:-1;6171:2:52;6156:18;;6143:32;6184:31;6143:32;6184:31;:::i;6528:407::-;6629:6;6637;6645;6698:2;6686:9;6677:7;6673:23;6669:32;6666:52;;;6714:1;6711;6704:12;6666:52;6753:9;6740:23;6772:31;6797:5;6772:31;:::i;:::-;6822:5;6874:2;6859:18;;6846:32;;-1:-1:-1;6925:2:52;6910:18;;;6897:32;;6528:407;-1:-1:-1;;;6528:407:52:o;7863:184::-;-1:-1:-1;;;7912:1:52;7905:88;8012:4;8009:1;8002:15;8036:4;8033:1;8026:15;8052:422;8141:1;8184:5;8141:1;8198:270;8219:7;8209:8;8206:21;8198:270;;;8278:4;8274:1;8270:6;8266:17;8260:4;8257:27;8254:53;;;8287:18;;:::i;:::-;8337:7;8327:8;8323:22;8320:55;;;8357:16;;;;8320:55;8436:22;;;;8396:15;;;;8198:270;;;8202:3;8052:422;;;;;:::o;8479:806::-;8528:5;8558:8;8548:80;;-1:-1:-1;8599:1:52;8613:5;;8548:80;8647:4;8637:76;;-1:-1:-1;8684:1:52;8698:5;;8637:76;8729:4;8747:1;8742:59;;;;8815:1;8810:130;;;;8722:218;;8742:59;8772:1;8763:10;;8786:5;;;8810:130;8847:3;8837:8;8834:17;8831:43;;;8854:18;;:::i;:::-;-1:-1:-1;;8910:1:52;8896:16;;8925:5;;8722:218;;9024:2;9014:8;9011:16;9005:3;8999:4;8996:13;8992:36;8986:2;8976:8;8973:16;8968:2;8962:4;8959:12;8955:35;8952:77;8949:159;;;-1:-1:-1;9061:19:52;;;9093:5;;8949:159;9140:34;9165:8;9159:4;9140:34;:::i;:::-;9210:6;9206:1;9202:6;9198:19;9189:7;9186:32;9183:58;;;9221:18;;:::i;:::-;9259:20;;8479:806;-1:-1:-1;;;8479:806:52:o;9290:140::-;9348:5;9377:47;9418:4;9408:8;9404:19;9398:4;9377:47;:::i;9435:168::-;9475:7;9541:1;9537;9533:6;9529:14;9526:1;9523:21;9518:1;9511:9;9504:17;9500:45;9497:71;;;9548:18;;:::i;:::-;-1:-1:-1;9588:9:52;;9435:168::o;9608:484::-;9661:3;9699:5;9693:12;9726:6;9721:3;9714:19;9752:4;9781:2;9776:3;9772:12;9765:19;;9818:2;9811:5;9807:14;9839:1;9849:218;9863:6;9860:1;9857:13;9849:218;;;9928:13;;-1:-1:-1;;;;;9924:62:52;9912:75;;10007:12;;;;10042:15;;;;9885:1;9878:9;9849:218;;;-1:-1:-1;10083:3:52;;9608:484;-1:-1:-1;;;;;9608:484:52:o;10097:332::-;10304:6;10293:9;10286:25;10347:2;10342;10331:9;10327:18;10320:30;10267:4;10367:56;10419:2;10408:9;10404:18;10396:6;10367:56;:::i;:::-;10359:64;10097:332;-1:-1:-1;;;;10097:332:52:o;10434:184::-;-1:-1:-1;;;10483:1:52;10476:88;10583:4;10580:1;10573:15;10607:4;10604:1;10597:15;10623:1105;10718:6;10749:2;10792;10780:9;10771:7;10767:23;10763:32;10760:52;;;10808:1;10805;10798:12;10760:52;10841:9;10835:16;10870:18;10911:2;10903:6;10900:14;10897:34;;;10927:1;10924;10917:12;10897:34;10965:6;10954:9;10950:22;10940:32;;11010:7;11003:4;10999:2;10995:13;10991:27;10981:55;;11032:1;11029;11022:12;10981:55;11061:2;11055:9;11083:2;11079;11076:10;11073:36;;;11089:18;;:::i;:::-;11135:2;11132:1;11128:10;11167:2;11161:9;11230:2;11226:7;11221:2;11217;11213:11;11209:25;11201:6;11197:38;11285:6;11273:10;11270:22;11265:2;11253:10;11250:18;11247:46;11244:72;;;11296:18;;:::i;:::-;11332:2;11325:22;11382:18;;;11416:15;;;;-1:-1:-1;11458:11:52;;;11454:20;;;11486:19;;;11483:39;;;11518:1;11515;11508:12;11483:39;11542:11;;;;11562:135;11578:6;11573:3;11570:15;11562:135;;;11644:10;;11632:23;;11595:12;;;;11675;;;;11562:135;;;11716:6;10623:1105;-1:-1:-1;;;;;;;;10623:1105:52:o;11733:128::-;11800:9;;;11821:11;;;11818:37;;;11835:18;;:::i;11866:184::-;-1:-1:-1;;;11915:1:52;11908:88;12015:4;12012:1;12005:15;12039:4;12036:1;12029:15;14180:245;14247:6;14300:2;14288:9;14279:7;14275:23;14271:32;14268:52;;;14316:1;14313;14306:12;14268:52;14348:9;14342:16;14367:28;14389:5;14367:28;:::i;14754:151::-;14844:4;14837:12;;;14823;;;14819:31;;14862:14;;14859:40;;;14879:18;;:::i;14910:131::-;14970:5;14999:36;15026:8;15020:4;14999:36;:::i;15046:184::-;-1:-1:-1;;;15095:1:52;15088:88;15195:4;15192:1;15185:15;15219:4;15216:1;15209:15;15235:274;15275:1;15301;15291:189;;-1:-1:-1;;;15333:1:52;15326:88;15437:4;15434:1;15427:15;15465:4;15462:1;15455:15;15291:189;-1:-1:-1;15494:9:52;;15235:274::o;16680:125::-;16745:9;;;16766:10;;;16763:36;;;16779:18;;:::i;17158:184::-;17228:6;17281:2;17269:9;17260:7;17256:23;17252:32;17249:52;;;17297:1;17294;17287:12;17249:52;-1:-1:-1;17320:16:52;;17158:184;-1:-1:-1;17158:184:52:o;17347:250::-;17432:1;17442:113;17456:6;17453:1;17450:13;17442:113;;;17532:11;;;17526:18;17513:11;;;17506:39;17478:2;17471:10;17442:113;;;-1:-1:-1;;17589:1:52;17571:16;;17564:27;17347:250::o;17602:812::-;18013:25;18008:3;18001:38;17983:3;18068:6;18062:13;18084:75;18152:6;18147:2;18142:3;18138:12;18131:4;18123:6;18119:17;18084:75;:::i;:::-;18223:19;18218:2;18178:16;;;18210:11;;;18203:40;18268:13;;18290:76;18268:13;18352:2;18344:11;;18337:4;18325:17;;18290:76;:::i;:::-;18386:17;18405:2;18382:26;;17602:812;-1:-1:-1;;;;17602:812:52:o;18419:396::-;18568:2;18557:9;18550:21;18531:4;18600:6;18594:13;18643:6;18638:2;18627:9;18623:18;18616:34;18659:79;18731:6;18726:2;18715:9;18711:18;18706:2;18698:6;18694:15;18659:79;:::i;:::-;18799:2;18778:15;-1:-1:-1;;18774:29:52;18759:45;;;;18806:2;18755:54;;18419:396;-1:-1:-1;;18419:396:52:o;18820:247::-;18888:6;18941:2;18929:9;18920:7;18916:23;18912:32;18909:52;;;18957:1;18954;18947:12;18909:52;18989:9;18983:16;19008:29;19031:5;19008:29;:::i;19404:251::-;19474:6;19527:2;19515:9;19506:7;19502:23;19498:32;19495:52;;;19543:1;19540;19533:12;19495:52;19575:9;19569:16;19594:31;19619:5;19594:31;:::i;19660:188::-;19739:13;;19792:30;19781:42;;19771:53;;19761:81;;19838:1;19835;19828:12;19761:81;19660:188;;;:::o;19853:450::-;19940:6;19948;19956;20009:2;19997:9;19988:7;19984:23;19980:32;19977:52;;;20025:1;20022;20015:12;19977:52;20048:40;20078:9;20048:40;:::i;:::-;20038:50;;20107:49;20152:2;20141:9;20137:18;20107:49;:::i;:::-;20097:59;;20199:2;20188:9;20184:18;20178:25;20243:10;20236:5;20232:22;20225:5;20222:33;20212:61;;20269:1;20266;20259:12;20308:179;20386:13;;20439:22;20428:34;;20418:45;;20408:73;;20477:1;20474;20467:12;20492:473;20595:6;20603;20611;20619;20627;20680:3;20668:9;20659:7;20655:23;20651:33;20648:53;;;20697:1;20694;20687:12;20648:53;20720:39;20749:9;20720:39;:::i;:::-;20710:49;;20799:2;20788:9;20784:18;20778:25;20768:35;;20843:2;20832:9;20828:18;20822:25;20812:35;;20887:2;20876:9;20872:18;20866:25;20856:35;;20910:49;20954:3;20943:9;20939:19;20910:49;:::i;:::-;20900:59;;20492:473;;;;;;;;:::o;22418:521::-;22495:4;22501:6;22561:11;22548:25;22655:2;22651:7;22640:8;22624:14;22620:29;22616:43;22596:18;22592:68;22582:96;;22674:1;22671;22664:12;22582:96;22701:33;;22753:20;;;-1:-1:-1;22796:18:52;22785:30;;22782:50;;;22828:1;22825;22818:12;22782:50;22861:4;22849:17;;-1:-1:-1;22892:14:52;22888:27;;;22878:38;;22875:58;;;22929:1;22926;22919:12;22875:58;22418:521;;;;;:::o;22944:271::-;23127:6;23119;23114:3;23101:33;23083:3;23153:16;;23178:13;;;23153:16;22944:271;-1:-1:-1;22944:271:52:o;23568:597::-;23859:6;23848:9;23841:25;23902:6;23897:2;23886:9;23882:18;23875:34;23945:3;23940:2;23929:9;23925:18;23918:31;23822:4;23966:57;24018:3;24007:9;24003:19;23995:6;23966:57;:::i;:::-;-1:-1:-1;;;;;24059:55:52;;;;24054:2;24039:18;;24032:83;-1:-1:-1;24146:3:52;24131:19;24124:35;23958:65;23568:597;-1:-1:-1;;;23568:597:52:o;24170:136::-;24209:3;24237:5;24227:39;;24246:18;;:::i;:::-;-1:-1:-1;;;24282:18:52;;24170:136::o;24672:184::-;-1:-1:-1;;;24721:1:52;24714:88;24821:4;24818:1;24811:15;24845:4;24842:1;24835:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2581800",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "DEFAULT_ADMIN_ROLE()": "262",
            "WETH()": "327",
            "addToWhitelist(address)": "infinite",
            "calculatePercentageFeeInETH(address,uint256,uint256)": "infinite",
            "ethContract()": "328",
            "feePercentage()": "2340",
            "feedRegistry()": "284",
            "getChainlinkRate(address,address)": "infinite",
            "getExchangeRate(address,address)": "infinite",
            "getRoleAdmin(bytes32)": "2538",
            "getRoleMember(bytes32,uint256)": "infinite",
            "getRoleMemberCount(bytes32)": "infinite",
            "getUniswapV2Rate(address,address)": "infinite",
            "grantRole(bytes32,address)": "infinite",
            "hasRole(bytes32,address)": "2728",
            "isEth(address)": "407",
            "isWhitelisted(address)": "2622",
            "paused()": "2405",
            "proxySwapWithFee(address,address,(address,uint256,uint256,bytes),uint256,uint256)": "infinite",
            "removeFromWhitelist(address)": "infinite",
            "renounceRole(bytes32,address)": "infinite",
            "revokeRole(bytes32,address)": "infinite",
            "scaleAmountFromDecimals(uint256,uint8,uint8)": "infinite",
            "scaleAmountFromTokenDecimals(address,uint256,uint8)": "infinite",
            "setContractPaused(bool)": "infinite",
            "setFee(uint256)": "infinite",
            "setVault(address)": "infinite",
            "supportsInterface(bytes4)": "infinite",
            "uniswapV2Router()": "285",
            "vault()": "2447",
            "withdrawERC20(address)": "infinite"
          },
          "internal": {
            "_swapTokensWithChecks(contract IERC20Extension,contract IERC20Extension,struct IForwardingSwapProxy.SwapParams calldata,uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "DEFAULT_ADMIN_ROLE()": "a217fddf",
          "WETH()": "ad5c4648",
          "addToWhitelist(address)": "e43252d7",
          "calculatePercentageFeeInETH(address,uint256,uint256)": "ead8ece8",
          "ethContract()": "3cc562b2",
          "feePercentage()": "a001ecdd",
          "feedRegistry()": "90238c39",
          "getChainlinkRate(address,address)": "5285301c",
          "getExchangeRate(address,address)": "baaa61be",
          "getRoleAdmin(bytes32)": "248a9ca3",
          "getRoleMember(bytes32,uint256)": "9010d07c",
          "getRoleMemberCount(bytes32)": "ca15c873",
          "getUniswapV2Rate(address,address)": "4c712594",
          "grantRole(bytes32,address)": "2f2ff15d",
          "hasRole(bytes32,address)": "91d14854",
          "isEth(address)": "ea9119a5",
          "isWhitelisted(address)": "3af32abf",
          "paused()": "5c975abb",
          "proxySwapWithFee(address,address,(address,uint256,uint256,bytes),uint256,uint256)": "9ca519c6",
          "removeFromWhitelist(address)": "8ab1d681",
          "renounceRole(bytes32,address)": "36568abe",
          "revokeRole(bytes32,address)": "d547741f",
          "scaleAmountFromDecimals(uint256,uint8,uint8)": "a702f2c0",
          "scaleAmountFromTokenDecimals(address,uint256,uint8)": "4021a867",
          "setContractPaused(bool)": "882796f1",
          "setFee(uint256)": "69fe0e2d",
          "setVault(address)": "6817031b",
          "supportsInterface(bytes4)": "01ffc9a7",
          "uniswapV2Router()": "1694505e",
          "vault()": "fbfa77cf",
          "withdrawERC20(address)": "f4f3b200"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeTotal\",\"type\":\"uint256\"}],\"name\":\"ProxySwapWithFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"setter\",\"type\":\"address\"}],\"name\":\"VaultSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20Extension\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Extension\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasRefund\",\"type\":\"uint256\"}],\"name\":\"calculatePercentageFeeInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeTotalInETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeTotalInToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethContract\",\"outputs\":[{\"internalType\":\"contract IERC20Extension\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedRegistry\",\"outputs\":[{\"internalType\":\"contract FeedRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Extension\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Extension\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"getChainlinkRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Extension\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Extension\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Extension\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Extension\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"getUniswapV2Rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Extension\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Extension\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Extension\",\"name\":\"_toToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IForwardingSwapProxy.SwapParams\",\"name\":\"_swapParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_gasRefund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumReturnAmount\",\"type\":\"uint256\"}],\"name\":\"proxySwapWithFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_inputDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_outputDecimals\",\"type\":\"uint8\"}],\"name\":\"scaleAmountFromDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Extension\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_inputDecimals\",\"type\":\"uint8\"}],\"name\":\"scaleAmountFromTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pauseContract\",\"type\":\"bool\"}],\"name\":\"setContractPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Extension\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToWhitelist(address)\":{\"params\":{\"_address\":\"The new address to add the whitelist\"}},\"getChainlinkRate(address,address)\":{\"details\":\"This function returns 0 if no rate can be found\",\"params\":{\"_fromToken\":\"The token the user is swapping with\",\"_toToken\":\"The token the user wwants\"},\"returns\":{\"exchangeRate\":\"The exchange rate or 0 if no rate is found\"}},\"getExchangeRate(address,address)\":{\"details\":\"This function tries to lookup the rate through chainlink first and if the request fails it then looks for a rate through Uniswap V2. If no rate can be found the function reverts.\",\"params\":{\"_fromToken\":\"The token the user is swapping with\",\"_toToken\":\"The token the user wwants\"},\"returns\":{\"_0\":\"The exchange rate\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getUniswapV2Rate(address,address)\":{\"params\":{\"_fromToken\":\"The token the user is swapping with\",\"_toToken\":\"The token the user wwants\"},\"returns\":{\"_0\":\"exchangeRate The exchange rate or 0 if no rate is found\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isEth(address)\":{\"details\":\"Simple helper for determing if the token is ETH\"},\"isWhitelisted(address)\":{\"params\":{\"_address\":\"The address to return the whitelist status for\"},\"returns\":{\"_0\":\"A boolean indiciating if the address is whitelisted\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxySwapWithFee(address,address,(address,uint256,uint256,bytes),uint256,uint256)\":{\"params\":{\"_fromToken\":\"The token the user is swapping from\",\"_gasRefund\":\"The amount in ETH to refund Aurox for proxying the swap\",\"_minimumReturnAmount\":\"The minimum amount of _toToken's to receive for the swap. This is the final return amount for the user, after the fee has been deducted\",\"_swapParams\":\"The required fields to execute the proxy swap\",\"_toToken\":\"The toke the user wants to swap to\"}},\"removeFromWhitelist(address)\":{\"params\":{\"_address\":\"The address to remove from the whitelist\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"scaleAmountFromDecimals(uint256,uint8,uint8)\":{\"details\":\"This function scales the _amount up or down depending on the difference between the _inputDecimals and _outputDecimals\"},\"scaleAmountFromTokenDecimals(address,uint256,uint8)\":{\"details\":\"Function simply gets the decimals for the provided _token parameter and then scales the _amount accordingly\"},\"setContractPaused(bool)\":{\"details\":\"Allows the admin to update the paused status of the contract\"},\"setFee(uint256)\":{\"details\":\"Allows the admin to update the percentage fee applied to trades\"},\"setVault(address)\":{\"details\":\"Allows the admin to update the vault contract\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawERC20(address)\":{\"details\":\"Allows the admin to withdraw any ETH or ERC20 tokens that might've accidentally been locked in the contract\"}},\"title\":\"ForwardingSwapProxy\",\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"addToWhitelist(address)\":{\"notice\":\"This function is called by an owner to add a new contractAddress to the whitelist\"},\"getChainlinkRate(address,address)\":{\"notice\":\"This function tries to calculate the exchange rate between the two tokens using chainlink\"},\"getExchangeRate(address,address)\":{\"notice\":\"This function calculates the exchange rate between the _fromToken and _toToken\"},\"getUniswapV2Rate(address,address)\":{\"notice\":\"This function tries to find a rate using Uniswap V2. It gets the spot ratio between _fromToken and _toToken. This is typically a pretty unsafe operation and susceptible to MEV and sandwich attacks. This is somewhat mitigated because all swap transactions will be submitted through flashbots, which is private RPC.\"},\"isWhitelisted(address)\":{\"notice\":\"This function returns whether a given _address param is within the whitelist\"},\"proxySwapWithFee(address,address,(address,uint256,uint256,bytes),uint256,uint256)\":{\"notice\":\"This method will forward a swap for a user, the user provides the swap parameters and this method will execute them on the users behalf. This method also will take a fee from the user\"},\"removeFromWhitelist(address)\":{\"notice\":\"This function is called by an owner to remove a contractAddress from the whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ForwardingSwapProxy.sol\":\"ForwardingSwapProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(address base, address quote) external view returns (uint8);\\n\\n  function description(address base, address quote) external view returns (string memory);\\n\\n  function version(address base, address quote) external view returns (uint256);\\n\\n  function latestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(address base, address quote) external view returns (int256 answer);\\n\\n  function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\\n\\n  function latestRound(address base, address quote) external view returns (uint256 roundId);\\n\\n  function getAnswer(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (int256 answer);\\n\\n  function getTimestamp(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (uint256 timestamp);\\n\\n  // Registry getters\\n\\n  function getFeed(address base, address quote) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function isFeedEnabled(address aggregator) external view returns (bool);\\n\\n  function getPhase(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (Phase memory phase);\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (uint80 startingRoundId, uint80 endingRoundId);\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 previousRoundId);\\n\\n  function getNextRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 nextRoundId);\\n\\n  // Feed management\\n\\n  function proposeFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  function confirmFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(address base, address quote)\\n    external\\n    view\\n    returns (AggregatorV2V3Interface proposedAggregator);\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // Phases\\n  function getCurrentPhaseId(address base, address quote) external view returns (uint16 currentPhaseId);\\n}\\n\",\"keccak256\":\"0xa783cf3434bd5b5153fe876c37d5d5cb78d4e198f01f184b60ed3392401ddc0d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/BaseSwapProxy.sol\":{\"content\":\"import \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\\\";\\n\\nimport \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\nimport \\\"./libraries/UniswapHelpers.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Extension.sol\\\";\\nimport \\\"./interfaces/IBaseSwapProxy.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\n\\n/// @title BaseSwapProxy\\ncontract BaseSwapProxy is\\n    IBaseSwapProxy,\\n    AccessControlEnumerable,\\n    Pausable,\\n    ReentrancyGuard\\n{\\n    // Using Fixed point calculations for these types\\n    using PRBMathSD59x18 for int256;\\n    using PRBMathUD60x18 for uint256;\\n    using UniswapV2Helpers for IUniswapV2Router02;\\n\\n    IERC20Extension public constant WETH =\\n        IERC20Extension(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    // The ETH address according to 1inch API, this address is used as the address of the native token on all chains\\n    IERC20Extension public constant ethContract =\\n        IERC20Extension(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    // Chainlink feedRegistry\\n    FeedRegistryInterface public constant feedRegistry =\\n        FeedRegistryInterface(0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf);\\n\\n    IUniswapV2Router02 public constant uniswapV2Router =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    IVault public vault;\\n\\n    // Percentage in the form: 100% = 1e18, 1% = 1e16\\n    uint256 public feePercentage;\\n\\n    // Need a receive fallback function so that we can swap _fromToken for ETH to recover the _gasRefund and transfer the refund to the vault\\n    receive() external payable {}\\n\\n    constructor(address _admin) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n    }\\n\\n    /// @dev Simple helper for determing if the token is ETH\\n    function isEth(IERC20Extension _token) public pure returns (bool) {\\n        return _token == ethContract;\\n    }\\n\\n    /// @dev Allows the admin to update the vault contract\\n    function setVault(IVault _vault) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        vault = _vault;\\n\\n        emit VaultSet(_vault, _msgSender());\\n    }\\n\\n    /// @dev Allows the admin to update the paused status of the contract\\n    function setContractPaused(bool _pauseContract)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (_pauseContract) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    /// @dev Allows the admin to withdraw any ETH or ERC20 tokens that might've accidentally been locked in the contract\\n    function withdrawERC20(IERC20Extension _token)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (_token == ethContract) {\\n            uint256 balance = address(this).balance;\\n            require(balance > 0, \\\"Nothing to withdraw\\\");\\n\\n            payable(_msgSender()).transfer(balance);\\n        } else {\\n            uint256 balance = _token.balanceOf(address(this));\\n            require(balance > 0, \\\"Nothing to withdraw\\\");\\n\\n            _token.transfer(_msgSender(), balance);\\n        }\\n    }\\n\\n    /// @dev Allows the admin to update the percentage fee applied to trades\\n    function setFee(uint256 _fee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        feePercentage = _fee;\\n\\n        emit SetFee(_msgSender(), _fee);\\n    }\\n\\n    /// @dev Simplifies the logic of getting decimals for a given token. This function will revert if the given token doesn't have the decimals function, but it seems like a safe assumption that valid tokens will\\n    function _getDecimals(IERC20Extension _token)\\n        internal\\n        view\\n        returns (uint8 decimals)\\n    {\\n        if (_token == ethContract) {\\n            return 18;\\n        }\\n\\n        return _token.decimals();\\n    }\\n\\n    function returnTokenBalance(IERC20Extension _token, address _address)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (!isEth(_token)) {\\n            return _token.balanceOf(_address);\\n        }\\n\\n        return _address.balance;\\n    }\\n\\n    /// @dev A wrapper around the chainlink rate fetching to prevent reverts in the case of missing exchange rates.\\n    function tryGetChainlinkRate(IERC20 _fromToken, IERC20 _toToken)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Because of how chainlink rates work, they never provide rates from ETH -> _toToken, they always go _fromToken -> ETH. So the rate needs to be inverted if the request is in the wrong direction\\n        bool invertRate = _fromToken == ethContract;\\n\\n        if (invertRate) {\\n            _fromToken = _toToken;\\n            _toToken = ethContract;\\n        }\\n\\n        try\\n            feedRegistry.latestRoundData(address(_fromToken), address(_toToken))\\n        returns (\\n            // TODO when should this request be expired? Should I invalidate if the timestamp is too old?\\n            uint80,\\n            int256 chainlinkPrice,\\n            uint256,\\n            uint256,\\n            uint80\\n        ) {\\n            // Un-invert the returned rate\\n            if (invertRate) {\\n                return uint256(1 ether).div(uint256(chainlinkPrice));\\n            }\\n\\n            return uint256(chainlinkPrice);\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /// @dev This function scales the _amount up or down depending on the difference between the _inputDecimals and _outputDecimals\\n    function scaleAmountFromDecimals(\\n        uint256 _amount,\\n        uint8 _inputDecimals,\\n        uint8 _outputDecimals\\n    ) public pure returns (uint256) {\\n        // Scale the price up if there isn't enough decimals\\n        if (_inputDecimals < _outputDecimals) {\\n            return\\n                _amount *\\n                uint256(10**uint256(_outputDecimals - _inputDecimals));\\n            // Similarly scale the price down if there are too many decimals\\n        } else if (_inputDecimals > _outputDecimals) {\\n            return\\n                _amount /\\n                uint256(10**uint256(_inputDecimals - _outputDecimals));\\n        }\\n\\n        // Otherwise if the same decimals return\\n        return _amount;\\n    }\\n\\n    /// @dev Function simply gets the decimals for the provided _token parameter and then scales the _amount accordingly\\n    function scaleAmountFromTokenDecimals(\\n        IERC20Extension _token,\\n        uint256 _amount,\\n        uint8 _inputDecimals\\n    ) public view returns (uint256 amount) {\\n        uint8 decimals = _getDecimals(_token);\\n\\n        return scaleAmountFromDecimals(_amount, _inputDecimals, decimals);\\n    }\\n\\n    function getChainlinkRate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) public view override returns (uint256 exchangeRate) {\\n        // Chainlink doesn't handle WETH, which seems a bit silly, so modify it to use the 0xeee \\\"ETH\\\" contract\\n        if (_fromToken == WETH) {\\n            _fromToken = ethContract;\\n        }\\n        if (_toToken == WETH) {\\n            _toToken = ethContract;\\n        }\\n\\n        // Try to get a direct rate for the provided pair\\n        uint256 directRate = tryGetChainlinkRate(_fromToken, _toToken);\\n\\n        if (directRate != 0) {\\n            // Provide 18 as the current decimals as this is how chainlink returns its price data\\n            return scaleAmountFromTokenDecimals(_toToken, directRate, 18);\\n        }\\n\\n        // If no direct rate exists and either token is ETH, return now\\n        if (_fromToken == ethContract || _toToken == ethContract) {\\n            return 0;\\n        }\\n\\n        // Otherwise try and get a rate by going: _fromToken -> ETH -> _toToken\\n        uint256 toETHRate = tryGetChainlinkRate(_fromToken, ethContract);\\n        uint256 fromETHRate = tryGetChainlinkRate(ethContract, _toToken);\\n\\n        // If both rates returned, calculate the ratio between the two, then scale it to the correct decimals\\n        if (toETHRate != 0 && fromETHRate != 0) {\\n            uint256 derivedRate = toETHRate.mul(fromETHRate);\\n            return scaleAmountFromTokenDecimals(_toToken, derivedRate, 18);\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getUniswapV2Rate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) public view override returns (uint256) {\\n        // Uniswap doesn't handle the ETH contract (0xeee), so update to WETH address for rate fetching\\n        if (_fromToken == ethContract) {\\n            _fromToken = WETH;\\n        }\\n\\n        if (_toToken == ethContract) {\\n            _toToken = WETH;\\n        }\\n\\n        // The rate fetching path\\n        address[] memory path = UniswapV2Helpers._returnUniswapV2Path(\\n            _fromToken,\\n            _toToken\\n        );\\n\\n        // The return path function will return an array of 0x0 addresses if it can't find a valid path\\n        if (path.length == 0) return 0;\\n\\n        // To calculate the amount we need to provide an amountIn. This needs to be normalised based on the amount of decimals in the given _fromToken.\\n        uint8 inputDecimals = _getDecimals(_fromToken);\\n\\n        // Apply the decimals to the amount\\n        uint256 amountIn = 1 * 10**inputDecimals;\\n\\n        // Safely call the method\\n        try uniswapV2Router.getAmountsOut(amountIn, path) returns (\\n            uint256[] memory rate\\n        ) {\\n            return rate[path.length - 1];\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    function getExchangeRate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) public view override returns (uint256) {\\n        // If both tokens are either ETH or WETH, then return 1 ether as they are equivalent in value\\n        if (\\n            (isEth(_fromToken) || _fromToken == WETH) &&\\n            (isEth(_toToken) || _toToken == WETH)\\n        ) {\\n            return 1 ether;\\n        }\\n\\n        // Try and get a rate from chainlink first\\n        uint256 chainlinkRate = getChainlinkRate(_fromToken, _toToken);\\n        if (chainlinkRate != 0) return chainlinkRate;\\n\\n        // Fallback to uniswap V2 if needed\\n        uint256 uniswapV2Rate = getUniswapV2Rate(_fromToken, _toToken);\\n        if (uniswapV2Rate != 0) return uniswapV2Rate;\\n\\n        revert(\\\"No Rate Found\\\");\\n    }\\n\\n    function calculatePercentageFeeInETH(\\n        IERC20Extension _token,\\n        uint256 _amount,\\n        uint256 _gasRefund\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256 feeTotalInETH, uint256 feeTotalInToken)\\n    {\\n        if (_gasRefund == 0 && feePercentage == 0) {\\n            return (0, 0);\\n        }\\n\\n        uint256 exchangeRateToETH = getExchangeRate(_token, WETH);\\n\\n        uint8 tokenDecimals = _getDecimals(_token);\\n\\n        // To calculate the correct value here we must scale the value, either up or down depending on the decimals in _fromToken\\n        uint256 amountInETH = scaleAmountFromDecimals(\\n            _amount.mul(exchangeRateToETH),\\n            tokenDecimals,\\n            18\\n        );\\n\\n        require(\\n            amountInETH > _gasRefund,\\n            \\\"Not swapping enough to recover the gas refund\\\"\\n        );\\n\\n        // Deducting _gasRefund from the amountInETH, because the _gasRefund is already being added on-top of the percentageFeeInETH and we don't want to double-charge\\n        uint256 percentageFeeInETH = (amountInETH - _gasRefund).mul(\\n            feePercentage\\n        );\\n\\n        feeTotalInETH = percentageFeeInETH + _gasRefund;\\n\\n        uint256 scaledFeeTotalFromToken = scaleAmountFromDecimals(\\n            feeTotalInETH,\\n            18,\\n            tokenDecimals\\n        );\\n        uint256 scaledExchangeRate = uint256(1 ether).div(exchangeRateToETH);\\n\\n        feeTotalInToken = scaledFeeTotalFromToken.mul(scaledExchangeRate);\\n    }\\n\\n    /// @notice This method simplifies handling approvals, it also contains logic to detect if the approval balance is greater than the supplied amount (in-case of tokens that decrement the approval balance when the balance is MAX uint256)\\n    /// @param _token The token to do unlimited approvals for\\n    /// @param _token The token to handle approvals for\\n    /// @param _amount The amount to validate the approval balance for\\n    function _handleApprovalFromThis(\\n        IERC20Extension _token,\\n        address _spender,\\n        uint256 _amount\\n    ) internal {\\n        if (isEth(_token)) return;\\n        else if (_token.allowance(address(this), _spender) < _amount) {\\n            _token.approve(_spender, type(uint256).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x10a29c1baac4051529d51d85cd2f3e63bf221097fa3eddd94909379a4e6d490f\"},\"contracts/ForwardingSwapProxy.sol\":{\"content\":\"import \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Extension.sol\\\";\\nimport \\\"./interfaces/IForwardingSwapProxy.sol\\\";\\n\\nimport \\\"./BaseSwapProxy.sol\\\";\\nimport \\\"./Whitelist.sol\\\";\\n\\n/// @title ForwardingSwapProxy\\ncontract ForwardingSwapProxy is\\n    AccessControlEnumerable,\\n    Pausable,\\n    ReentrancyGuard,\\n    BaseSwapProxy,\\n    Whitelist,\\n    IForwardingSwapProxy\\n{\\n    // Using Fixed point calculations for these types\\n    using PRBMathSD59x18 for int256;\\n    using PRBMathUD60x18 for uint256;\\n\\n    using UniswapV2Helpers for IUniswapV2Router02;\\n\\n    constructor(address _admin) BaseSwapProxy(_admin) Whitelist(_admin) {}\\n\\n    function _swapTokensWithChecks(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken,\\n        SwapParams calldata _swapParams,\\n        uint256 _minimumReturnAmount\\n    ) internal returns (uint256 amountReturned) {\\n        require(isWhitelisted(_swapParams.to), \\\"Not whitelisted\\\");\\n\\n        if (isEth(_fromToken)) {\\n            require(msg.value >= _swapParams.value, \\\"Not enough ETH provided\\\");\\n        } else {\\n            _fromToken.transferFrom(\\n                _msgSender(),\\n                address(this),\\n                _swapParams.amount\\n            );\\n\\n            _handleApprovalFromThis(\\n                _fromToken,\\n                _swapParams.to,\\n                _swapParams.amount\\n            );\\n        }\\n\\n        // Taking the balance of _toToken before and after, this ensures compatibility with all swap services. Some might return the value within the data response, but inconsistent across swap providers\\n        uint256 beforeBalanceToToken = returnTokenBalance(\\n            _toToken,\\n            address(this)\\n        );\\n\\n        // Execute the swap\\n        (bool success, ) = _swapParams.to.call{value: msg.value}(\\n            _swapParams.data\\n        );\\n        require(success, \\\"Proxied Swap Failed\\\");\\n\\n        uint256 afterBalanceToToken = returnTokenBalance(\\n            _toToken,\\n            address(this)\\n        );\\n\\n        amountReturned = afterBalanceToToken - beforeBalanceToToken;\\n\\n        require(\\n            amountReturned > _minimumReturnAmount,\\n            \\\"Not enough tokens returned\\\"\\n        );\\n    }\\n\\n    function proxySwapWithFee(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken,\\n        SwapParams calldata _swapParams,\\n        uint256 _gasRefund,\\n        uint256 _minimumReturnAmount\\n    ) external payable override whenNotPaused nonReentrant {\\n        require(_fromToken != _toToken, \\\"_fromToken equal to _toToken\\\");\\n\\n        uint256 amountReturned = _swapTokensWithChecks(\\n            _fromToken,\\n            _toToken,\\n            _swapParams,\\n            _minimumReturnAmount\\n        );\\n\\n        (uint256 feeTotalInETH, ) = calculatePercentageFeeInETH(\\n            _toToken,\\n            amountReturned,\\n            _gasRefund\\n        );\\n\\n        if (isEth(_toToken)) {\\n            amountReturned -= feeTotalInETH;\\n\\n            require(\\n                amountReturned > _minimumReturnAmount,\\n                \\\"Not enough tokens returned\\\"\\n            );\\n\\n            payable(_msgSender()).transfer(amountReturned);\\n        } else {\\n            uint256 swappedAmountIn;\\n\\n            if (feeTotalInETH > 0) {\\n                _handleApprovalFromThis(\\n                    _toToken,\\n                    address(uniswapV2Router),\\n                    amountReturned\\n                );\\n\\n                (swappedAmountIn, ) = uniswapV2Router._swapTokensForExactETH(\\n                    _toToken,\\n                    feeTotalInETH,\\n                    amountReturned,\\n                    address(this)\\n                );\\n            }\\n\\n            amountReturned -= swappedAmountIn;\\n\\n            require(\\n                amountReturned > _minimumReturnAmount,\\n                \\\"Not enough tokens returned\\\"\\n            );\\n\\n            _toToken.transfer(_msgSender(), amountReturned);\\n        }\\n\\n        if (feeTotalInETH > 0) {\\n            // Transfer the vault the fees paid\\n            vault.paidFees{value: feeTotalInETH}(_msgSender(), feeTotalInETH);\\n        }\\n\\n        emit ProxySwapWithFee(\\n            address(_fromToken),\\n            address(_toToken),\\n            isEth(_fromToken) ? msg.value : _swapParams.value,\\n            amountReturned,\\n            feeTotalInETH\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x45f75ff4c93552e7b45d948279a8a2e604ae93f40bc0f6da0d46f6b8b90e2381\"},\"contracts/Whitelist.sol\":{\"content\":\"import \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IWhitelist.sol\\\";\\n\\ncontract Whitelist is IWhitelist, AccessControlEnumerable {\\n    mapping(address => bool) whitelist;\\n\\n    constructor(address _admin) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n    }\\n\\n    function isWhitelisted(address _address)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return whitelist[_address];\\n    }\\n\\n    function addToWhitelist(address _address)\\n        public\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            _address != address(0),\\n            \\\"Can't add the 0x address to the whitelist\\\"\\n        );\\n        whitelist[_address] = true;\\n\\n        emit AddedToWhitelist(_address);\\n    }\\n\\n    function removeFromWhitelist(address _address)\\n        public\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            isWhitelisted(_address),\\n            \\\"Address is missing from the whitelist\\\"\\n        );\\n        delete whitelist[_address];\\n\\n        emit RemovedFromWhitelist(_address);\\n    }\\n}\\n\",\"keccak256\":\"0x343f66f36504e8a17ed4dc924195eedbd005a49b55376ebb2dd82fc19a48ed68\"},\"contracts/interfaces/IBaseSwapProxy.sol\":{\"content\":\"import \\\"./IVault.sol\\\";\\nimport \\\"./IERC20Extension.sol\\\";\\n\\ninterface IBaseSwapProxy {\\n    /// @dev Event used when an admin updates the feePercentage\\n    event SetFee(address indexed from, uint256 fee);\\n    /// @dev Event used when an admin updates the vault contract\\n    event VaultSet(IVault vault, address indexed setter);\\n\\n    /// @notice This function calculates the exchange rate between the _fromToken and _toToken\\n    /// @dev This function tries to lookup the rate through chainlink first and if the request fails it then looks for a rate through Uniswap V2. If no rate can be found the function reverts.\\n    /// @param _fromToken The token the user is swapping with\\n    /// @param _toToken The token the user wwants\\n    /// @return The exchange rate\\n    function getExchangeRate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) external view returns (uint256);\\n\\n    /// @notice This function tries to calculate the exchange rate between the two tokens using chainlink\\n    /// @dev This function returns 0 if no rate can be found\\n    /// @param _fromToken The token the user is swapping with\\n    /// @param _toToken The token the user wwants\\n    /// @return exchangeRate The exchange rate or 0 if no rate is found\\n    function getChainlinkRate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) external view returns (uint256 exchangeRate);\\n\\n    /// @notice This function tries to find a rate using Uniswap V2. It gets the spot ratio between _fromToken and _toToken. This is typically a pretty unsafe operation and susceptible to MEV and sandwich attacks. This is somewhat mitigated because all swap transactions will be submitted through flashbots, which is private RPC.\\n    /// @param _fromToken The token the user is swapping with\\n    /// @param _toToken The token the user wwants\\n    /// @return exchangeRate The exchange rate or 0 if no rate is found\\n    function getUniswapV2Rate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) external view returns (uint256);\\n\\n    /// @notice This function calculates the percentage fee amount in ETH for the _fromToken the user is swapping from. It is deducts the _gasRefund value to ensure the user is charged correctly\\n    /// @param _fromToken The token the user is swapping from\\n    /// @param _amount The amount they are swapping with\\n    /// @param _gasRefund The gas refund required to cover the proxied swap\\n    /// @return feeTotalInETH The fee total priced in ETH\\n    /// @return feeTotalInFromToken The fee total priced in _fromToken\\n    function calculatePercentageFeeInETH(\\n        IERC20Extension _fromToken,\\n        uint256 _amount,\\n        uint256 _gasRefund\\n    )\\n        external\\n        view\\n        returns (uint256 feeTotalInETH, uint256 feeTotalInFromToken);\\n}\\n\",\"keccak256\":\"0x1806dfe69f1938f4d8e47b153b098bfa568085cc77c4ffe900ee4803c7b422db\"},\"contracts/interfaces/IERC20Extension.sol\":{\"content\":\"import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Extension is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xfb20a862d6efe2b94fc8287c01fa008fb41e40f93cb33af19e9aabb19064c9dc\"},\"contracts/interfaces/IForwardingSwapProxy.sol\":{\"content\":\"import \\\"./IERC20Extension.sol\\\";\\n\\n/// @title IForwardingSwapProxy\\n/// @notice This swap proxy contract is for forwarding swaps, meaning the user will provide a data field and a destination contract and this contract will then execute it on the users behalf. Other parameters are provided to this contract to allow for safe validation of the users request.\\ninterface IForwardingSwapProxy {\\n    /// @dev Event used whenever a user executes a proxy swap through the contract\\n    event ProxySwapWithFee(\\n        address indexed _fromToken,\\n        address indexed _toToken,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 feeTotal\\n    );\\n\\n    /// @notice Struct containing the required fields to forward a swap transaction\\n    /// @param to The address of where to execute the proxy swap\\n    /// @param amount The amount to swap, this is 0 if the user is swapping ETH otherwise its the amount of tokens\\n    /// @param value The value in ETH if the user is swapping from ETH. Amount will be 0 in this case\\n    /// @param data The data field of the swap transaction\\n    struct SwapParams {\\n        address to;\\n        uint256 amount;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice This method will forward a swap for a user, the user provides the swap parameters and this method will execute them on the users behalf. This method also will take a fee from the user\\n    /// @param _fromToken The token the user is swapping from\\n    /// @param _toToken The toke the user wants to swap to\\n    /// @param _swapParams The required fields to execute the proxy swap\\n    /// @param _gasRefund The amount in ETH to refund Aurox for proxying the swap\\n    /// @param _minimumReturnAmount The minimum amount of _toToken's to receive for the swap. This is the final return amount for the user, after the fee has been deducted\\n    function proxySwapWithFee(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken,\\n        SwapParams calldata _swapParams,\\n        uint256 _gasRefund,\\n        uint256 _minimumReturnAmount\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xfd84a1dd91e99462a374f1ef3b4cc04e9bfeba5254e0433b1746be967649cce1\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"interface IVault {\\n    /// @dev Event used when the contract receives ETH\\n    event Received(address indexed from, uint256 value);\\n    /// @dev Event used when the contract is paid ETH, this will occur when fees have been deducted and transferred to the Vault contract for holding\\n    event PaidFees(address indexed from, uint256 value);\\n    /// @dev Event used whenever an admin claims fees from the contract\\n    event FeesClaimed(address indexed from, uint256 value);\\n\\n    /// @dev To allow the contract to receive ETH\\n    receive() external payable;\\n\\n    /// @notice Allows an admin to claim the ETH balance of the contract\\n    function claimFees() external;\\n\\n    /// @notice This function is called whenever fees have been deducted from a user and transffered into the Vault for holding\\n    /// @param _sender The user who has been deducted a fee\\n    /// @param _amount The fee amount\\n    function paidFees(address _sender, uint256 _amount) external payable;\\n\\n    /// @notice Allows an admin to set the balance limit for wallets that have the HOT_WALLET role\\n    /// @param _walletBalanceLimit The updated balance limit\\n    function setWalletBalanceLimit(uint256 _walletBalanceLimit) external;\\n\\n    /// @notice Allows an admin to top up registered HOT_WALLETS, these wallets will be used for sponosoring transactions and this method allows updating all of them with a single contract call\\n    function topUpHotWallets() external payable;\\n\\n    /// @notice This allows us to easily see the total amount of ETH required to top-up all hot wallets. Used before calling the topUpHotWallets function\\n    /// @return totalETH The total amount of ETH required\\n    function ethRequiredForHotWalletTopup()\\n        external\\n        view\\n        returns (uint256 totalETH);\\n}\\n\",\"keccak256\":\"0x1c92b5dfbb5b36bb4788219060d928bf373e1c9a46c132fd9d8556675d9b8df6\"},\"contracts/interfaces/IWhitelist.sol\":{\"content\":\"interface IWhitelist {\\n    /// @dev Event emitted whenever a new contractAddress is added to the whitelist\\n    event AddedToWhitelist(address indexed contractAddress);\\n\\n    /// @dev Event emitted whenever a contractAddress is removed from the whitelist\\n    event RemovedFromWhitelist(address indexed contractAddress);\\n\\n    /// @notice This function returns whether a given _address param is within the whitelist\\n    /// @param _address The address to return the whitelist status for\\n    /// @return A boolean indiciating if the address is whitelisted\\n    function isWhitelisted(address _address) external returns (bool);\\n\\n    /// @notice This function is called by an owner to add a new contractAddress to the whitelist\\n    /// @param _address The new address to add the whitelist\\n    function addToWhitelist(address _address) external;\\n\\n    /// @notice This function is called by an owner to remove a contractAddress from the whitelist\\n    /// @param _address The address to remove from the whitelist\\n    function removeFromWhitelist(address _address) external;\\n}\\n\",\"keccak256\":\"0xbb27bb396ceb23f78c1061ce3410cfbe29ebd39e874edc279ca5f26f8432439e\"},\"contracts/libraries/UniswapHelpers.sol\":{\"content\":\"import \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./UniswapV2Helpers.sol\\\";\\n\\nlibrary UniswapHelpers {\\n    using UniswapV2Helpers for IUniswapV2Router02;\\n\\n    IUniswapV2Router02 constant uniswapV2Router =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    // The ETH address according to 1inch API, this address is used as the address of the native token on all chains\\n    IERC20 constant ETH = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    /// @dev In handler meaning, we are providing an exact amount of input to receive a variable amount of output. This function also handles the routing to the appropriate uniswap V2 function\\n    function _exactInUniswapHandler(\\n        IERC20 _fromToken,\\n        IERC20 _toToken,\\n        uint256 _amountIn,\\n        uint256 _amountOutMinimum\\n    ) internal returns (uint256, uint256) {\\n        if (_fromToken == ETH) {\\n            revert(\\\"Swapping from ETH not supported\\\");\\n            // ! Deprecated currently\\n            // (\\n            //     uint256 swappedAmountIn,\\n            //     uint256 swappedAmountOut\\n            // ) = uniswapV2Router._swapExactETHForTokens(\\n            //         _fromToken,\\n            //         _amountIn,\\n            //         _amountOutMinimum,\\n            //         address(this)\\n            //     );\\n\\n            // return (swappedAmountIn, swappedAmountOut);\\n        } else if (_toToken == ETH) {\\n            (\\n                uint256 swappedAmountIn,\\n                uint256 swappedAmountOut\\n            ) = uniswapV2Router._swapExactTokensForETH(\\n                    _fromToken,\\n                    _amountIn,\\n                    _amountOutMinimum,\\n                    address(this)\\n                );\\n\\n            return (swappedAmountIn, swappedAmountOut);\\n        } else {\\n            (\\n                uint256 swappedAmountIn,\\n                uint256 swappedAmountOut\\n            ) = uniswapV2Router._swapExactTokensForTokens(\\n                    _fromToken,\\n                    _toToken,\\n                    _amountIn,\\n                    _amountOutMinimum,\\n                    address(this)\\n                );\\n            return (swappedAmountIn, swappedAmountOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xffec78f63c95d83946be97315de5817f1d3064381d9d53169ef20497cab1388f\"},\"contracts/libraries/UniswapV2Helpers.sol\":{\"content\":\"import \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IERC20Extension.sol\\\";\\n\\nlibrary UniswapV2Helpers {\\n    IERC20Extension constant WETH =\\n        IERC20Extension(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    IUniswapV2Factory constant uniswapV2Factory =\\n        IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n\\n    /// @dev Simple wrapper for the swapTokensForExactETH uniswap V2 function\\n    function _swapTokensForExactETH(\\n        IUniswapV2Router02 _uniswapV2Router,\\n        IERC20 _token,\\n        uint256 _amountOut,\\n        uint256 _amountInMaximum,\\n        address _to\\n    ) internal returns (uint256 amountIn, uint256 amountOut) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(_token);\\n        path[1] = address(WETH);\\n\\n        uint256[] memory amounts = _uniswapV2Router.swapTokensForExactETH(\\n            _amountOut,\\n            _amountInMaximum,\\n            path,\\n            _to,\\n            block.timestamp\\n        );\\n\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    /// @notice This function calculates a path for swapping _fromToken for _toToken\\n    function _returnUniswapV2Path(IERC20 _fromToken, IERC20 _toToken)\\n        internal\\n        view\\n        returns (address[] memory path)\\n    {\\n        // Try to find a direct pair address for the given tokens\\n        try\\n            uniswapV2Factory.getPair(address(_fromToken), address(_toToken))\\n        returns (address _pairAddress) {\\n            // If a direct pair exists, return the direct path\\n            if (_pairAddress != address(0)) {\\n                // Been finding some direct pairs have old pools no one uses, so get the timestamp when the pool was used last\\n                (, , uint256 blocktimestampLast) = IUniswapV2Pair(_pairAddress)\\n                    .getReserves();\\n\\n                // If the pool has been used within the last day, then route through the pool. If its been inactive longer than a day then its highly likely its a low liquidity pool and we don't want to route through it.\\n\\n                // This is a cheap solution, it could pull the reserves from the pool and calculate the amount of stored liquidity in the pool in ETH and invalidate if less than a liquidity threshold. But that would cost a lot more gas and this seems ok for the current MVP\\n                if (block.timestamp - blocktimestampLast < 86400) {\\n                    path = new address[](2);\\n\\n                    path[0] = address(_fromToken);\\n                    path[1] = address(_toToken);\\n\\n                    return path;\\n                }\\n            }\\n        } catch {}\\n\\n        // Return an empty path here, the route can't be handled if either of the tokens are WETH\\n        if (_fromToken == WETH || _toToken == WETH) {\\n            return path;\\n        }\\n\\n        // Otherwise create a path through WETH\\n        path = new address[](3);\\n\\n        path[0] = address(_fromToken);\\n        path[1] = address(WETH);\\n        path[2] = address(_toToken);\\n    }\\n\\n    /// @dev Simple wrapper for the swapExactTokensForTokens uniswap V2 function\\n    function _swapExactTokensForTokens(\\n        IUniswapV2Router02 _uniswapV2Router,\\n        IERC20 _fromToken,\\n        IERC20 _toToken,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address _to\\n    ) internal returns (uint256 amountIn, uint256 amountOut) {\\n        address[] memory path = _returnUniswapV2Path(_fromToken, _toToken);\\n\\n        uint256[] memory amounts = _uniswapV2Router.swapExactTokensForTokens(\\n            _amountIn,\\n            _amountOutMin,\\n            path,\\n            _to,\\n            block.timestamp\\n        );\\n\\n        // Return the first item and the last item, so that it adheres to the path length\\n        return (amounts[0], amounts[path.length - 1]);\\n    }\\n\\n    /// @dev Simple wrapper for the swapExactETHForTokens uniswap V2 function\\n    function _swapExactETHForTokens(\\n        IUniswapV2Router02 _uniswapV2Router,\\n        IERC20 _token,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address _to\\n    ) internal returns (uint256 amountIn, uint256 amountOut) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(WETH);\\n        path[1] = address(_token);\\n\\n        uint256[] memory amounts = _uniswapV2Router.swapExactETHForTokens{\\n            value: _amountIn\\n        }(_amountOutMin, path, _to, block.timestamp);\\n\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    /// @dev Simple wrapper for the swapExactTokensForETH uniswap V2 function\\n    function _swapExactTokensForETH(\\n        IUniswapV2Router02 _uniswapV2Router,\\n        IERC20 _token,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address _to\\n    ) internal returns (uint256 amountIn, uint256 amountOut) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(_token);\\n        path[1] = address(WETH);\\n\\n        uint256[] memory amounts = _uniswapV2Router.swapExactTokensForETH(\\n            _amountIn,\\n            _amountOutMin,\\n            path,\\n            _to,\\n            block.timestamp\\n        );\\n\\n        return (amounts[0], amounts[1]);\\n    }\\n}\\n\",\"keccak256\":\"0x950dab0aa1f2f4d73ba0061b4e88fb049f1e5b83f40c811283f23a54e0cc96b1\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 438,
            "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)433_storage)"
          },
          {
            "astId": 741,
            "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)2341_storage)"
          },
          {
            "astId": 963,
            "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
            "label": "_paused",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1048,
            "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
            "label": "_status",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4026,
            "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
            "label": "vault",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IVault)6373"
          },
          {
            "astId": 4028,
            "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
            "label": "feePercentage",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5577,
            "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
            "label": "whitelist",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "base": "t_bytes32",
            "encoding": "dynamic_array",
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IVault)6373": {
            "encoding": "inplace",
            "label": "contract IVault",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)2341_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
            "numberOfBytes": "32",
            "value": "t_struct(AddressSet)2341_storage"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)433_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct AccessControl.RoleData)",
            "numberOfBytes": "32",
            "value": "t_struct(RoleData)433_storage"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_struct(AddressSet)2341_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "astId": 2340,
                "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
                "label": "_inner",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(Set)2040_storage"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(RoleData)433_storage": {
            "encoding": "inplace",
            "label": "struct AccessControl.RoleData",
            "members": [
              {
                "astId": 430,
                "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
                "label": "members",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 432,
                "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
                "label": "adminRole",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes32"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)2040_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "astId": 2035,
                "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
                "label": "_values",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "astId": 2039,
                "contract": "contracts/ForwardingSwapProxy.sol:ForwardingSwapProxy",
                "label": "_indexes",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "errors": {
          "PRBMath__MulDivFixedPointOverflow(uint256)": [
            {
              "notice": "Emitted when the result overflows uint256."
            }
          ],
          "PRBMath__MulDivOverflow(uint256,uint256)": [
            {
              "notice": "Emitted when the result overflows uint256."
            }
          ]
        },
        "kind": "user",
        "methods": {
          "addToWhitelist(address)": {
            "notice": "This function is called by an owner to add a new contractAddress to the whitelist"
          },
          "getChainlinkRate(address,address)": {
            "notice": "This function tries to calculate the exchange rate between the two tokens using chainlink"
          },
          "getExchangeRate(address,address)": {
            "notice": "This function calculates the exchange rate between the _fromToken and _toToken"
          },
          "getUniswapV2Rate(address,address)": {
            "notice": "This function tries to find a rate using Uniswap V2. It gets the spot ratio between _fromToken and _toToken. This is typically a pretty unsafe operation and susceptible to MEV and sandwich attacks. This is somewhat mitigated because all swap transactions will be submitted through flashbots, which is private RPC."
          },
          "isWhitelisted(address)": {
            "notice": "This function returns whether a given _address param is within the whitelist"
          },
          "proxySwapWithFee(address,address,(address,uint256,uint256,bytes),uint256,uint256)": {
            "notice": "This method will forward a swap for a user, the user provides the swap parameters and this method will execute them on the users behalf. This method also will take a fee from the user"
          },
          "removeFromWhitelist(address)": {
            "notice": "This function is called by an owner to remove a contractAddress from the whitelist"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/BaseSwapProxy.sol\": {\n      \"content\": \"import \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\\\";\\n\\nimport \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\nimport \\\"./libraries/UniswapHelpers.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Extension.sol\\\";\\nimport \\\"./interfaces/IBaseSwapProxy.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\n\\n/// @title BaseSwapProxy\\ncontract BaseSwapProxy is\\n    IBaseSwapProxy,\\n    AccessControlEnumerable,\\n    Pausable,\\n    ReentrancyGuard\\n{\\n    // Using Fixed point calculations for these types\\n    using PRBMathSD59x18 for int256;\\n    using PRBMathUD60x18 for uint256;\\n    using UniswapV2Helpers for IUniswapV2Router02;\\n\\n    IERC20Extension public constant WETH =\\n        IERC20Extension(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    // The ETH address according to 1inch API, this address is used as the address of the native token on all chains\\n    IERC20Extension public constant ethContract =\\n        IERC20Extension(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    // Chainlink feedRegistry\\n    FeedRegistryInterface public constant feedRegistry =\\n        FeedRegistryInterface(0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf);\\n\\n    IUniswapV2Router02 public constant uniswapV2Router =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    IVault public vault;\\n\\n    // Percentage in the form: 100% = 1e18, 1% = 1e16\\n    uint256 public feePercentage;\\n\\n    // Need a receive fallback function so that we can swap _fromToken for ETH to recover the _gasRefund and transfer the refund to the vault\\n    receive() external payable {}\\n\\n    constructor(address _admin) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n    }\\n\\n    /// @dev Simple helper for determing if the token is ETH\\n    function isEth(IERC20Extension _token) public pure returns (bool) {\\n        return _token == ethContract;\\n    }\\n\\n    /// @dev Allows the admin to update the vault contract\\n    function setVault(IVault _vault) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        vault = _vault;\\n\\n        emit VaultSet(_vault, _msgSender());\\n    }\\n\\n    /// @dev Allows the admin to update the paused status of the contract\\n    function setContractPaused(bool _pauseContract)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (_pauseContract) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    /// @dev Allows the admin to withdraw any ETH or ERC20 tokens that might've accidentally been locked in the contract\\n    function withdrawERC20(IERC20Extension _token)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (_token == ethContract) {\\n            uint256 balance = address(this).balance;\\n            require(balance > 0, \\\"Nothing to withdraw\\\");\\n\\n            payable(_msgSender()).transfer(balance);\\n        } else {\\n            uint256 balance = _token.balanceOf(address(this));\\n            require(balance > 0, \\\"Nothing to withdraw\\\");\\n\\n            _token.transfer(_msgSender(), balance);\\n        }\\n    }\\n\\n    /// @dev Allows the admin to update the percentage fee applied to trades\\n    function setFee(uint256 _fee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        feePercentage = _fee;\\n\\n        emit SetFee(_msgSender(), _fee);\\n    }\\n\\n    /// @dev Simplifies the logic of getting decimals for a given token. This function will revert if the given token doesn't have the decimals function, but it seems like a safe assumption that valid tokens will\\n    function _getDecimals(IERC20Extension _token)\\n        internal\\n        view\\n        returns (uint8 decimals)\\n    {\\n        if (_token == ethContract) {\\n            return 18;\\n        }\\n\\n        return _token.decimals();\\n    }\\n\\n    function returnTokenBalance(IERC20Extension _token, address _address)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (!isEth(_token)) {\\n            return _token.balanceOf(_address);\\n        }\\n\\n        return _address.balance;\\n    }\\n\\n    /// @dev A wrapper around the chainlink rate fetching to prevent reverts in the case of missing exchange rates.\\n    function tryGetChainlinkRate(IERC20 _fromToken, IERC20 _toToken)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Because of how chainlink rates work, they never provide rates from ETH -> _toToken, they always go _fromToken -> ETH. So the rate needs to be inverted if the request is in the wrong direction\\n        bool invertRate = _fromToken == ethContract;\\n\\n        if (invertRate) {\\n            _fromToken = _toToken;\\n            _toToken = ethContract;\\n        }\\n\\n        try\\n            feedRegistry.latestRoundData(address(_fromToken), address(_toToken))\\n        returns (\\n            // TODO when should this request be expired? Should I invalidate if the timestamp is too old?\\n            uint80,\\n            int256 chainlinkPrice,\\n            uint256,\\n            uint256,\\n            uint80\\n        ) {\\n            // Un-invert the returned rate\\n            if (invertRate) {\\n                return uint256(1 ether).div(uint256(chainlinkPrice));\\n            }\\n\\n            return uint256(chainlinkPrice);\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /// @dev This function scales the _amount up or down depending on the difference between the _inputDecimals and _outputDecimals\\n    function scaleAmountFromDecimals(\\n        uint256 _amount,\\n        uint8 _inputDecimals,\\n        uint8 _outputDecimals\\n    ) public pure returns (uint256) {\\n        // Scale the price up if there isn't enough decimals\\n        if (_inputDecimals < _outputDecimals) {\\n            return\\n                _amount *\\n                uint256(10**uint256(_outputDecimals - _inputDecimals));\\n            // Similarly scale the price down if there are too many decimals\\n        } else if (_inputDecimals > _outputDecimals) {\\n            return\\n                _amount /\\n                uint256(10**uint256(_inputDecimals - _outputDecimals));\\n        }\\n\\n        // Otherwise if the same decimals return\\n        return _amount;\\n    }\\n\\n    /// @dev Function simply gets the decimals for the provided _token parameter and then scales the _amount accordingly\\n    function scaleAmountFromTokenDecimals(\\n        IERC20Extension _token,\\n        uint256 _amount,\\n        uint8 _inputDecimals\\n    ) public view returns (uint256 amount) {\\n        uint8 decimals = _getDecimals(_token);\\n\\n        return scaleAmountFromDecimals(_amount, _inputDecimals, decimals);\\n    }\\n\\n    function getChainlinkRate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) public view override returns (uint256 exchangeRate) {\\n        // Chainlink doesn't handle WETH, which seems a bit silly, so modify it to use the 0xeee \\\"ETH\\\" contract\\n        if (_fromToken == WETH) {\\n            _fromToken = ethContract;\\n        }\\n        if (_toToken == WETH) {\\n            _toToken = ethContract;\\n        }\\n\\n        // Try to get a direct rate for the provided pair\\n        uint256 directRate = tryGetChainlinkRate(_fromToken, _toToken);\\n\\n        if (directRate != 0) {\\n            // Provide 18 as the current decimals as this is how chainlink returns its price data\\n            return scaleAmountFromTokenDecimals(_toToken, directRate, 18);\\n        }\\n\\n        // If no direct rate exists and either token is ETH, return now\\n        if (_fromToken == ethContract || _toToken == ethContract) {\\n            return 0;\\n        }\\n\\n        // Otherwise try and get a rate by going: _fromToken -> ETH -> _toToken\\n        uint256 toETHRate = tryGetChainlinkRate(_fromToken, ethContract);\\n        uint256 fromETHRate = tryGetChainlinkRate(ethContract, _toToken);\\n\\n        // If both rates returned, calculate the ratio between the two, then scale it to the correct decimals\\n        if (toETHRate != 0 && fromETHRate != 0) {\\n            uint256 derivedRate = toETHRate.mul(fromETHRate);\\n            return scaleAmountFromTokenDecimals(_toToken, derivedRate, 18);\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getUniswapV2Rate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) public view override returns (uint256) {\\n        // Uniswap doesn't handle the ETH contract (0xeee), so update to WETH address for rate fetching\\n        if (_fromToken == ethContract) {\\n            _fromToken = WETH;\\n        }\\n\\n        if (_toToken == ethContract) {\\n            _toToken = WETH;\\n        }\\n\\n        // The rate fetching path\\n        address[] memory path = UniswapV2Helpers._returnUniswapV2Path(\\n            _fromToken,\\n            _toToken\\n        );\\n\\n        // The return path function will return an array of 0x0 addresses if it can't find a valid path\\n        if (path.length == 0) return 0;\\n\\n        // To calculate the amount we need to provide an amountIn. This needs to be normalised based on the amount of decimals in the given _fromToken.\\n        uint8 inputDecimals = _getDecimals(_fromToken);\\n\\n        // Apply the decimals to the amount\\n        uint256 amountIn = 1 * 10**inputDecimals;\\n\\n        // Safely call the method\\n        try uniswapV2Router.getAmountsOut(amountIn, path) returns (\\n            uint256[] memory rate\\n        ) {\\n            return rate[path.length - 1];\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    function getExchangeRate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) public view override returns (uint256) {\\n        // If both tokens are either ETH or WETH, then return 1 ether as they are equivalent in value\\n        if (\\n            (isEth(_fromToken) || _fromToken == WETH) &&\\n            (isEth(_toToken) || _toToken == WETH)\\n        ) {\\n            return 1 ether;\\n        }\\n\\n        // Try and get a rate from chainlink first\\n        uint256 chainlinkRate = getChainlinkRate(_fromToken, _toToken);\\n        if (chainlinkRate != 0) return chainlinkRate;\\n\\n        // Fallback to uniswap V2 if needed\\n        uint256 uniswapV2Rate = getUniswapV2Rate(_fromToken, _toToken);\\n        if (uniswapV2Rate != 0) return uniswapV2Rate;\\n\\n        revert(\\\"No Rate Found\\\");\\n    }\\n\\n    function calculatePercentageFeeInETH(\\n        IERC20Extension _token,\\n        uint256 _amount,\\n        uint256 _gasRefund\\n    )\\n        public\\n        view\\n        override\\n        returns (uint256 feeTotalInETH, uint256 feeTotalInToken)\\n    {\\n        if (_gasRefund == 0 && feePercentage == 0) {\\n            return (0, 0);\\n        }\\n\\n        uint256 exchangeRateToETH = getExchangeRate(_token, WETH);\\n\\n        uint8 tokenDecimals = _getDecimals(_token);\\n\\n        // To calculate the correct value here we must scale the value, either up or down depending on the decimals in _fromToken\\n        uint256 amountInETH = scaleAmountFromDecimals(\\n            _amount.mul(exchangeRateToETH),\\n            tokenDecimals,\\n            18\\n        );\\n\\n        require(\\n            amountInETH > _gasRefund,\\n            \\\"Not swapping enough to recover the gas refund\\\"\\n        );\\n\\n        // Deducting _gasRefund from the amountInETH, because the _gasRefund is already being added on-top of the percentageFeeInETH and we don't want to double-charge\\n        uint256 percentageFeeInETH = (amountInETH - _gasRefund).mul(\\n            feePercentage\\n        );\\n\\n        feeTotalInETH = percentageFeeInETH + _gasRefund;\\n\\n        uint256 scaledFeeTotalFromToken = scaleAmountFromDecimals(\\n            feeTotalInETH,\\n            18,\\n            tokenDecimals\\n        );\\n        uint256 scaledExchangeRate = uint256(1 ether).div(exchangeRateToETH);\\n\\n        feeTotalInToken = scaledFeeTotalFromToken.mul(scaledExchangeRate);\\n    }\\n\\n    /// @notice This method simplifies handling approvals, it also contains logic to detect if the approval balance is greater than the supplied amount (in-case of tokens that decrement the approval balance when the balance is MAX uint256)\\n    /// @param _token The token to do unlimited approvals for\\n    /// @param _token The token to handle approvals for\\n    /// @param _amount The amount to validate the approval balance for\\n    function _handleApprovalFromThis(\\n        IERC20Extension _token,\\n        address _spender,\\n        uint256 _amount\\n    ) internal {\\n        if (isEth(_token)) return;\\n        else if (_token.allowance(address(this), _spender) < _amount) {\\n            _token.approve(_spender, type(uint256).max);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(address base, address quote) external view returns (uint8);\\n\\n  function description(address base, address quote) external view returns (string memory);\\n\\n  function version(address base, address quote) external view returns (uint256);\\n\\n  function latestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(address base, address quote) external view returns (int256 answer);\\n\\n  function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\\n\\n  function latestRound(address base, address quote) external view returns (uint256 roundId);\\n\\n  function getAnswer(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (int256 answer);\\n\\n  function getTimestamp(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  ) external view returns (uint256 timestamp);\\n\\n  // Registry getters\\n\\n  function getFeed(address base, address quote) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function isFeedEnabled(address aggregator) external view returns (bool);\\n\\n  function getPhase(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (Phase memory phase);\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (AggregatorV2V3Interface aggregator);\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  ) external view returns (uint80 startingRoundId, uint80 endingRoundId);\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 previousRoundId);\\n\\n  function getNextRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external view returns (uint80 nextRoundId);\\n\\n  // Feed management\\n\\n  function proposeFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  function confirmFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(address base, address quote)\\n    external\\n    view\\n    returns (AggregatorV2V3Interface proposedAggregator);\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData(address base, address quote)\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // Phases\\n  function getCurrentPhaseId(address base, address quote) external view returns (uint16 currentPhaseId);\\n}\\n\"\n    },\n    \"prb-math/contracts/PRBMathSD59x18.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)÷y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\"\n    },\n    \"prb-math/contracts/PRBMathUD60x18.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/UniswapHelpers.sol\": {\n      \"content\": \"import \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./UniswapV2Helpers.sol\\\";\\n\\nlibrary UniswapHelpers {\\n    using UniswapV2Helpers for IUniswapV2Router02;\\n\\n    IUniswapV2Router02 constant uniswapV2Router =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    // The ETH address according to 1inch API, this address is used as the address of the native token on all chains\\n    IERC20 constant ETH = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    /// @dev In handler meaning, we are providing an exact amount of input to receive a variable amount of output. This function also handles the routing to the appropriate uniswap V2 function\\n    function _exactInUniswapHandler(\\n        IERC20 _fromToken,\\n        IERC20 _toToken,\\n        uint256 _amountIn,\\n        uint256 _amountOutMinimum\\n    ) internal returns (uint256, uint256) {\\n        if (_fromToken == ETH) {\\n            revert(\\\"Swapping from ETH not supported\\\");\\n            // ! Deprecated currently\\n            // (\\n            //     uint256 swappedAmountIn,\\n            //     uint256 swappedAmountOut\\n            // ) = uniswapV2Router._swapExactETHForTokens(\\n            //         _fromToken,\\n            //         _amountIn,\\n            //         _amountOutMinimum,\\n            //         address(this)\\n            //     );\\n\\n            // return (swappedAmountIn, swappedAmountOut);\\n        } else if (_toToken == ETH) {\\n            (\\n                uint256 swappedAmountIn,\\n                uint256 swappedAmountOut\\n            ) = uniswapV2Router._swapExactTokensForETH(\\n                    _fromToken,\\n                    _amountIn,\\n                    _amountOutMinimum,\\n                    address(this)\\n                );\\n\\n            return (swappedAmountIn, swappedAmountOut);\\n        } else {\\n            (\\n                uint256 swappedAmountIn,\\n                uint256 swappedAmountOut\\n            ) = uniswapV2Router._swapExactTokensForTokens(\\n                    _fromToken,\\n                    _toToken,\\n                    _amountIn,\\n                    _amountOutMinimum,\\n                    address(this)\\n                );\\n            return (swappedAmountIn, swappedAmountOut);\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC20Extension.sol\": {\n      \"content\": \"import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Extension is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/interfaces/IBaseSwapProxy.sol\": {\n      \"content\": \"import \\\"./IVault.sol\\\";\\nimport \\\"./IERC20Extension.sol\\\";\\n\\ninterface IBaseSwapProxy {\\n    /// @dev Event used when an admin updates the feePercentage\\n    event SetFee(address indexed from, uint256 fee);\\n    /// @dev Event used when an admin updates the vault contract\\n    event VaultSet(IVault vault, address indexed setter);\\n\\n    /// @notice This function calculates the exchange rate between the _fromToken and _toToken\\n    /// @dev This function tries to lookup the rate through chainlink first and if the request fails it then looks for a rate through Uniswap V2. If no rate can be found the function reverts.\\n    /// @param _fromToken The token the user is swapping with\\n    /// @param _toToken The token the user wwants\\n    /// @return The exchange rate\\n    function getExchangeRate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) external view returns (uint256);\\n\\n    /// @notice This function tries to calculate the exchange rate between the two tokens using chainlink\\n    /// @dev This function returns 0 if no rate can be found\\n    /// @param _fromToken The token the user is swapping with\\n    /// @param _toToken The token the user wwants\\n    /// @return exchangeRate The exchange rate or 0 if no rate is found\\n    function getChainlinkRate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) external view returns (uint256 exchangeRate);\\n\\n    /// @notice This function tries to find a rate using Uniswap V2. It gets the spot ratio between _fromToken and _toToken. This is typically a pretty unsafe operation and susceptible to MEV and sandwich attacks. This is somewhat mitigated because all swap transactions will be submitted through flashbots, which is private RPC.\\n    /// @param _fromToken The token the user is swapping with\\n    /// @param _toToken The token the user wwants\\n    /// @return exchangeRate The exchange rate or 0 if no rate is found\\n    function getUniswapV2Rate(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken\\n    ) external view returns (uint256);\\n\\n    /// @notice This function calculates the percentage fee amount in ETH for the _fromToken the user is swapping from. It is deducts the _gasRefund value to ensure the user is charged correctly\\n    /// @param _fromToken The token the user is swapping from\\n    /// @param _amount The amount they are swapping with\\n    /// @param _gasRefund The gas refund required to cover the proxied swap\\n    /// @return feeTotalInETH The fee total priced in ETH\\n    /// @return feeTotalInFromToken The fee total priced in _fromToken\\n    function calculatePercentageFeeInETH(\\n        IERC20Extension _fromToken,\\n        uint256 _amount,\\n        uint256 _gasRefund\\n    )\\n        external\\n        view\\n        returns (uint256 feeTotalInETH, uint256 feeTotalInFromToken);\\n}\\n\"\n    },\n    \"contracts/interfaces/IVault.sol\": {\n      \"content\": \"interface IVault {\\n    /// @dev Event used when the contract receives ETH\\n    event Received(address indexed from, uint256 value);\\n    /// @dev Event used when the contract is paid ETH, this will occur when fees have been deducted and transferred to the Vault contract for holding\\n    event PaidFees(address indexed from, uint256 value);\\n    /// @dev Event used whenever an admin claims fees from the contract\\n    event FeesClaimed(address indexed from, uint256 value);\\n\\n    /// @dev To allow the contract to receive ETH\\n    receive() external payable;\\n\\n    /// @notice Allows an admin to claim the ETH balance of the contract\\n    function claimFees() external;\\n\\n    /// @notice This function is called whenever fees have been deducted from a user and transffered into the Vault for holding\\n    /// @param _sender The user who has been deducted a fee\\n    /// @param _amount The fee amount\\n    function paidFees(address _sender, uint256 _amount) external payable;\\n\\n    /// @notice Allows an admin to set the balance limit for wallets that have the HOT_WALLET role\\n    /// @param _walletBalanceLimit The updated balance limit\\n    function setWalletBalanceLimit(uint256 _walletBalanceLimit) external;\\n\\n    /// @notice Allows an admin to top up registered HOT_WALLETS, these wallets will be used for sponosoring transactions and this method allows updating all of them with a single contract call\\n    function topUpHotWallets() external payable;\\n\\n    /// @notice This allows us to easily see the total amount of ETH required to top-up all hot wallets. Used before calling the topUpHotWallets function\\n    /// @return totalETH The total amount of ETH required\\n    function ethRequiredForHotWalletTopup()\\n        external\\n        view\\n        returns (uint256 totalETH);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\n    },\n    \"prb-math/contracts/PRBMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\n    },\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\n    },\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"contracts/libraries/UniswapV2Helpers.sol\": {\n      \"content\": \"import \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IERC20Extension.sol\\\";\\n\\nlibrary UniswapV2Helpers {\\n    IERC20Extension constant WETH =\\n        IERC20Extension(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    IUniswapV2Factory constant uniswapV2Factory =\\n        IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n\\n    /// @dev Simple wrapper for the swapTokensForExactETH uniswap V2 function\\n    function _swapTokensForExactETH(\\n        IUniswapV2Router02 _uniswapV2Router,\\n        IERC20 _token,\\n        uint256 _amountOut,\\n        uint256 _amountInMaximum,\\n        address _to\\n    ) internal returns (uint256 amountIn, uint256 amountOut) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(_token);\\n        path[1] = address(WETH);\\n\\n        uint256[] memory amounts = _uniswapV2Router.swapTokensForExactETH(\\n            _amountOut,\\n            _amountInMaximum,\\n            path,\\n            _to,\\n            block.timestamp\\n        );\\n\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    /// @notice This function calculates a path for swapping _fromToken for _toToken\\n    function _returnUniswapV2Path(IERC20 _fromToken, IERC20 _toToken)\\n        internal\\n        view\\n        returns (address[] memory path)\\n    {\\n        // Try to find a direct pair address for the given tokens\\n        try\\n            uniswapV2Factory.getPair(address(_fromToken), address(_toToken))\\n        returns (address _pairAddress) {\\n            // If a direct pair exists, return the direct path\\n            if (_pairAddress != address(0)) {\\n                // Been finding some direct pairs have old pools no one uses, so get the timestamp when the pool was used last\\n                (, , uint256 blocktimestampLast) = IUniswapV2Pair(_pairAddress)\\n                    .getReserves();\\n\\n                // If the pool has been used within the last day, then route through the pool. If its been inactive longer than a day then its highly likely its a low liquidity pool and we don't want to route through it.\\n\\n                // This is a cheap solution, it could pull the reserves from the pool and calculate the amount of stored liquidity in the pool in ETH and invalidate if less than a liquidity threshold. But that would cost a lot more gas and this seems ok for the current MVP\\n                if (block.timestamp - blocktimestampLast < 86400) {\\n                    path = new address[](2);\\n\\n                    path[0] = address(_fromToken);\\n                    path[1] = address(_toToken);\\n\\n                    return path;\\n                }\\n            }\\n        } catch {}\\n\\n        // Return an empty path here, the route can't be handled if either of the tokens are WETH\\n        if (_fromToken == WETH || _toToken == WETH) {\\n            return path;\\n        }\\n\\n        // Otherwise create a path through WETH\\n        path = new address[](3);\\n\\n        path[0] = address(_fromToken);\\n        path[1] = address(WETH);\\n        path[2] = address(_toToken);\\n    }\\n\\n    /// @dev Simple wrapper for the swapExactTokensForTokens uniswap V2 function\\n    function _swapExactTokensForTokens(\\n        IUniswapV2Router02 _uniswapV2Router,\\n        IERC20 _fromToken,\\n        IERC20 _toToken,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address _to\\n    ) internal returns (uint256 amountIn, uint256 amountOut) {\\n        address[] memory path = _returnUniswapV2Path(_fromToken, _toToken);\\n\\n        uint256[] memory amounts = _uniswapV2Router.swapExactTokensForTokens(\\n            _amountIn,\\n            _amountOutMin,\\n            path,\\n            _to,\\n            block.timestamp\\n        );\\n\\n        // Return the first item and the last item, so that it adheres to the path length\\n        return (amounts[0], amounts[path.length - 1]);\\n    }\\n\\n    /// @dev Simple wrapper for the swapExactETHForTokens uniswap V2 function\\n    function _swapExactETHForTokens(\\n        IUniswapV2Router02 _uniswapV2Router,\\n        IERC20 _token,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address _to\\n    ) internal returns (uint256 amountIn, uint256 amountOut) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(WETH);\\n        path[1] = address(_token);\\n\\n        uint256[] memory amounts = _uniswapV2Router.swapExactETHForTokens{\\n            value: _amountIn\\n        }(_amountOutMin, path, _to, block.timestamp);\\n\\n        return (amounts[0], amounts[1]);\\n    }\\n\\n    /// @dev Simple wrapper for the swapExactTokensForETH uniswap V2 function\\n    function _swapExactTokensForETH(\\n        IUniswapV2Router02 _uniswapV2Router,\\n        IERC20 _token,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address _to\\n    ) internal returns (uint256 amountIn, uint256 amountOut) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(_token);\\n        path[1] = address(WETH);\\n\\n        uint256[] memory amounts = _uniswapV2Router.swapExactTokensForETH(\\n            _amountIn,\\n            _amountOutMin,\\n            path,\\n            _to,\\n            block.timestamp\\n        );\\n\\n        return (amounts[0], amounts[1]);\\n    }\\n}\\n\"\n    },\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/UniswapSwapProxy.sol\": {\n      \"content\": \"import \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"./libraries/UniswapHelpers.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapSwapProxy.sol\\\";\\n\\nimport \\\"./BaseSwapProxy.sol\\\";\\n\\n/// @title UniswapSwapProxy\\ncontract UniswapSwapProxy is\\n    IUniswapSwapProxy,\\n    AccessControlEnumerable,\\n    Pausable,\\n    ReentrancyGuard,\\n    BaseSwapProxy\\n{\\n    // Using Fixed point calculations for these types\\n    using PRBMathSD59x18 for int256;\\n    using PRBMathUD60x18 for uint256;\\n\\n    using UniswapV2Helpers for IUniswapV2Router02;\\n\\n    constructor(address _admin) BaseSwapProxy(_admin) {}\\n\\n    function proxySwapWithFee(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken,\\n        uint256 _amount,\\n        uint256 _gasRefund,\\n        uint256 _slippage\\n    ) external override whenNotPaused nonReentrant {\\n        require(!isEth(_fromToken), \\\"Swapping from ETH not supported\\\");\\n        require(_fromToken != _toToken, \\\"_fromToken equal to _toToken\\\");\\n\\n        _fromToken.transferFrom(_msgSender(), address(this), _amount);\\n\\n        // Calculate the percentage fee and return the fetched exchange rate of ETH -> _fromToken\\n        (\\n            uint256 feeTotalInETH,\\n            uint256 feeTotalInFromToken\\n        ) = calculatePercentageFeeInETH(_fromToken, _amount, _gasRefund);\\n\\n        // Handle the approval to the Uniswap router contract here, so that it will cover both the fee swap and token swap\\n        _handleApprovalFromThis(_fromToken, address(uniswapV2Router), _amount);\\n\\n        // Take the fee with Uniswap if one of the tokens isn't ETH and there is a fee total to collect\\n        if (!isEth(_fromToken) && !isEth(_toToken) && feeTotalInETH > 0) {\\n            // Apply slippage to the fee total amount, this will be the maximum used amount of _fromToken\\n            feeTotalInFromToken += feeTotalInFromToken.mul(_slippage);\\n\\n            (uint256 amountUsedForFee, ) = uniswapV2Router\\n                ._swapTokensForExactETH(\\n                    _fromToken,\\n                    feeTotalInETH,\\n                    feeTotalInFromToken,\\n                    address(this)\\n                );\\n\\n            // Update the input amount to account for the tokens used to cover the fee\\n            _amount -= amountUsedForFee;\\n        }\\n\\n        // Scale the input _amount to have the same decimals as _toToken\\n        uint256 scaledAmount = scaleAmountFromTokenDecimals(\\n            _toToken,\\n            _amount,\\n            _getDecimals(_fromToken)\\n        );\\n\\n        uint256 toTokenExchangeRate = getExchangeRate(_fromToken, _toToken);\\n\\n        // Apply the exchange rate and slippage to the scaled amount to derive a minimum output amount\\n        uint256 amountOutMinimum = scaledAmount.mul(toTokenExchangeRate);\\n        amountOutMinimum -= amountOutMinimum.mul(_slippage);\\n\\n        (, uint256 amountReturned) = UniswapHelpers._exactInUniswapHandler(\\n            _fromToken,\\n            _toToken,\\n            _amount,\\n            amountOutMinimum\\n        );\\n\\n        if (isEth(_toToken)) {\\n            amountReturned -= feeTotalInETH;\\n            payable(_msgSender()).transfer(amountReturned);\\n        } else {\\n            _toToken.transfer(_msgSender(), amountReturned);\\n        }\\n\\n        // Transfer the vault the fees paid\\n        vault.paidFees{value: feeTotalInETH}(_msgSender(), feeTotalInETH);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniswapSwapProxy.sol\": {\n      \"content\": \"import \\\"./IERC20Extension.sol\\\";\\nimport \\\"./IVault.sol\\\";\\n\\n/// @title IUniswapSwapProxy\\ninterface IUniswapSwapProxy {\\n    /// @notice This function is called by a user to initiate a token swap, its primary usage is for users who have no ETH wanting to purchase _toToken with the _fromToken they currently hold. This is possible through the sponsored transaction model and is described in detail in the readme.\\n    /// @dev The _gasRefund parameter is the total amount of ETH required for the sponsor TX, approval TX and swap TX. This function then swaps an arbitrary amount of _fromToken to recover this and the fee is transferred to the vault contract.\\n    /// @param _fromToken The token the user is swapping from\\n    /// @param _toToken The token the user is swapping into\\n    /// @param _amount The amount of _fromToken the user would like to swap\\n    /// @param _gasRefund The total amount of ETH that is required to refund the sponsored transaction\\n    /// @param _slippage The slippage used for the swaps\\n    function proxySwapWithFee(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken,\\n        uint256 _amount,\\n        uint256 _gasRefund,\\n        uint256 _slippage\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/Vault.sol\": {\n      \"content\": \"import \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\n\\n/// @title Vault\\n/// @dev This contract will be used to hold fee revenue, it also provides some helper function to top-up registered HOT_WALLETS\\ncontract Vault is AccessControlEnumerable, IVault {\\n    // The role used for HOT_WALLETs\\n    bytes32 public constant HOT_WALLET = keccak256(\\\"HOT_WALLET\\\");\\n    bytes32 public constant HOT_WALLET_ADMIN = keccak256(\\\"HOT_WALLET_ADMIN\\\");\\n\\n    uint256 public walletBalanceLimit;\\n\\n    constructor(address _admin) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n\\n        _setupRole(HOT_WALLET_ADMIN, _admin);\\n        _setRoleAdmin(HOT_WALLET, HOT_WALLET_ADMIN);\\n    }\\n\\n    receive() external payable override {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    function claimFees() external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 thisBalance = address(this).balance;\\n        payable(msg.sender).transfer(thisBalance);\\n\\n        emit FeesClaimed(msg.sender, thisBalance);\\n    }\\n\\n    function paidFees(address _sender, uint256 _amount)\\n        external\\n        payable\\n        override\\n    {\\n        require(msg.value >= _amount, \\\"Not enough ETH sent\\\");\\n\\n        emit PaidFees(_sender, _amount);\\n    }\\n\\n    function setWalletBalanceLimit(uint256 _walletBalanceLimit)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        walletBalanceLimit = _walletBalanceLimit;\\n    }\\n\\n    function ethRequiredForHotWalletTopup()\\n        external\\n        view\\n        override\\n        returns (uint256 totalETH)\\n    {\\n        uint256 numHotWallets = getRoleMemberCount(HOT_WALLET);\\n\\n        // Iterate over the hot wallets\\n        for (uint256 i = 0; i < numHotWallets; i++) {\\n            address payable hotWalletMember = payable(\\n                getRoleMember(HOT_WALLET, i)\\n            );\\n\\n            uint256 hotWalletBalance = hotWalletMember.balance;\\n\\n            // If the given wallet needs a top-up\\n            if (hotWalletBalance < walletBalanceLimit) {\\n                uint256 balanceDiff = walletBalanceLimit - hotWalletBalance;\\n\\n                totalETH += balanceDiff;\\n            }\\n        }\\n    }\\n\\n    function topUpHotWallets()\\n        external\\n        payable\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        uint256 numHotWallets = getRoleMemberCount(HOT_WALLET);\\n\\n        require(numHotWallets > 0, \\\"No Hot Wallets to fund\\\");\\n\\n        // Iterate over the hot wallets\\n        for (uint256 i = 0; i < numHotWallets; i++) {\\n            address payable hotWalletMember = payable(\\n                getRoleMember(HOT_WALLET, i)\\n            );\\n\\n            uint256 hotWalletBalance = hotWalletMember.balance;\\n\\n            // If the given wallet needs a top-up\\n            if (hotWalletBalance < walletBalanceLimit) {\\n                uint256 balanceDiff = walletBalanceLimit - hotWalletBalance;\\n\\n                // Revert if not enough ETH, this will allow us to more easily gauge the required amount of ETH to top-up hot wallets\\n                require(\\n                    address(this).balance >= balanceDiff,\\n                    \\\"Not enough ETH to top-up wallets\\\"\\n                );\\n\\n                hotWalletMember.transfer(balanceDiff);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/Whitelist.sol\": {\n      \"content\": \"import \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IWhitelist.sol\\\";\\n\\ncontract Whitelist is IWhitelist, AccessControlEnumerable {\\n    mapping(address => bool) whitelist;\\n\\n    constructor(address _admin) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n    }\\n\\n    function isWhitelisted(address _address)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return whitelist[_address];\\n    }\\n\\n    function addToWhitelist(address _address)\\n        public\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            _address != address(0),\\n            \\\"Can't add the 0x address to the whitelist\\\"\\n        );\\n        whitelist[_address] = true;\\n\\n        emit AddedToWhitelist(_address);\\n    }\\n\\n    function removeFromWhitelist(address _address)\\n        public\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            isWhitelisted(_address),\\n            \\\"Address is missing from the whitelist\\\"\\n        );\\n        delete whitelist[_address];\\n\\n        emit RemovedFromWhitelist(_address);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IWhitelist.sol\": {\n      \"content\": \"interface IWhitelist {\\n    /// @dev Event emitted whenever a new contractAddress is added to the whitelist\\n    event AddedToWhitelist(address indexed contractAddress);\\n\\n    /// @dev Event emitted whenever a contractAddress is removed from the whitelist\\n    event RemovedFromWhitelist(address indexed contractAddress);\\n\\n    /// @notice This function returns whether a given _address param is within the whitelist\\n    /// @param _address The address to return the whitelist status for\\n    /// @return A boolean indiciating if the address is whitelisted\\n    function isWhitelisted(address _address) external returns (bool);\\n\\n    /// @notice This function is called by an owner to add a new contractAddress to the whitelist\\n    /// @param _address The new address to add the whitelist\\n    function addToWhitelist(address _address) external;\\n\\n    /// @notice This function is called by an owner to remove a contractAddress from the whitelist\\n    /// @param _address The address to remove from the whitelist\\n    function removeFromWhitelist(address _address) external;\\n}\\n\"\n    },\n    \"contracts/deprecated/UniswapV3Helpers.sol\": {\n      \"content\": \"import \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\nimport \\\"../libraries/TickMath.sol\\\";\\n\\n// ! Deprecated, not in use currently\\nlibrary UniswapV3Helpers {\\n    using PRBMathUD60x18 for uint256;\\n\\n    IUniswapV3Factory constant uniswapV3Factory =\\n        IUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\\n\\n    IERC20 public constant ethContract =\\n        IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    IERC20 constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    // https://ethereum.stackexchange.com/questions/98685/computing-the-uniswap-v3-pair-price-from-q64-96-number?rq=1\\n    // https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/OracleLibrary.sol\\n    // https://docs.uniswap.org/protocol/concepts/V3-overview/oracle\\n    function getUniswapV3Rate(IERC20 _fromToken, IERC20 _toToken)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_fromToken == ethContract) {\\n            _fromToken = WETH;\\n        }\\n        if (_toToken == ethContract) {\\n            _toToken = WETH;\\n        }\\n\\n        // If a direct pair exists get the exchange rate for it\\n        uint256 directPairRate = UniswapV3Helpers.getUniswapV3PoolRate(\\n            _fromToken,\\n            _toToken\\n        );\\n\\n        if (directPairRate != 0) {\\n            return directPairRate;\\n        }\\n\\n        // If a direct pair rate didn't exist and either of the tokens was WETH return now\\n        if (_fromToken == WETH || _toToken == WETH) {\\n            return 0;\\n        }\\n\\n        uint256 toWETHRate = UniswapV3Helpers.getUniswapV3PoolRate(\\n            _fromToken,\\n            WETH\\n        );\\n        uint256 fromWETHRate = UniswapV3Helpers.getUniswapV3PoolRate(\\n            WETH,\\n            _toToken\\n        );\\n\\n        // TODO tokens with different number of decimals\\n        if (toWETHRate != 0 && fromWETHRate != 0) {\\n            return toWETHRate.mul(fromWETHRate);\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getUniswapV3PoolRate(IERC20 _fromToken, IERC20 _toToken)\\n        internal\\n        view\\n        returns (uint256 rate)\\n    {\\n        // Defaulting to 3000 fee\\n        address v3PoolAddress = uniswapV3Factory.getPool(\\n            address(_fromToken),\\n            address(_toToken),\\n            3000\\n        );\\n\\n        if (v3PoolAddress == address(0)) {\\n            return 0;\\n        }\\n\\n        uint32[] memory secondsAgo = new uint32[](2);\\n\\n        secondsAgo[0] = 3600; // from an hour ago\\n        secondsAgo[1] = 0; // to now\\n\\n        (int56[] memory tickCumulatives, ) = IUniswapV3Pool(v3PoolAddress)\\n            .observe(secondsAgo);\\n\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n\\n        int24 arithmeticMeanTick = int24(tickCumulativesDelta / 3600);\\n\\n        return TickMath.getPriceFromTick(arithmeticMeanTick);\\n    }\\n\\n    function _inSwapUniswapV3(\\n        ISwapRouter _swapRouter,\\n        IERC20 _fromToken,\\n        IERC20 _toToken,\\n        // The calculated amountIn: fee percentage + ETH fee in _fromToken's\\n        uint256 _amountIn,\\n        // The gas refund amount\\n        uint256 _amountOutMinimum\\n    ) private returns (uint256 amountOut) {\\n        _fromToken.approve(address(_swapRouter), _amountIn);\\n\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n            .ExactInputSingleParams({\\n                tokenIn: address(_fromToken),\\n                tokenOut: address(_toToken),\\n                fee: 3000,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: _amountIn,\\n                amountOutMinimum: _amountOutMinimum,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        return _swapRouter.exactInputSingle(params);\\n    }\\n\\n    function _outSwapUniswapV3(\\n        ISwapRouter _swapRouter,\\n        IERC20 _fromToken,\\n        IERC20 _toToken,\\n        uint256 _amountOut,\\n        uint256 _amountInMaximum\\n    ) private returns (uint256 amountIn) {\\n        _fromToken.approve(address(_swapRouter), _amountInMaximum);\\n\\n        ISwapRouter.ExactOutputSingleParams memory outputParams = ISwapRouter\\n            .ExactOutputSingleParams({\\n                tokenIn: address(_fromToken),\\n                tokenOut: address(_toToken),\\n                fee: 3000,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountOut: _amountOut,\\n                amountInMaximum: _amountInMaximum,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        return _swapRouter.exactOutputSingle(outputParams);\\n    }\\n}\\n\"\n    },\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"\n    },\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\n    },\n    \"contracts/libraries/TickMath.sol\": {\n      \"content\": \"pragma solidity >=0.5.0 <0.9.0;\\n\\n// Copied from Uniswap V2, version incremented to include 0.8.0\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO =\\n        1461446703485210103287273052203988822378723970342;\\n\\n    function getPriceFromTick(int24 tick)\\n        internal\\n        pure\\n        returns (uint256 price)\\n    {\\n        uint160 sqrtPriceX96 = getSqrtRatioAtTick(tick);\\n\\n        return\\n            (uint256(sqrtPriceX96) * uint256(sqrtPriceX96) * 1e18) >> (96 * 2);\\n    }\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick)\\n        internal\\n        pure\\n        returns (uint160 sqrtPriceX96)\\n    {\\n        uint256 absTick = tick < 0\\n            ? uint256(-int256(tick))\\n            : uint256(int256(tick));\\n        require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\n\\n        uint256 ratio = absTick & 0x1 != 0\\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\\n            : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0)\\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0)\\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0)\\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0)\\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0)\\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0)\\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0)\\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0)\\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0)\\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0)\\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0)\\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0)\\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0)\\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0)\\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0)\\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0)\\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0)\\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0)\\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0)\\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160(\\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\n        );\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96)\\n        internal\\n        pure\\n        returns (int24 tick)\\n    {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(\\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\n            \\\"R\\\"\\n        );\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24(\\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n        );\\n        int24 tickHi = int24(\\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n        );\\n\\n        tick = tickLow == tickHi\\n            ? tickLow\\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\n            ? tickHi\\n            : tickLow;\\n    }\\n}\\n\"\n    },\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\n    },\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\n    },\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\n    },\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\n    },\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\n    },\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\n    },\n    \"contracts/ForwardingSwapProxy.sol\": {\n      \"content\": \"import \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Extension.sol\\\";\\nimport \\\"./interfaces/IForwardingSwapProxy.sol\\\";\\n\\nimport \\\"./BaseSwapProxy.sol\\\";\\nimport \\\"./Whitelist.sol\\\";\\n\\n/// @title ForwardingSwapProxy\\ncontract ForwardingSwapProxy is\\n    AccessControlEnumerable,\\n    Pausable,\\n    ReentrancyGuard,\\n    BaseSwapProxy,\\n    Whitelist,\\n    IForwardingSwapProxy\\n{\\n    // Using Fixed point calculations for these types\\n    using PRBMathSD59x18 for int256;\\n    using PRBMathUD60x18 for uint256;\\n\\n    using UniswapV2Helpers for IUniswapV2Router02;\\n\\n    constructor(address _admin) BaseSwapProxy(_admin) Whitelist(_admin) {}\\n\\n    function _swapTokensWithChecks(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken,\\n        SwapParams calldata _swapParams,\\n        uint256 _minimumReturnAmount\\n    ) internal returns (uint256 amountReturned) {\\n        require(isWhitelisted(_swapParams.to), \\\"Not whitelisted\\\");\\n\\n        if (isEth(_fromToken)) {\\n            require(msg.value >= _swapParams.value, \\\"Not enough ETH provided\\\");\\n        } else {\\n            _fromToken.transferFrom(\\n                _msgSender(),\\n                address(this),\\n                _swapParams.amount\\n            );\\n\\n            _handleApprovalFromThis(\\n                _fromToken,\\n                _swapParams.to,\\n                _swapParams.amount\\n            );\\n        }\\n\\n        // Taking the balance of _toToken before and after, this ensures compatibility with all swap services. Some might return the value within the data response, but inconsistent across swap providers\\n        uint256 beforeBalanceToToken = returnTokenBalance(\\n            _toToken,\\n            address(this)\\n        );\\n\\n        // Execute the swap\\n        (bool success, ) = _swapParams.to.call{value: msg.value}(\\n            _swapParams.data\\n        );\\n        require(success, \\\"Proxied Swap Failed\\\");\\n\\n        uint256 afterBalanceToToken = returnTokenBalance(\\n            _toToken,\\n            address(this)\\n        );\\n\\n        amountReturned = afterBalanceToToken - beforeBalanceToToken;\\n\\n        require(\\n            amountReturned > _minimumReturnAmount,\\n            \\\"Not enough tokens returned\\\"\\n        );\\n    }\\n\\n    function proxySwapWithFee(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken,\\n        SwapParams calldata _swapParams,\\n        uint256 _gasRefund,\\n        uint256 _minimumReturnAmount\\n    ) external payable override whenNotPaused nonReentrant {\\n        require(_fromToken != _toToken, \\\"_fromToken equal to _toToken\\\");\\n\\n        uint256 amountReturned = _swapTokensWithChecks(\\n            _fromToken,\\n            _toToken,\\n            _swapParams,\\n            _minimumReturnAmount\\n        );\\n\\n        (uint256 feeTotalInETH, ) = calculatePercentageFeeInETH(\\n            _toToken,\\n            amountReturned,\\n            _gasRefund\\n        );\\n\\n        if (isEth(_toToken)) {\\n            amountReturned -= feeTotalInETH;\\n\\n            require(\\n                amountReturned > _minimumReturnAmount,\\n                \\\"Not enough tokens returned\\\"\\n            );\\n\\n            payable(_msgSender()).transfer(amountReturned);\\n        } else {\\n            uint256 swappedAmountIn;\\n\\n            if (feeTotalInETH > 0) {\\n                _handleApprovalFromThis(\\n                    _toToken,\\n                    address(uniswapV2Router),\\n                    amountReturned\\n                );\\n\\n                (swappedAmountIn, ) = uniswapV2Router._swapTokensForExactETH(\\n                    _toToken,\\n                    feeTotalInETH,\\n                    amountReturned,\\n                    address(this)\\n                );\\n            }\\n\\n            amountReturned -= swappedAmountIn;\\n\\n            require(\\n                amountReturned > _minimumReturnAmount,\\n                \\\"Not enough tokens returned\\\"\\n            );\\n\\n            _toToken.transfer(_msgSender(), amountReturned);\\n        }\\n\\n        if (feeTotalInETH > 0) {\\n            // Transfer the vault the fees paid\\n            vault.paidFees{value: feeTotalInETH}(_msgSender(), feeTotalInETH);\\n        }\\n\\n        emit ProxySwapWithFee(\\n            address(_fromToken),\\n            address(_toToken),\\n            isEth(_fromToken) ? msg.value : _swapParams.value,\\n            amountReturned,\\n            feeTotalInETH\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IForwardingSwapProxy.sol\": {\n      \"content\": \"import \\\"./IERC20Extension.sol\\\";\\n\\n/// @title IForwardingSwapProxy\\n/// @notice This swap proxy contract is for forwarding swaps, meaning the user will provide a data field and a destination contract and this contract will then execute it on the users behalf. Other parameters are provided to this contract to allow for safe validation of the users request.\\ninterface IForwardingSwapProxy {\\n    /// @dev Event used whenever a user executes a proxy swap through the contract\\n    event ProxySwapWithFee(\\n        address indexed _fromToken,\\n        address indexed _toToken,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 feeTotal\\n    );\\n\\n    /// @notice Struct containing the required fields to forward a swap transaction\\n    /// @param to The address of where to execute the proxy swap\\n    /// @param amount The amount to swap, this is 0 if the user is swapping ETH otherwise its the amount of tokens\\n    /// @param value The value in ETH if the user is swapping from ETH. Amount will be 0 in this case\\n    /// @param data The data field of the swap transaction\\n    struct SwapParams {\\n        address to;\\n        uint256 amount;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice This method will forward a swap for a user, the user provides the swap parameters and this method will execute them on the users behalf. This method also will take a fee from the user\\n    /// @param _fromToken The token the user is swapping from\\n    /// @param _toToken The toke the user wants to swap to\\n    /// @param _swapParams The required fields to execute the proxy swap\\n    /// @param _gasRefund The amount in ETH to refund Aurox for proxying the swap\\n    /// @param _minimumReturnAmount The minimum amount of _toToken's to receive for the swap. This is the final return amount for the user, after the fee has been deducted\\n    function proxySwapWithFee(\\n        IERC20Extension _fromToken,\\n        IERC20Extension _toToken,\\n        SwapParams calldata _swapParams,\\n        uint256 _gasRefund,\\n        uint256 _minimumReturnAmount\\n    ) external payable;\\n}\\n\"\n    },\n    \"contracts/deprecated/OneInchDecoder.sol\": {\n      \"content\": \"import \\\"../interfaces/IForwardingSwapProxy.sol\\\";\\n\\n// ! Deprecated, keeping for potential future use\\nlibrary OneInchDecoder {\\n    // Had issues with: bytes4 testSig = abi.decode(_swapParams.data[:4], (bytes4));\\n    // https://github.com/ethereum/solidity/issues/6012\\n    function abiDecodeSig(bytes memory _data)\\n        private\\n        pure\\n        returns (bytes4 sig)\\n    {\\n        assembly {\\n            sig := mload(add(_data, add(0x20, 0)))\\n        }\\n    }\\n\\n    function _updateToTokenSwapParams(\\n        IForwardingSwapProxy.SwapParams calldata _toTokenSwapParams,\\n        uint256 updatedAmount,\\n        uint256 updatedValue\\n    ) internal returns (IForwardingSwapProxy.SwapParams memory) {\\n        // Decoded and updated amount\\n        bytes4 sig = abiDecodeSig(_toTokenSwapParams.data);\\n\\n        // if (sig == bytes4(keccak256(\\\"unoswa)))\\n\\n        (\\n            address srcToken,\\n            uint256 amount,\\n            uint256 minReturn,\\n            bytes32[] memory pools\\n        ) = abi.decode(\\n                _toTokenSwapParams.data[4:],\\n                (address, uint256, uint256, bytes32[])\\n            );\\n\\n        bytes memory data = abi.encodeWithSelector(\\n            sig,\\n            srcToken,\\n            updatedAmount,\\n            minReturn,\\n            pools\\n        );\\n\\n        return\\n            IForwardingSwapProxy.SwapParams(\\n                _toTokenSwapParams.to,\\n                updatedAmount,\\n                updatedValue,\\n                data\\n            );\\n    }\\n\\n    // https://ethereum.stackexchange.com/questions/48576/solidity-assembly-question-mstore\\n    function updateData(\\n        bytes memory _data,\\n        uint256 _amount,\\n        uint256 _minReturn\\n    ) public view returns (bytes memory) {\\n        uint256 gasBef = gasleft();\\n        assembly {\\n            mstore(add(_data, 68), _amount)\\n            mstore(add(_data, 100), _minReturn)\\n        }\\n        uint256 gasAft = gasleft();\\n\\n        return _data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/deprecated/IOneInchRouter.sol\": {\n      \"content\": \"import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// ! Deprecated, not in use\\ninterface IOneInchRouter {\\n    struct SwapDescription {\\n        IERC20 srcToken;\\n        IERC20 dstToken;\\n        address srcReceiver;\\n        address dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n        bytes permit;\\n    }\\n\\n    function swap(\\n        address caller,\\n        SwapDescription calldata desc,\\n        bytes memory data\\n    ) external returns (uint256 returnAmount, uint256 gasLeft);\\n\\n    function unoswap(\\n        address srcToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        bytes32[] calldata pools\\n    ) external returns (uint256 returnAmount);\\n\\n    function uniswapV3Swap(\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata pools\\n    ) external returns (uint256 returnAmount);\\n\\n    function clipperSwap(\\n        address srcToken,\\n        address dstToken,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) external returns (uint256 returnAmount);\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"storageLayout\",\n          \"devdoc\",\n          \"userdoc\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "214890cbb4e4ad028405895a0fdeae8d",
      "transactionHash": "0x4b5d6705e37ed1da26dcaa4ec56439cbc36f5449f134c182f918fef1a8c3a302",
      "args": [
        "0x489Bf38DB5E8aF99E82906B89D9164220fc784Ac"
      ]
    },
    "decoded": {
      "from": "0x489Bf38DB5E8aF99E82906B89D9164220fc784Ac",
      "gasPrice": "2000000001",
      "maxFeePerGas": "2000000001",
      "maxPriorityFeePerGas": "1999999993",
      "gasLimit": "2958484",
      "to": null,
      "value": "0",
      "nonce": 0,
      "data": "0x60806040523480156200001157600080fd5b506040516200347c3803806200347c8339810160408190526200003491620001cd565b6002805460ff19169055600160035580806200005260008262000068565b506200006060008262000068565b5050620001ff565b62000074828262000078565b5050565b6200008f8282620000bb60201b620016821760201c565b6000828152600160209081526040909120620000b6918390620017206200015b821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000074576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001173390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000172836001600160a01b0384166200017b565b90505b92915050565b6000818152600183016020526040812054620001c45750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000175565b50600062000175565b600060208284031215620001e057600080fd5b81516001600160a01b0381168114620001f857600080fd5b9392505050565b61326d806200020f6000396000f3fe6080604052600436106101dc5760003560e01c80639010d07c11610102578063baaa61be11610095578063ea9119a511610064578063ea9119a5146105c8578063ead8ece814610605578063f4f3b2001461063a578063fbfa77cf1461065a57600080fd5b8063baaa61be14610548578063ca15c87314610568578063d547741f14610588578063e43252d7146105a857600080fd5b8063a001ecdd116100d1578063a001ecdd146104d5578063a217fddf146104eb578063a702f2c014610500578063ad5c46481461052057600080fd5b80639010d07c1461043657806390238c391461045657806391d148541461047e5780639ca519c6146104c257600080fd5b80634021a8671161017a5780636817031b116101495780636817031b146103b657806369fe0e2d146103d6578063882796f1146103f65780638ab1d6811461041657600080fd5b80634021a8671461033e5780634c7125941461035e5780635285301c1461037e5780635c975abb1461039e57600080fd5b80632f2ff15d116101b65780632f2ff15d1461029b57806336568abe146102bd5780633af32abf146102dd5780633cc562b21461031657600080fd5b806301ffc9a7146101e85780631694505e1461021d578063248a9ca31461025d57600080fd5b366101e357005b600080fd5b3480156101f457600080fd5b50610208610203366004612a03565b61067a565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b50610245737a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b039091168152602001610214565b34801561026957600080fd5b5061028d610278366004612a2d565b60009081526020819052604090206001015490565b604051908152602001610214565b3480156102a757600080fd5b506102bb6102b6366004612a5e565b6106be565b005b3480156102c957600080fd5b506102bb6102d8366004612a5e565b6106e9565b3480156102e957600080fd5b506102086102f8366004612a8e565b6001600160a01b031660009081526006602052604090205460ff1690565b34801561032257600080fd5b5061024573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561034a57600080fd5b5061028d610359366004612aba565b61077a565b34801561036a57600080fd5b5061028d610379366004612afc565b61079e565b34801561038a57600080fd5b5061028d610399366004612afc565b610936565b3480156103aa57600080fd5b5060025460ff16610208565b3480156103c257600080fd5b506102bb6103d1366004612a8e565b610ab8565b3480156103e257600080fd5b506102bb6103f1366004612a2d565b610b34565b34801561040257600080fd5b506102bb610411366004612b38565b610b77565b34801561042257600080fd5b506102bb610431366004612a8e565b610b99565b34801561044257600080fd5b50610245610451366004612b55565b610c7d565b34801561046257600080fd5b506102457347fb2585d2c56fe188d0e6ec628a38b74fceeedf81565b34801561048a57600080fd5b50610208610499366004612a5e565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6102bb6104d0366004612b77565b610c95565b3480156104e157600080fd5b5061028d60055481565b3480156104f757600080fd5b5061028d600081565b34801561050c57600080fd5b5061028d61051b366004612bf0565b611093565b34801561052c57600080fd5b5061024573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b34801561055457600080fd5b5061028d610563366004612afc565b611104565b34801561057457600080fd5b5061028d610583366004612a2d565b61122f565b34801561059457600080fd5b506102bb6105a3366004612a5e565b611246565b3480156105b457600080fd5b506102bb6105c3366004612a8e565b61126c565b3480156105d457600080fd5b506102086105e3366004612a8e565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b34801561061157600080fd5b50610625610620366004612c27565b611341565b60408051928352602083019190915201610214565b34801561064657600080fd5b506102bb610655366004612a8e565b611488565b34801561066657600080fd5b50600454610245906001600160a01b031681565b60006001600160e01b031982167f5a05180f0000000000000000000000000000000000000000000000000000000014806106b857506106b882611735565b92915050565b6000828152602081905260409020600101546106da813361179c565b6106e4838361181a565b505050565b6001600160a01b038116331461076c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b610776828261183c565b5050565b6000806107868561185e565b9050610793848483611093565b9150505b9392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038416016107dd5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc292505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161081a5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291505b600061082684846118ef565b9050805160000361083b5760009150506106b8565b60006108468561185e565b9050600061085582600a612d56565b610860906001612d65565b6040517fd06ca61f000000000000000000000000000000000000000000000000000000008152909150737a250d5630b4cf539739df2c5dacb4c659f2488d9063d06ca61f906108b59084908790600401612dc8565b600060405180830381865afa9250505080156108f357506040513d6000823e601f3d908101601f191682016040526108f09190810190612dff565b60015b61090357600093505050506106b8565b80600185516109129190612ebd565b8151811061092257610922612ed0565b602002602001015194505050505092915050565b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc1196001600160a01b038416016109755773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee92505b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc1196001600160a01b038316016109b25773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee91505b60006109be8484611bd4565b905080156109da576109d28382601261077a565b9150506106b8565b6001600160a01b03841673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480610a2157506001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610a305760009150506106b8565b6000610a508573eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee611bd4565b90506000610a7273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee86611bd4565b90508115801590610a8257508015155b15610aac576000610a938383611cec565b9050610aa18682601261077a565b9450505050506106b8565b50600095945050505050565b6000610ac4813361179c565b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915560405190815233907f8800deb8c31293b539eaf5391fcc88280dc58f015c043d65dd5b72a0979a1dd1906020015b60405180910390a25050565b6000610b40813361179c565b600582905560405182815233907f01fe2943baee27f47add82886c2200f910c749c461c9b63c5fe83901a53bdb4990602001610b28565b6000610b83813361179c565b8115610b9157610776611cf8565b610776611d9d565b6000610ba5813361179c565b6001600160a01b03821660009081526006602052604090205460ff16610c335760405162461bcd60e51b815260206004820152602560248201527f41646472657373206973206d697373696e672066726f6d20746865207768697460448201527f656c6973740000000000000000000000000000000000000000000000000000006064820152608401610763565b6001600160a01b038216600081815260066020526040808220805460ff19169055517fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df7579190a25050565b60008281526001602052604081206107979083611e20565b60025460ff1615610ce85760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610763565b600260035403610d3a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610763565b60026003556001600160a01b0380851690861603610d9a5760405162461bcd60e51b815260206004820152601c60248201527f5f66726f6d546f6b656e20657175616c20746f205f746f546f6b656e000000006044820152606401610763565b6000610da886868685611e2c565b90506000610db7868386611341565b50905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03871603610e6c57610de88183612ebd565b9150828211610e395760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b604051339083156108fc029084906000818181858888f19350505050158015610e66573d6000803e3d6000fd5b50610f97565b60008115610eb857610e9387737a250d5630b4cf539739df2c5dacb4c659f2488d85612103565b610eb4737a250d5630b4cf539739df2c5dacb4c659f2488d8884863061220d565b5090505b610ec28184612ebd565b9250838311610f135760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b6001600160a01b03871663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018690526044016020604051808303816000875af1158015610f70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f949190612ee6565b50505b8015611011576004546001600160a01b031663180e222d82336040516001600160e01b031960e085901b1681526001600160a01b039091166004820152602481018590526044016000604051808303818588803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b50505050505b6001600160a01b038087169088167f2fe279dbe9d225a9d3c707f70e43c44034ee8ebbe8a65ceefc7fe927a55a67de73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8214611065578760400135611067565b345b6040805191825260208201879052810185905260600160405180910390a3505060016003555050505050565b60008160ff168360ff1610156110cc576110ad8383612f03565b6110bb9060ff16600a612f1c565b6110c59085612d65565b9050610797565b8160ff168360ff1611156110fc576110e48284612f03565b6110f29060ff16600a612f1c565b6110c59085612f3e565b509192915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038416148061114d57506001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b801561119b575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038316148061119b57506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b156111af5750670de0b6b3a76400006106b8565b60006111bb8484610936565b905080156111ca5790506106b8565b60006111d6858561079e565b905080156111e75791506106b89050565b60405162461bcd60e51b815260206004820152600d60248201527f4e6f205261746520466f756e64000000000000000000000000000000000000006044820152606401610763565b60008181526001602052604081206106b89061237d565b600082815260208190526040902060010154611262813361179c565b6106e4838361183c565b6000611278813361179c565b6001600160a01b0382166112f45760405162461bcd60e51b815260206004820152602960248201527f43616e27742061646420746865203078206164647265737320746f207468652060448201527f77686974656c69737400000000000000000000000000000000000000000000006064820152608401610763565b6001600160a01b038216600081815260066020526040808220805460ff19166001179055517fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab039190a25050565b600080821580156113525750600554155b1561136257506000905080611480565b60006113828673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2611104565b9050600061138f8761185e565b905060006113a86113a08885611cec565b836012611093565b905085811161141f5760405162461bcd60e51b815260206004820152602d60248201527f4e6f74207377617070696e6720656e6f75676820746f207265636f766572207460448201527f68652067617320726566756e64000000000000000000000000000000000000006064820152608401610763565b600061143960055488846114339190612ebd565b90611cec565b90506114458782612f60565b9550600061145587601286611093565b9050600061146b670de0b6b3a764000087612387565b90506114778282611cec565b96505050505050505b935093915050565b6000611494813361179c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161153a5747806115075760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610763565b604051339082156108fc029083906000818181858888f19350505050158015611534573d6000803e3d6000fd5b50505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a59190612f73565b9050600081116115f75760405162461bcd60e51b815260206004820152601360248201527f4e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610763565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0384169063a9059cbb906044015b6020604051808303816000875af115801561165e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190612ee6565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610776576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556116dc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610797836001600160a01b03841661239c565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106b857507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106b8565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610776576117d8816001600160a01b031660146123eb565b6117e38360206123eb565b6040516020016117f4929190612fb0565b60408051601f198184030181529082905262461bcd60e51b825261076391600401613031565b6118248282611682565b60008281526001602052604090206106e49082611720565b61184682826125cc565b60008281526001602052604090206106e4908261264b565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b0383160161188d57506012919050565b816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190613064565b6040517fe6a439050000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152606090735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f9063e6a4390590604401602060405180830381865afa925050508015611987575060408051601f3d908101601f1916820190925261198491810190613081565b60015b15611ab2576001600160a01b03811615611ab0576000816001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156119db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ff91906130c1565b63ffffffff1692505050620151808142611a199190612ebd565b1015611aae5760408051600280825260608201835290916020830190803683370190505092508483600081518110611a5357611a53612ed0565b60200260200101906001600160a01b031690816001600160a01b0316815250508383600181518110611a8757611a87612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505050506106b8565b505b505b6001600160a01b03831673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21480611af957506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2145b6106b8576040805160038082526080820190925290602082016060803683370190505090508281600081518110611b3257611b32612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600181518110611b7a57611b7a612ed0565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110611bae57611bae612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505092915050565b60006001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015611c165791925073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee915b6040517fbcfd032d0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152841660248201527347fb2585d2c56fe188d0e6ec628a38b74fceeedf9063bcfd032d9060440160a060405180830381865afa925050508015611cab575060408051601f3d908101601f19168201909252611ca891810190613120565b60015b611cb95760009150506106b8565b8515611cde57611cd1670de0b6b3a764000085612387565b96505050505050506106b8565b8396505050505050506106b8565b60006107978383612660565b60025460ff1615611d4b5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610763565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d803390565b6040516001600160a01b03909116815260200160405180910390a1565b60025460ff16611def5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610763565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611d80565b60006107978383612759565b6000611e3e6102f86020850185612a8e565b611e8a5760405162461bcd60e51b815260206004820152600f60248201527f4e6f742077686974656c697374656400000000000000000000000000000000006044820152606401610763565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03861603611f07578260400135341015611f025760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768204554482070726f76696465640000000000000000006044820152606401610763565b611fba565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152602085810135604483015291516001600160a01b038816926323b872dd926064808201939182900301816000875af1158015611f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9e9190612ee6565b50611fba85611fb06020860186612a8e565b8560200135612103565b6000611fc68530612783565b90506000611fd76020860186612a8e565b6001600160a01b031634611fee6060880188613170565b604051611ffc9291906131be565b60006040518083038185875af1925050503d8060008114612039576040519150601f19603f3d011682016040523d82523d6000602084013e61203e565b606091505b505090508061208f5760405162461bcd60e51b815260206004820152601360248201527f50726f786965642053776170204661696c6564000000000000000000000000006044820152606401610763565b600061209b8730612783565b90506120a78382612ebd565b93508484116120f85760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e732072657475726e65640000000000006044820152606401610763565b505050949350505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0384160361212c57505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015282919085169063dd62ed3e90604401602060405180830381865afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190612f73565b10156106e4576040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600019602483015284169063095ea7b39060440161163f565b604080516002808252606082018352600092839283929091602083019080368337019050509050868160008151811061224857612248612ed0565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061229057612290612ed0565b6001600160a01b0392831660209182029290920101526040517f4a25d94a0000000000000000000000000000000000000000000000000000000081526000918a1690634a25d94a906122ee908a908a9087908b9042906004016131ce565b6000604051808303816000875af115801561230d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123359190810190612dff565b90508060008151811061234a5761234a612ed0565b60200260200101518160018151811061236557612365612ed0565b60200260200101519350935050509550959350505050565b60006106b8825490565b600061079783670de0b6b3a76400008461282a565b60008181526001830160205260408120546123e3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b8565b5060006106b8565b606060006123fa836002612d65565b612405906002612f60565b67ffffffffffffffff81111561241d5761241d612de9565b6040519080825280601f01601f191660200182016040528015612447576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061247e5761247e612ed0565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106124c9576124c9612ed0565b60200101906001600160f81b031916908160001a90535060006124ed846002612d65565b6124f8906001612f60565b90505b600181111561257d577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061253957612539612ed0565b1a60f81b82828151811061254f5761254f612ed0565b60200101906001600160f81b031916908160001a90535060049490941c936125768161320a565b90506124fb565b5083156107975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610763565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610776576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610797836001600160a01b038416612910565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106126bd576040517fd31b340200000000000000000000000000000000000000000000000000000000815260048101829052602401610763565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff82119050826000036126fb5780670de0b6b3a76400008504019450505050506106b8565b6204000082850304939091119091037d40000000000000000000000000000000000000000000000000000000000002919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600082600001828154811061277057612770612ed0565b9060005260206000200154905092915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0384161461281a576040516370a0823160e01b81526001600160a01b0383811660048301528416906370a0823190602401602060405180830381865afa1580156127ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128139190612f73565b90506106b8565b506001600160a01b031631919050565b60008080600019858709858702925082811083820303915050806000036128645783828161285a5761285a612f28565b0492505050610797565b8381106128a7576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610763565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600081815260018301602052604081205480156129f9576000612934600183612ebd565b855490915060009061294890600190612ebd565b90508181146129ad57600086600001828154811061296857612968612ed0565b906000526020600020015490508087600001848154811061298b5761298b612ed0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806129be576129be613221565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106b8565b60009150506106b8565b600060208284031215612a1557600080fd5b81356001600160e01b03198116811461079757600080fd5b600060208284031215612a3f57600080fd5b5035919050565b6001600160a01b0381168114612a5b57600080fd5b50565b60008060408385031215612a7157600080fd5b823591506020830135612a8381612a46565b809150509250929050565b600060208284031215612aa057600080fd5b813561079781612a46565b60ff81168114612a5b57600080fd5b600080600060608486031215612acf57600080fd5b8335612ada81612a46565b9250602084013591506040840135612af181612aab565b809150509250925092565b60008060408385031215612b0f57600080fd5b8235612b1a81612a46565b91506020830135612a8381612a46565b8015158114612a5b57600080fd5b600060208284031215612b4a57600080fd5b813561079781612b2a565b60008060408385031215612b6857600080fd5b50508035926020909101359150565b600080600080600060a08688031215612b8f57600080fd5b8535612b9a81612a46565b94506020860135612baa81612a46565b9350604086013567ffffffffffffffff811115612bc657600080fd5b860160808189031215612bd857600080fd5b94979396509394606081013594506080013592915050565b600080600060608486031215612c0557600080fd5b833592506020840135612c1781612aab565b91506040840135612af181612aab565b600080600060608486031215612c3c57600080fd5b8335612c4781612a46565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612cad578160001904821115612c9357612c93612c5c565b80851615612ca057918102915b93841c9390800290612c77565b509250929050565b600082612cc4575060016106b8565b81612cd1575060006106b8565b8160018114612ce75760028114612cf157612d0d565b60019150506106b8565b60ff841115612d0257612d02612c5c565b50506001821b6106b8565b5060208310610133831016604e8410600b8410161715612d30575081810a6106b8565b612d3a8383612c72565b8060001904821115612d4e57612d4e612c5c565b029392505050565b600061079760ff841683612cb5565b6000816000190483118215151615612d7f57612d7f612c5c565b500290565b600081518084526020808501945080840160005b83811015612dbd5781516001600160a01b031687529582019590820190600101612d98565b509495945050505050565b828152604060208201526000612de16040830184612d84565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612e1257600080fd5b825167ffffffffffffffff80821115612e2a57600080fd5b818501915085601f830112612e3e57600080fd5b815181811115612e5057612e50612de9565b8060051b604051601f19603f83011681018181108582111715612e7557612e75612de9565b604052918252848201925083810185019188831115612e9357600080fd5b938501935b82851015612eb157845184529385019392850192612e98565b98975050505050505050565b818103818111156106b8576106b8612c5c565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612ef857600080fd5b815161079781612b2a565b60ff82811682821603908111156106b8576106b8612c5c565b60006107978383612cb5565b634e487b7160e01b600052601260045260246000fd5b600082612f5b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156106b8576106b8612c5c565b600060208284031215612f8557600080fd5b5051919050565b60005b83811015612fa7578181015183820152602001612f8f565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612fe8816017850160208801612f8c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613025816028840160208801612f8c565b01602801949350505050565b6020815260008251806020840152613050816040850160208701612f8c565b601f01601f19169190910160400192915050565b60006020828403121561307657600080fd5b815161079781612aab565b60006020828403121561309357600080fd5b815161079781612a46565b80516dffffffffffffffffffffffffffff811681146130bc57600080fd5b919050565b6000806000606084860312156130d657600080fd5b6130df8461309e565b92506130ed6020850161309e565b9150604084015163ffffffff81168114612af157600080fd5b805169ffffffffffffffffffff811681146130bc57600080fd5b600080600080600060a0868803121561313857600080fd5b61314186613106565b945060208601519350604086015192506060860151915061316460808701613106565b90509295509295909350565b6000808335601e1984360301811261318757600080fd5b83018035915067ffffffffffffffff8211156131a257600080fd5b6020019150368190038213156131b757600080fd5b9250929050565b8183823760009101908152919050565b85815284602082015260a0604082015260006131ed60a0830186612d84565b6001600160a01b0394909416606083015250608001529392505050565b60008161321957613219612c5c565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206942485ec2b78dc8524e919854f2b483a75e915dea88df62f35a6a6bf6dafcce64736f6c63430008100033000000000000000000000000489bf38db5e8af99e82906b89d9164220fc784ac",
      "r": "0x7127e6a8f0203dfa78890522d8d26c338888832949f560bc9e4b0064cf511f60",
      "s": "0x6b865b8046811748b465946f3d5d7bb5d43598b5fc35a7d2dbd4251a66f75c9e",
      "v": 1,
      "chainId": 100
    }
  }
}