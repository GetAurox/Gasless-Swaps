/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UniswapSwapProxyInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "WETH()": FunctionFragment;
    "calculatePercentageFeeInETH(address,uint256,uint256)": FunctionFragment;
    "ethContract()": FunctionFragment;
    "feePercentage()": FunctionFragment;
    "feedRegistry()": FunctionFragment;
    "getChainlinkRate(address,address)": FunctionFragment;
    "getExchangeRate(address,address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getUniswapV2Rate(address,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isEth(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "proxySwapWithFee(address,address,uint256,uint256,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "scaleAmountFromDecimals(uint256,uint8,uint8)": FunctionFragment;
    "scaleAmountFromTokenDecimals(address,uint256,uint8)": FunctionFragment;
    "setContractPaused(bool)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "vault()": FunctionFragment;
    "withdrawERC20(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculatePercentageFeeInETH",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feedRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV2Rate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "isEth", values: [string]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxySwapWithFee",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "scaleAmountFromDecimals",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scaleAmountFromTokenDecimals",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePercentageFeeInETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feedRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV2Rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxySwapWithFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scaleAmountFromDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaleAmountFromTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;

  events: {
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetFee(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "VaultSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultSet"): EventFragment;
}

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SetFeeEvent = TypedEvent<
  [string, BigNumber] & { from: string; fee: BigNumber }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type VaultSetEvent = TypedEvent<
  [string, string] & { vault: string; setter: string }
>;

export class UniswapSwapProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniswapSwapProxyInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    calculatePercentageFeeInETH(
      _token: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeTotalInETH: BigNumber;
        feeTotalInToken: BigNumber;
      }
    >;

    ethContract(overrides?: CallOverrides): Promise<[string]>;

    feePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    feedRegistry(overrides?: CallOverrides): Promise<[string]>;

    getChainlinkRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exchangeRate: BigNumber }>;

    getExchangeRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUniswapV2Rate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isEth(_token: string, overrides?: CallOverrides): Promise<[boolean]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxySwapWithFee(
      _fromToken: string,
      _toToken: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scaleAmountFromDecimals(
      _amount: BigNumberish,
      _inputDecimals: BigNumberish,
      _outputDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    scaleAmountFromTokenDecimals(
      _token: string,
      _amount: BigNumberish,
      _inputDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    setContractPaused(
      _pauseContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdrawERC20(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  calculatePercentageFeeInETH(
    _token: string,
    _amount: BigNumberish,
    _gasRefund: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      feeTotalInETH: BigNumber;
      feeTotalInToken: BigNumber;
    }
  >;

  ethContract(overrides?: CallOverrides): Promise<string>;

  feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  feedRegistry(overrides?: CallOverrides): Promise<string>;

  getChainlinkRate(
    _fromToken: string,
    _toToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExchangeRate(
    _fromToken: string,
    _toToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUniswapV2Rate(
    _fromToken: string,
    _toToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isEth(_token: string, overrides?: CallOverrides): Promise<boolean>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxySwapWithFee(
    _fromToken: string,
    _toToken: string,
    _amount: BigNumberish,
    _gasRefund: BigNumberish,
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  scaleAmountFromDecimals(
    _amount: BigNumberish,
    _inputDecimals: BigNumberish,
    _outputDecimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scaleAmountFromTokenDecimals(
    _token: string,
    _amount: BigNumberish,
    _inputDecimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setContractPaused(
    _pauseContract: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVault(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdrawERC20(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    calculatePercentageFeeInETH(
      _token: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeTotalInETH: BigNumber;
        feeTotalInToken: BigNumber;
      }
    >;

    ethContract(overrides?: CallOverrides): Promise<string>;

    feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    feedRegistry(overrides?: CallOverrides): Promise<string>;

    getChainlinkRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchangeRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapV2Rate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isEth(_token: string, overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxySwapWithFee(
      _fromToken: string,
      _toToken: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    scaleAmountFromDecimals(
      _amount: BigNumberish,
      _inputDecimals: BigNumberish,
      _outputDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaleAmountFromTokenDecimals(
      _token: string,
      _amount: BigNumberish,
      _inputDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContractPaused(
      _pauseContract: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setVault(_vault: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdrawERC20(_token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "SetFee(address,uint256)"(
      from?: string | null,
      fee?: null
    ): TypedEventFilter<[string, BigNumber], { from: string; fee: BigNumber }>;

    SetFee(
      from?: string | null,
      fee?: null
    ): TypedEventFilter<[string, BigNumber], { from: string; fee: BigNumber }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "VaultSet(address,address)"(
      vault?: null,
      setter?: string | null
    ): TypedEventFilter<[string, string], { vault: string; setter: string }>;

    VaultSet(
      vault?: null,
      setter?: string | null
    ): TypedEventFilter<[string, string], { vault: string; setter: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePercentageFeeInETH(
      _token: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethContract(overrides?: CallOverrides): Promise<BigNumber>;

    feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    feedRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getChainlinkRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchangeRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapV2Rate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEth(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxySwapWithFee(
      _fromToken: string,
      _toToken: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    scaleAmountFromDecimals(
      _amount: BigNumberish,
      _inputDecimals: BigNumberish,
      _outputDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scaleAmountFromTokenDecimals(
      _token: string,
      _amount: BigNumberish,
      _inputDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContractPaused(
      _pauseContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePercentageFeeInETH(
      _token: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feedRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainlinkRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangeRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapV2Rate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEth(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxySwapWithFee(
      _fromToken: string,
      _toToken: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    scaleAmountFromDecimals(
      _amount: BigNumberish,
      _inputDecimals: BigNumberish,
      _outputDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scaleAmountFromTokenDecimals(
      _token: string,
      _amount: BigNumberish,
      _inputDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContractPaused(
      _pauseContract: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVault(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC20(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
