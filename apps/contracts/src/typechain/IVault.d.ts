/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IVaultInterface extends ethers.utils.Interface {
  functions: {
    "claimFees()": FunctionFragment;
    "ethRequiredForHotWalletTopup()": FunctionFragment;
    "paidFees(address,uint256)": FunctionFragment;
    "setWalletBalanceLimit(uint256)": FunctionFragment;
    "topUpHotWallets()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ethRequiredForHotWalletTopup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paidFees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWalletBalanceLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "topUpHotWallets",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethRequiredForHotWalletTopup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paidFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWalletBalanceLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topUpHotWallets",
    data: BytesLike
  ): Result;

  events: {
    "FeesClaimed(address,uint256)": EventFragment;
    "PaidFees(address,uint256)": EventFragment;
    "Received(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeesClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaidFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
}

export type FeesClaimedEvent = TypedEvent<
  [string, BigNumber] & { from: string; value: BigNumber }
>;

export type PaidFeesEvent = TypedEvent<
  [string, BigNumber] & { from: string; value: BigNumber }
>;

export type ReceivedEvent = TypedEvent<
  [string, BigNumber] & { from: string; value: BigNumber }
>;

export class IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVaultInterface;

  functions: {
    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethRequiredForHotWalletTopup(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalETH: BigNumber }>;

    paidFees(
      _sender: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWalletBalanceLimit(
      _walletBalanceLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    topUpHotWallets(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethRequiredForHotWalletTopup(overrides?: CallOverrides): Promise<BigNumber>;

  paidFees(
    _sender: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWalletBalanceLimit(
    _walletBalanceLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  topUpHotWallets(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimFees(overrides?: CallOverrides): Promise<void>;

    ethRequiredForHotWalletTopup(overrides?: CallOverrides): Promise<BigNumber>;

    paidFees(
      _sender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWalletBalanceLimit(
      _walletBalanceLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    topUpHotWallets(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FeesClaimed(address,uint256)"(
      from?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; value: BigNumber }
    >;

    FeesClaimed(
      from?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; value: BigNumber }
    >;

    "PaidFees(address,uint256)"(
      from?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; value: BigNumber }
    >;

    PaidFees(
      from?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; value: BigNumber }
    >;

    "Received(address,uint256)"(
      from?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; value: BigNumber }
    >;

    Received(
      from?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; value: BigNumber }
    >;
  };

  estimateGas: {
    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethRequiredForHotWalletTopup(overrides?: CallOverrides): Promise<BigNumber>;

    paidFees(
      _sender: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWalletBalanceLimit(
      _walletBalanceLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    topUpHotWallets(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethRequiredForHotWalletTopup(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paidFees(
      _sender: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWalletBalanceLimit(
      _walletBalanceLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    topUpHotWallets(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
