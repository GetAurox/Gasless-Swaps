/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IBaseSwapProxy,
  IBaseSwapProxyInterface,
} from "../IBaseSwapProxy";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IVault",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "setter",
        type: "address",
      },
    ],
    name: "VaultSet",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Extension",
        name: "_fromToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_gasRefund",
        type: "uint256",
      },
    ],
    name: "calculatePercentageFeeInETH",
    outputs: [
      {
        internalType: "uint256",
        name: "feeTotalInETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeTotalInFromToken",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Extension",
        name: "_fromToken",
        type: "address",
      },
      {
        internalType: "contract IERC20Extension",
        name: "_toToken",
        type: "address",
      },
    ],
    name: "getChainlinkRate",
    outputs: [
      {
        internalType: "uint256",
        name: "exchangeRate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Extension",
        name: "_fromToken",
        type: "address",
      },
      {
        internalType: "contract IERC20Extension",
        name: "_toToken",
        type: "address",
      },
    ],
    name: "getExchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Extension",
        name: "_fromToken",
        type: "address",
      },
      {
        internalType: "contract IERC20Extension",
        name: "_toToken",
        type: "address",
      },
    ],
    name: "getUniswapV2Rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IBaseSwapProxy__factory {
  static readonly abi = _abi;
  static createInterface(): IBaseSwapProxyInterface {
    return new utils.Interface(_abi) as IBaseSwapProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBaseSwapProxy {
    return new Contract(address, _abi, signerOrProvider) as IBaseSwapProxy;
  }
}
