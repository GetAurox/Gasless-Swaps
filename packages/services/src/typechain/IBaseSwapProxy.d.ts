/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBaseSwapProxyInterface extends ethers.utils.Interface {
  functions: {
    "calculatePercentageFeeInETH(address,uint256,uint256)": FunctionFragment;
    "getChainlinkRate(address,address)": FunctionFragment;
    "getExchangeRate(address,address)": FunctionFragment;
    "getUniswapV2Rate(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculatePercentageFeeInETH",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapV2Rate",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculatePercentageFeeInETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapV2Rate",
    data: BytesLike
  ): Result;

  events: {
    "SetFee(address,uint256)": EventFragment;
    "VaultSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultSet"): EventFragment;
}

export type SetFeeEvent = TypedEvent<
  [string, BigNumber] & { from: string; fee: BigNumber }
>;

export type VaultSetEvent = TypedEvent<
  [string, string] & { vault: string; setter: string }
>;

export class IBaseSwapProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBaseSwapProxyInterface;

  functions: {
    calculatePercentageFeeInETH(
      _fromToken: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeTotalInETH: BigNumber;
        feeTotalInFromToken: BigNumber;
      }
    >;

    getChainlinkRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exchangeRate: BigNumber }>;

    getExchangeRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUniswapV2Rate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calculatePercentageFeeInETH(
    _fromToken: string,
    _amount: BigNumberish,
    _gasRefund: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      feeTotalInETH: BigNumber;
      feeTotalInFromToken: BigNumber;
    }
  >;

  getChainlinkRate(
    _fromToken: string,
    _toToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExchangeRate(
    _fromToken: string,
    _toToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUniswapV2Rate(
    _fromToken: string,
    _toToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calculatePercentageFeeInETH(
      _fromToken: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeTotalInETH: BigNumber;
        feeTotalInFromToken: BigNumber;
      }
    >;

    getChainlinkRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchangeRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapV2Rate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "SetFee(address,uint256)"(
      from?: string | null,
      fee?: null
    ): TypedEventFilter<[string, BigNumber], { from: string; fee: BigNumber }>;

    SetFee(
      from?: string | null,
      fee?: null
    ): TypedEventFilter<[string, BigNumber], { from: string; fee: BigNumber }>;

    "VaultSet(address,address)"(
      vault?: null,
      setter?: string | null
    ): TypedEventFilter<[string, string], { vault: string; setter: string }>;

    VaultSet(
      vault?: null,
      setter?: string | null
    ): TypedEventFilter<[string, string], { vault: string; setter: string }>;
  };

  estimateGas: {
    calculatePercentageFeeInETH(
      _fromToken: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainlinkRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchangeRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapV2Rate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculatePercentageFeeInETH(
      _fromToken: string,
      _amount: BigNumberish,
      _gasRefund: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainlinkRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchangeRate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapV2Rate(
      _fromToken: string,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
